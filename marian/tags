!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABORT	src/common/logging.h	43;"	d
ABORT_IF	src/common/logging.h	60;"	d
ACTION	src/3rd_party/yaml-cpp/scanscalar.h	/^enum ACTION { NONE, BREAK, THROW };$/;"	g	namespace:YAML
ALIAS	src/3rd_party/yaml-cpp/token.h	/^    ALIAS,$/;"	e	enum:YAML::Token::TYPE
ALIAS_CONTENT	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const ALIAS_CONTENT =$/;"	m	namespace:YAML::ErrorMsg
ALIAS_NOT_FOUND	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const ALIAS_NOT_FOUND = "alias not found after *";$/;"	m	namespace:YAML::ErrorMsg
ALIGN	src/tensors/tensor_allocator.h	/^  const size_t ALIGN = 256;$/;"	m	class:marian::TensorAllocator
ALIGN_CENTER	src/3rd_party/spdlog/details/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_CENTER	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_DEFAULT	src/3rd_party/spdlog/details/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_DEFAULT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_LEFT	src/3rd_party/spdlog/details/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_LEFT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_NUMERIC	src/3rd_party/spdlog/details/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_NUMERIC	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_RIGHT	src/3rd_party/spdlog/details/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_RIGHT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
AMBIGUOUS_ANCHOR	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const AMBIGUOUS_ANCHOR =$/;"	m	namespace:YAML::ErrorMsg
ANCHOR	src/3rd_party/yaml-cpp/token.h	/^    ANCHOR,$/;"	e	enum:YAML::Token::TYPE
ANCHORDICT_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/contrib/anchordict.h	2;"	d
ANCHOR_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/anchor.h	2;"	d
ANCHOR_NOT_FOUND	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const ANCHOR_NOT_FOUND = "anchor not found after &";$/;"	m	namespace:YAML::ErrorMsg
AND_THEN	src/3rd_party/catch.hpp	11503;"	d
AND_THEN	src/3rd_party/spdlog/tests/catch.hpp	9408;"	d
AND_WHEN	src/3rd_party/catch.hpp	11501;"	d
AND_WHEN	src/3rd_party/spdlog/tests/catch.hpp	9406;"	d
APP_STL	src/3rd_party/spdlog/example/jni/Application.mk	/^APP_STL = gnustl_static$/;"	m
ASCII_TEXT_BORDER_WIDTH	src/3rd_party/svd/defs_and_types.h	27;"	d
A_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class A_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
Accumulator	src/layers/factory.h	/^  Accumulator() : Factory(nullptr) {}$/;"	f	class:marian::Accumulator
Accumulator	src/layers/factory.h	/^  Accumulator(Ptr<ExpressionGraph> graph) : Factory(graph) {}$/;"	f	class:marian::Accumulator
Accumulator	src/layers/factory.h	/^  Accumulator(const Factory& factory) : Factory(factory) {}$/;"	f	class:marian::Accumulator
Accumulator	src/layers/factory.h	/^class Accumulator : public Factory {$/;"	c	namespace:marian
AccuracyValidator	src/examples/mnist/validator.h	/^  AccuracyValidator(Ptr<Config> options)$/;"	f	class:marian::AccuracyValidator
AccuracyValidator	src/examples/mnist/validator.h	/^class AccuracyValidator : public Validator<data::MNISTData> {$/;"	c	namespace:marian
Adagrad	src/optimizers/optimizers.h	/^  Adagrad(float eta, Ptr<ClipperBase> clipper = nullptr)$/;"	f	class:marian::Adagrad
Adagrad	src/optimizers/optimizers.h	/^class Adagrad : public OptimizerBase {$/;"	c	namespace:marian
Adam	src/optimizers/optimizers.h	/^  Adam(float eta, Ptr<ClipperBase> clipper = nullptr)$/;"	f	class:marian::Adam
Adam	src/optimizers/optimizers.h	/^class Adam : public OptimizerBase {$/;"	c	namespace:marian
Add	src/kernels/tensor_operators.h	/^void Add(Functor functor,$/;"	f	namespace:marian
Add	src/translator/history.h	/^  void Add(const Beam& beam, bool last = false) {$/;"	f	class:marian::History
AddPositionalEmbeddings	src/models/transformer.h	/^  Expr AddPositionalEmbeddings(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::Transformer
AddYamlToNpz	src/common/config.cpp	/^void Config::AddYamlToNpz(const YAML::Node& yaml,$/;"	f	class:marian::Config
AdvanceCurrent	src/3rd_party/yaml-cpp/stream.cpp	/^void Stream::AdvanceCurrent() {$/;"	f	class:YAML::Stream
AffineNodeOp	src/graph/node_operators_binary.h	/^  AffineNodeOp(const std::vector<Expr>& nodes)$/;"	f	struct:marian::AffineNodeOp
AffineNodeOp	src/graph/node_operators_binary.h	/^struct AffineNodeOp : public NaryNodeOp {$/;"	s	namespace:marian
Alias	src/3rd_party/yaml-cpp/emittermanip.h	/^inline _Alias Alias(const std::string content) { return _Alias(content); }$/;"	f	namespace:YAML
Alias	src/3rd_party/yaml-cpp/exp.h	/^const char Alias = '*';$/;"	m	namespace:YAML::Keys
AliasManager	src/3rd_party/yaml-cpp/nodeevents.h	/^    AliasManager() : m_curAnchor(0) {}$/;"	f	class:YAML::NodeEvents::AliasManager
AliasManager	src/3rd_party/yaml-cpp/nodeevents.h	/^  class AliasManager {$/;"	c	class:YAML::NodeEvents
AlignSpec	src/3rd_party/spdlog/details/format.h	/^    AlignSpec(unsigned width, wchar_t fill, Alignment align = ALIGN_DEFAULT)$/;"	f	struct:fmt::AlignSpec
AlignSpec	src/3rd_party/spdlog/details/format.h	/^struct AlignSpec: WidthSpec$/;"	s	namespace:fmt
AlignSpec	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    AlignSpec(unsigned width, wchar_t fill, Alignment align = ALIGN_DEFAULT)$/;"	f	struct:fmt::AlignSpec
AlignSpec	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct AlignSpec : WidthSpec$/;"	s	namespace:fmt
AlignTypeSpec	src/3rd_party/spdlog/details/format.h	/^    AlignTypeSpec(unsigned width, wchar_t fill): AlignSpec(width, fill)$/;"	f	struct:fmt::AlignTypeSpec
AlignTypeSpec	src/3rd_party/spdlog/details/format.h	/^struct AlignTypeSpec: AlignSpec$/;"	s	namespace:fmt
AlignTypeSpec	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    AlignTypeSpec(unsigned width, wchar_t fill) : AlignSpec(width, fill) {}$/;"	f	struct:fmt::AlignTypeSpec
AlignTypeSpec	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct AlignTypeSpec : AlignSpec$/;"	s	namespace:fmt
Alignment	src/3rd_party/spdlog/details/format.h	/^enum Alignment$/;"	g	namespace:fmt
Alignment	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^enum Alignment$/;"	g	namespace:fmt
Alignment	src/data/corpus.h	/^  typedef std::vector<Point> Alignment;$/;"	t	class:marian::data::WordAlignment
Alignment	src/tools/align2steps.cpp	/^typedef std::vector<Point> Alignment;$/;"	t	file:
AllOf	src/3rd_party/catch.hpp	/^    inline Impl::MatchAllOf<T> AllOf( Impl::MatcherBase<T> const& m1, Impl::MatcherBase<T> const& m2 ) {$/;"	f	namespace:Catch::Matchers
AllOf	src/3rd_party/catch.hpp	/^    inline Impl::MatchAllOf<T> AllOf( Impl::MatcherBase<T> const& m1, Impl::MatcherBase<T> const& m2, Impl::MatcherBase<T> const& m3 ) {$/;"	f	namespace:Catch::Matchers
AllocationException	src/tensors/allocator.h	/^class AllocationException : public std::exception {$/;"	c	namespace:marian
Allocator	src/tensors/allocator.h	/^  Allocator(size_t deviceNo, size_t bytes, size_t step, size_t alignment = 256)$/;"	f	class:marian::Allocator
Allocator	src/tensors/allocator.h	/^class Allocator {$/;"	c	namespace:marian
Alpha	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Alpha() {$/;"	f	namespace:YAML::Exp
AlphaNumeric	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& AlphaNumeric() {$/;"	f	namespace:YAML::Exp
Amun	src/models/amun.h	/^  Amun(Ptr<Options> options) : EncoderDecoder(options) {$/;"	f	class:marian::Amun
Amun	src/models/amun.h	/^class Amun : public EncoderDecoder {$/;"	c	namespace:marian
Anchor	src/3rd_party/yaml-cpp/emittermanip.h	/^inline _Anchor Anchor(const std::string content) { return _Anchor(content); }$/;"	f	namespace:YAML
Anchor	src/3rd_party/yaml-cpp/exp.h	/^const char Anchor = '&';$/;"	m	namespace:YAML::Keys
Anchor	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Anchor() {$/;"	f	namespace:YAML::Exp
AnchorByIdentity	src/3rd_party/yaml-cpp/nodeevents.h	/^    typedef std::map<const detail::node_ref*, anchor_t> AnchorByIdentity;$/;"	t	class:YAML::NodeEvents::AliasManager
AnchorDict	src/3rd_party/yaml-cpp/contrib/anchordict.h	/^class AnchorDict {$/;"	c	namespace:YAML
AnchorEnd	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& AnchorEnd() {$/;"	f	namespace:YAML::Exp
AnchorMap	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  typedef AnchorDict<void*> AnchorMap;$/;"	t	class:YAML::GraphBuilderAdapter
AnchorReference	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void *AnchorReference(const Mark &mark, void *pNode) {$/;"	f	class:YAML::GraphBuilder
AnchorReference	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void *AnchorReference(const Mark &mark, void *pNode) {$/;"	f	class:YAML::GraphBuilderInterface
Anchors	src/3rd_party/yaml-cpp/singledocparser.h	/^  typedef std::map<std::string, anchor_t> Anchors;$/;"	t	class:YAML::SingleDocParser
AnyOf	src/3rd_party/catch.hpp	/^    inline Impl::MatchAnyOf<T> AnyOf( Impl::MatcherBase<T> const& m1, Impl::MatcherBase<T> const& m2 ) {$/;"	f	namespace:Catch::Matchers
AnyOf	src/3rd_party/catch.hpp	/^    inline Impl::MatchAnyOf<T> AnyOf( Impl::MatcherBase<T> const& m1, Impl::MatcherBase<T> const& m2, Impl::MatcherBase<T> const& m3 ) {$/;"	f	namespace:Catch::Matchers
Append	src/3rd_party/exception.h	/^    template <class Data> void Append(const Data &data) {$/;"	f	class:util::Exception
Append	src/3rd_party/exception.h	/^    void Append(const char *data) {$/;"	f	class:util::Exception
Append	src/3rd_party/exception.h	/^    void Append(const std::string &data) {$/;"	f	class:util::Exception
AppendToSequence	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void AppendToSequence(void *pSequence, void *pNode) {$/;"	f	class:YAML::GraphBuilder
Arg	src/3rd_party/spdlog/details/format.h	/^struct Arg: Value$/;"	s	namespace:fmt::internal
Arg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef internal::Arg Arg;$/;"	t	class:fmt::ArgVisitor
Arg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct Arg : Value$/;"	s	namespace:fmt::internal
ArgArray	src/3rd_party/spdlog/details/format.h	/^struct ArgArray<N, false\/*IsPacked*\/>$/;"	s	namespace:fmt
ArgArray	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct ArgArray<N, false\/*IsPacked*\/>$/;"	s	namespace:fmt
ArgConverter	src/3rd_party/spdlog/details/format.cc	/^			ArgConverter(fmt::internal::Arg &arg, wchar_t type)$/;"	f	class:fmt::__anon34::ArgConverter
ArgConverter	src/3rd_party/spdlog/details/format.cc	/^		class ArgConverter: public fmt::internal::ArgVisitor<ArgConverter<T>, void>$/;"	c	namespace:fmt::__anon34	file:
ArgConverter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  ArgConverter(internal::Arg &arg, wchar_t type)$/;"	f	class:fmt::__anon71::ArgConverter
ArgConverter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^class ArgConverter : public ArgVisitor<ArgConverter<T>, void> {$/;"	c	namespace:fmt::__anon71	file:
ArgFormatter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    ArgFormatter(BasicFormatter<Char> &formatter,$/;"	f	class:fmt::ArgFormatter
ArgFormatter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class ArgFormatter : public BasicArgFormatter<ArgFormatter<Char>, Char>$/;"	c	namespace:fmt
ArgFormatterBase	src/3rd_party/spdlog/details/format.h	/^    ArgFormatterBase(BasicWriter<Char> &w, FormatSpec &s)$/;"	f	class:fmt::internal::ArgFormatterBase
ArgFormatterBase	src/3rd_party/spdlog/details/format.h	/^class ArgFormatterBase: public ArgVisitor<Impl, void>$/;"	c	namespace:fmt::internal
ArgFormatterBase	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    ArgFormatterBase(BasicWriter<Char> &w, FormatSpec &s)$/;"	f	class:fmt::internal::ArgFormatterBase
ArgFormatterBase	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class ArgFormatterBase : public ArgVisitor<Impl, void>$/;"	c	namespace:fmt::internal
ArgList	src/3rd_party/spdlog/details/format.h	/^    ArgList(): types_(0)$/;"	f	class:fmt::ArgList
ArgList	src/3rd_party/spdlog/details/format.h	/^    ArgList(ULongLong types, const internal::Arg *args)$/;"	f	class:fmt::ArgList
ArgList	src/3rd_party/spdlog/details/format.h	/^    ArgList(ULongLong types, const internal::Value *values)$/;"	f	class:fmt::ArgList
ArgList	src/3rd_party/spdlog/details/format.h	/^class ArgList$/;"	c	namespace:fmt
ArgList	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    ArgList() : types_(0) {}$/;"	f	class:fmt::ArgList
ArgList	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    ArgList(ULongLong types, const internal::Arg *args)$/;"	f	class:fmt::ArgList
ArgList	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    ArgList(ULongLong types, const internal::Value *values)$/;"	f	class:fmt::ArgList
ArgList	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class ArgList$/;"	c	namespace:fmt
ArgMap	src/3rd_party/spdlog/details/format.h	/^class ArgMap$/;"	c	namespace:fmt::internal
ArgMap	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class ArgMap$/;"	c	namespace:fmt::internal
ArgType	src/3rd_party/spdlog/details/format.h	/^    ArgType(): type(0)$/;"	f	struct:fmt::ArgType
ArgType	src/3rd_party/spdlog/details/format.h	/^    ArgType(const T &arg) : type(make_type(arg))$/;"	f	struct:fmt::ArgType
ArgType	src/3rd_party/spdlog/details/format.h	/^struct ArgType$/;"	s	namespace:fmt
ArgType	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    ArgType() : type(0) {}$/;"	f	struct:fmt::ArgType
ArgType	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    ArgType(const T &arg) : type(make_type(arg)) {}$/;"	f	struct:fmt::ArgType
ArgType	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct ArgType$/;"	s	namespace:fmt
ArgVisitor	src/3rd_party/spdlog/details/format.h	/^class ArgVisitor$/;"	c	namespace:fmt::internal
ArgVisitor	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class ArgVisitor$/;"	c	namespace:fmt
Array	src/gpu/array.h	/^struct Array {$/;"	s	namespace:marian::gpu
ArrayWriter	src/3rd_party/spdlog/details/format.h	/^typedef BasicArrayWriter<char> ArrayWriter;$/;"	t
ArrayWriter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef BasicArrayWriter<char> ArrayWriter;$/;"	t
AsBuilderInterface	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  GraphBuilderInterface &AsBuilderInterface() { return *this; }$/;"	f	class:YAML::GraphBuilder
AsMap	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  static Map *AsMap(void *pMap) { return static_cast<Map *>(pMap); }$/;"	f	class:YAML::GraphBuilder
AsNode	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  static Node *AsNode(void *pNode) { return static_cast<Node *>(pNode); }$/;"	f	class:YAML::GraphBuilder
AsSequence	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  static Sequence *AsSequence(void *pSeq) {$/;"	f	class:YAML::GraphBuilder
AssertionInfo	src/3rd_party/catch.hpp	/^        AssertionInfo() {}$/;"	f	struct:Catch::AssertionInfo
AssertionInfo	src/3rd_party/catch.hpp	/^    struct AssertionInfo$/;"	s	namespace:Catch
AssertionInfo	src/3rd_party/spdlog/tests/catch.hpp	/^        AssertionInfo() {}$/;"	f	struct:Catch::AssertionInfo
AssertionInfo	src/3rd_party/spdlog/tests/catch.hpp	/^    struct AssertionInfo$/;"	s	namespace:Catch
AssertionResult	src/3rd_party/catch.hpp	/^    class AssertionResult {$/;"	c	namespace:Catch
AssertionResult	src/3rd_party/spdlog/tests/catch.hpp	/^    class AssertionResult {$/;"	c	namespace:Catch
AssertionResultData	src/3rd_party/catch.hpp	/^        AssertionResultData() : decomposedExpression( CATCH_NULL )$/;"	f	struct:Catch::AssertionResultData
AssertionResultData	src/3rd_party/catch.hpp	/^    struct AssertionResultData$/;"	s	namespace:Catch
AssertionResultData	src/3rd_party/spdlog/tests/catch.hpp	/^        AssertionResultData() : resultType( ResultWas::Unknown ) {}$/;"	f	struct:Catch::AssertionResultData
AssertionResultData	src/3rd_party/spdlog/tests/catch.hpp	/^    struct AssertionResultData$/;"	s	namespace:Catch
Assign	src/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::Assign(char* rhs) {$/;"	f	class:YAML::Node
Assign	src/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::Assign(const T& rhs) {$/;"	f	class:YAML::Node
Assign	src/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::Assign(const char* rhs) {$/;"	f	class:YAML::Node
Assign	src/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::Assign(const std::string& rhs) {$/;"	f	class:YAML::Node
Assign	src/functional/predicates.h	/^      Assign(Arg1 arg1, Arg2 arg2) : x(arg1), y(arg2) {}$/;"	f	struct:marian::functional::Assign
Assign	src/functional/predicates.h	/^    struct Assign {$/;"	s	namespace:marian::functional
AssignData	src/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::AssignData(const Node& rhs) {$/;"	f	class:YAML::Node
AssignInMap	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void AssignInMap(void *pMap, void *pKeyNode, void *pValueNode) {$/;"	f	class:YAML::GraphBuilder
AssignNode	src/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::AssignNode(const Node& rhs) {$/;"	f	class:YAML::Node
Assignee	src/functional/predicates.h	/^      Assignee() {}$/;"	f	struct:marian::functional::Assignee
Assignee	src/functional/predicates.h	/^      Assignee(Var<N> v) : var(v) {}$/;"	f	struct:marian::functional::Assignee
Assignee	src/functional/predicates.h	/^    struct Assignee {$/;"	s	namespace:marian::functional
AsyncGraphGroup	src/training/graph_group_async.h	/^  AsyncGraphGroup(Ptr<Config> options)$/;"	f	class:marian::AsyncGraphGroup
AsyncGraphGroup	src/training/graph_group_async.h	/^class AsyncGraphGroup : public GraphGroup {$/;"	c	namespace:marian
AsyncGraphGroup	src/training/graph_group_async_drop.h	/^  AsyncGraphGroup(Ptr<Config> options, Args... args)$/;"	f	class:marian::AsyncGraphGroup
AsyncGraphGroup	src/training/graph_group_async_drop.h	/^class AsyncGraphGroup : public GraphGroup {$/;"	c	namespace:marian
Attention	src/models/transformer.h	/^  Expr Attention(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::Transformer
AttentionFactory	src/rnn/constructors.h	/^  AttentionFactory(Ptr<ExpressionGraph> graph) : InputFactory(graph) {}$/;"	f	class:marian::rnn::AttentionFactory
AttentionFactory	src/rnn/constructors.h	/^class AttentionFactory : public InputFactory {$/;"	c	namespace:marian::rnn
Auto	src/3rd_party/yaml-cpp/emittermanip.h	/^  Auto,$/;"	e	enum:YAML::EMITTER_MANIP
AutoReg	src/3rd_party/catch.hpp	/^    AutoReg$/;"	f	struct:Catch::AutoReg
AutoReg	src/3rd_party/catch.hpp	/^struct AutoReg {$/;"	s	namespace:Catch
AutoReg	src/3rd_party/spdlog/tests/catch.hpp	/^    AutoReg(    void (C::*method)(),$/;"	f	struct:Catch::AutoReg
AutoReg	src/3rd_party/spdlog/tests/catch.hpp	/^struct AutoReg {$/;"	s	namespace:Catch
BACKWARD	src/3rd_party/svd/defs_and_types.h	31;"	d
BAD_CONVERSION	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const BAD_CONVERSION = "bad conversion";$/;"	m	namespace:YAML::ErrorMsg
BAD_DEREFERENCE	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const BAD_DEREFERENCE = "bad dereference";$/;"	m	namespace:YAML::ErrorMsg
BAD_FILE	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const BAD_FILE = "bad file";$/;"	m	namespace:YAML::ErrorMsg
BAD_INSERT	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const BAD_INSERT = "inserting in a non-convertible-to-map";$/;"	m	namespace:YAML::ErrorMsg
BAD_PUSHBACK	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const BAD_PUSHBACK = "appending to a non-sequence";$/;"	m	namespace:YAML::ErrorMsg
BAD_SUBSCRIPT	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const BAD_SUBSCRIPT = "operator[] call on a scalar";$/;"	m	namespace:YAML::ErrorMsg
BASE64_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/binary.h	2;"	d
BINARY	src/functional/predicates.h	62;"	d
BLACK	src/3rd_party/spdlog/details/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
BLACK	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	e	enum:Color
BLOCK_ENTRY	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const BLOCK_ENTRY = "illegal block entry";$/;"	m	namespace:YAML::ErrorMsg
BLOCK_ENTRY	src/3rd_party/yaml-cpp/token.h	/^    BLOCK_ENTRY,$/;"	e	enum:YAML::Token::TYPE
BLOCK_MAP_END	src/3rd_party/yaml-cpp/token.h	/^    BLOCK_MAP_END,$/;"	e	enum:YAML::Token::TYPE
BLOCK_MAP_START	src/3rd_party/yaml-cpp/token.h	/^    BLOCK_MAP_START,$/;"	e	enum:YAML::Token::TYPE
BLOCK_SEQ_END	src/3rd_party/yaml-cpp/token.h	/^    BLOCK_SEQ_END,$/;"	e	enum:YAML::Token::TYPE
BLOCK_SEQ_START	src/3rd_party/yaml-cpp/token.h	/^    BLOCK_SEQ_START,$/;"	e	enum:YAML::Token::TYPE
BLOCK_SIZE	src/translator/nth_element.h	/^  const int BLOCK_SIZE = 512;$/;"	m	class:marian::NthElement
BLUE	src/3rd_party/spdlog/details/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
BLUE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	e	enum:Color
BOLD	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    const WORD BOLD = FOREGROUND_INTENSITY;$/;"	m	class:spdlog::sinks::wincolor_sink
BOOL	src/3rd_party/spdlog/details/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
BOOL	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
BOOST_PYTHON_MODULE	src/python/mariannmt.cpp	/^BOOST_PYTHON_MODULE(libmariannmt) {$/;"	f
BREAK	src/3rd_party/yaml-cpp/scanscalar.h	/^enum ACTION { NONE, BREAK, THROW };$/;"	e	enum:YAML::ACTION
BUFFER_SIZE	src/3rd_party/spdlog/details/format.h	/^        BUFFER_SIZE = std::numeric_limits<ULongLong>::digits10 + 3$/;"	e	enum:FormatInt::__anon33
BUFFER_SIZE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    enum {BUFFER_SIZE = std::numeric_limits<ULongLong>::digits10 + 3};$/;"	e	enum:FormatInt::__anon70
B_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class B_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
Backend	src/graph/backend.h	/^class Backend {$/;"	c	namespace:marian
BackendGPU	src/graph/backend_gpu.h	/^class BackendGPU : public Backend {$/;"	c	namespace:marian
BadConversion	src/3rd_party/yaml-cpp/exceptions.h	/^  explicit BadConversion(const Mark& mark_)$/;"	f	class:YAML::BadConversion
BadConversion	src/3rd_party/yaml-cpp/exceptions.h	/^class YAML_CPP_API BadConversion : public RepresentationException {$/;"	c	namespace:YAML
BadDereference	src/3rd_party/yaml-cpp/exceptions.h	/^  BadDereference()$/;"	f	class:YAML::BadDereference
BadDereference	src/3rd_party/yaml-cpp/exceptions.h	/^class YAML_CPP_API BadDereference : public RepresentationException {$/;"	c	namespace:YAML
BadFile	src/3rd_party/yaml-cpp/exceptions.h	/^  BadFile() : Exception(Mark::null_mark(), ErrorMsg::BAD_FILE) {}$/;"	f	class:YAML::BadFile
BadFile	src/3rd_party/yaml-cpp/exceptions.h	/^class YAML_CPP_API BadFile : public Exception {$/;"	c	namespace:YAML
BadInsert	src/3rd_party/yaml-cpp/exceptions.h	/^  BadInsert()$/;"	f	class:YAML::BadInsert
BadInsert	src/3rd_party/yaml-cpp/exceptions.h	/^class YAML_CPP_API BadInsert : public RepresentationException {$/;"	c	namespace:YAML
BadPushback	src/3rd_party/yaml-cpp/exceptions.h	/^  BadPushback()$/;"	f	class:YAML::BadPushback
BadPushback	src/3rd_party/yaml-cpp/exceptions.h	/^class YAML_CPP_API BadPushback : public RepresentationException {$/;"	c	namespace:YAML
BadSubscript	src/3rd_party/yaml-cpp/exceptions.h	/^  BadSubscript()$/;"	f	class:YAML::BadSubscript
BadSubscript	src/3rd_party/yaml-cpp/exceptions.h	/^class YAML_CPP_API BadSubscript : public RepresentationException {$/;"	c	namespace:YAML
Base	src/3rd_party/spdlog/details/format.cc	/^			typedef ArgFormatterBase<PrintfArgFormatter<Char>, Char> Base;$/;"	t	class:fmt::internal::PrintfArgFormatter	file:
Base	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  typedef ArgFormatterBase<PrintfArgFormatter<Char>, Char> Base;$/;"	t	class:fmt::internal::PrintfArgFormatter	file:
Base64	src/3rd_party/simple-websocket-server/crypto.hpp	/^    class Base64 {$/;"	c	class:SimpleWeb::Crypto
BaseRNN	src/rnn/rnn.h	/^  BaseRNN(Ptr<ExpressionGraph> graph, Ptr<Options> options)$/;"	f	class:marian::rnn::BaseRNN
BaseRNN	src/rnn/rnn.h	/^class BaseRNN {$/;"	c	namespace:marian::rnn
BasicArgFormatter	src/3rd_party/spdlog/details/format.h	/^    BasicArgFormatter(BasicFormatter<Char> &f, FormatSpec &s, const Char *fmt)$/;"	f	class:fmt::internal::BasicArgFormatter
BasicArgFormatter	src/3rd_party/spdlog/details/format.h	/^class BasicArgFormatter:$/;"	c	namespace:fmt::internal
BasicArgFormatter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicArgFormatter(BasicFormatter<Char, Impl> &formatter,$/;"	f	class:fmt::BasicArgFormatter
BasicArgFormatter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class BasicArgFormatter : public internal::ArgFormatterBase<Impl, Char>$/;"	c	namespace:fmt
BasicArrayWriter	src/3rd_party/spdlog/details/format.h	/^    BasicArrayWriter(Char *array, std::size_t size)$/;"	f	class:BasicArrayWriter
BasicArrayWriter	src/3rd_party/spdlog/details/format.h	/^class BasicArrayWriter: public BasicWriter<Char>$/;"	c
BasicArrayWriter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicArrayWriter(Char *array, std::size_t size)$/;"	f	class:BasicArrayWriter
BasicArrayWriter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class BasicArrayWriter : public BasicWriter<Char>$/;"	c
BasicCStringRef	src/3rd_party/spdlog/details/format.h	/^    BasicCStringRef(const Char *s): data_(s)$/;"	f	class:fmt::BasicCStringRef
BasicCStringRef	src/3rd_party/spdlog/details/format.h	/^    BasicCStringRef(const std::basic_string<Char> &s): data_(s.c_str())$/;"	f	class:fmt::BasicCStringRef
BasicCStringRef	src/3rd_party/spdlog/details/format.h	/^class BasicCStringRef$/;"	c	namespace:fmt
BasicCStringRef	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicCStringRef(const Char *s) : data_(s) {}$/;"	f	class:fmt::BasicCStringRef
BasicCStringRef	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicCStringRef(const std::basic_string<Char> &s) : data_(s.c_str()) {}$/;"	f	class:fmt::BasicCStringRef
BasicCStringRef	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class BasicCStringRef$/;"	c	namespace:fmt
BasicCharTraits	src/3rd_party/spdlog/details/format.h	/^class BasicCharTraits$/;"	c	namespace:fmt::internal
BasicCharTraits	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class BasicCharTraits$/;"	c	namespace:fmt::internal
BasicData	src/3rd_party/spdlog/details/format.cc	/^template struct fmt::internal::BasicData<void>;$/;"	m	class:fmt::internal	typeref:struct:fmt::internal::	file:
BasicData	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^template struct fmt::internal::BasicData<void>;$/;"	m	class:fmt::internal	typeref:struct:fmt::internal::	file:
BasicFormatter	src/3rd_party/spdlog/details/format.h	/^    BasicFormatter(const ArgList &args, BasicWriter<Char> &w)$/;"	f	class:fmt::BasicFormatter
BasicFormatter	src/3rd_party/spdlog/details/format.h	/^class BasicFormatter: private internal::FormatterBase$/;"	c	namespace:fmt
BasicFormatter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicFormatter(const ArgList &args, BasicWriter<Char> &w)$/;"	f	class:fmt::BasicFormatter
BasicFormatter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class BasicFormatter : private internal::FormatterBase$/;"	c	namespace:fmt
BasicMemoryWriter	src/3rd_party/spdlog/details/format.h	/^    BasicMemoryWriter(BasicMemoryWriter &&other)$/;"	f	class:BasicMemoryWriter
BasicMemoryWriter	src/3rd_party/spdlog/details/format.h	/^    explicit BasicMemoryWriter(const Allocator& alloc = Allocator())$/;"	f	class:BasicMemoryWriter
BasicMemoryWriter	src/3rd_party/spdlog/details/format.h	/^class BasicMemoryWriter: public BasicWriter<Char>$/;"	c
BasicMemoryWriter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicMemoryWriter(BasicMemoryWriter &&other)$/;"	f	class:BasicMemoryWriter
BasicMemoryWriter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    explicit BasicMemoryWriter(const Allocator& alloc = Allocator())$/;"	f	class:BasicMemoryWriter
BasicMemoryWriter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class BasicMemoryWriter : public BasicWriter<Char>$/;"	c
BasicStringRef	src/3rd_party/spdlog/details/format.h	/^    BasicStringRef(const Char *s)$/;"	f	class:fmt::BasicStringRef
BasicStringRef	src/3rd_party/spdlog/details/format.h	/^    BasicStringRef(const Char *s, std::size_t size): data_(s), size_(size)$/;"	f	class:fmt::BasicStringRef
BasicStringRef	src/3rd_party/spdlog/details/format.h	/^    BasicStringRef(const std::basic_string<Char> &s)$/;"	f	class:fmt::BasicStringRef
BasicStringRef	src/3rd_party/spdlog/details/format.h	/^class BasicStringRef$/;"	c	namespace:fmt
BasicStringRef	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicStringRef(const Char *s)$/;"	f	class:fmt::BasicStringRef
BasicStringRef	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicStringRef(const Char *s, std::size_t size) : data_(s), size_(size) {}$/;"	f	class:fmt::BasicStringRef
BasicStringRef	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicStringRef(const std::basic_string<Char> &s)$/;"	f	class:fmt::BasicStringRef
BasicStringRef	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class BasicStringRef$/;"	c	namespace:fmt
BasicWriter	src/3rd_party/spdlog/details/format.h	/^    explicit BasicWriter(Buffer<Char> &b): buffer_(b)$/;"	f	class:BasicWriter
BasicWriter	src/3rd_party/spdlog/details/format.h	/^class BasicWriter$/;"	c
BasicWriter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    explicit BasicWriter(Buffer<Char> &b) : buffer_(b) {}$/;"	f	class:BasicWriter
BasicWriter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class BasicWriter$/;"	c
Batch	src/data/batch.h	/^class Batch {$/;"	c	namespace:marian::data
BatchGenerator	src/data/batch_generator.h	/^  BatchGenerator(Ptr<DataSet> data,$/;"	f	class:marian::data::BatchGenerator
BatchGenerator	src/data/batch_generator.h	/^class BatchGenerator {$/;"	c	namespace:marian::data
BatchPtr	src/data/batch_generator.h	/^  typedef typename DataSet::batch_ptr BatchPtr;$/;"	t	class:marian::data::BatchGenerator
BatchStats	src/data/batch_stats.h	/^class BatchStats {$/;"	c	namespace:marian::data
Beam	src/translator/hypothesis.h	/^typedef std::vector<Ptr<Hypothesis>> Beam;$/;"	t	namespace:marian
BeamSearch	src/translator/beam_search.h	/^  BeamSearch(Ptr<Config> options,$/;"	f	class:marian::BeamSearch
BeamSearch	src/translator/beam_search.h	/^class BeamSearch {$/;"	c	namespace:marian
Beams	src/translator/hypothesis.h	/^typedef std::vector<Beam> Beams;$/;"	t	namespace:marian
BeginDoc	src/3rd_party/yaml-cpp/emittermanip.h	/^  BeginDoc,$/;"	e	enum:YAML::EMITTER_MANIP
BeginMap	src/3rd_party/yaml-cpp/emittermanip.h	/^  BeginMap,$/;"	e	enum:YAML::EMITTER_MANIP
BeginNode	src/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::BeginNode() {$/;"	f	class:YAML::EmitFromEvents
BeginSeq	src/3rd_party/yaml-cpp/emittermanip.h	/^  BeginSeq,$/;"	e	enum:YAML::EMITTER_MANIP
BigEndianTest	src/3rd_party/cnpy/cnpy.cpp	/^char cnpy::BigEndianTest() {$/;"	f	class:cnpy
Binary	src/3rd_party/yaml-cpp/binary.h	/^  Binary() : m_unownedData(0), m_unownedSize(0) {}$/;"	f	class:YAML::Binary
Binary	src/3rd_party/yaml-cpp/binary.h	/^  Binary(const unsigned char *data_, std::size_t size_)$/;"	f	class:YAML::Binary
Binary	src/3rd_party/yaml-cpp/binary.h	/^class YAML_CPP_API Binary {$/;"	c	namespace:YAML
BinaryFunctor	src/functional/predicates.h	/^      BinaryFunctor(Arg1 arg1, Arg2 arg2) : x(arg1), y(arg2) {}$/;"	f	struct:marian::functional::BinaryFunctor
BinaryFunctor	src/functional/predicates.h	/^    struct BinaryFunctor {$/;"	s	namespace:marian::functional
Blank	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Blank() {$/;"	f	namespace:YAML::Exp
BlankOrBreak	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& BlankOrBreak() {$/;"	f	namespace:YAML::Exp
Block	src/3rd_party/yaml-cpp/emittermanip.h	/^  Block,$/;"	e	enum:YAML::EMITTER_MANIP
Block	src/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { NoType, Flow, Block };$/;"	e	enum:YAML::FlowType::value
Block	src/3rd_party/yaml-cpp/emitterstyle.h	/^  enum value { Default, Block, Flow };$/;"	e	enum:YAML::EmitterStyle::value
BlockEntry	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& BlockEntry() {$/;"	f	namespace:YAML::Exp
BlockMap	src/3rd_party/yaml-cpp/collectionstack.h	/^  enum value { NoCollection, BlockMap, BlockSeq, FlowMap, FlowSeq, CompactMap };$/;"	e	enum:YAML::CollectionType::value
BlockMap	src/3rd_party/yaml-cpp/emitterdef.h	/^  enum value { NoType, Property, Scalar, FlowSeq, BlockSeq, FlowMap, BlockMap };$/;"	e	enum:YAML::EmitterNodeType::value
BlockMapPrepareLongKey	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::BlockMapPrepareLongKey(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
BlockMapPrepareLongKeyValue	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::BlockMapPrepareLongKeyValue(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
BlockMapPrepareNode	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::BlockMapPrepareNode(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
BlockMapPrepareSimpleKey	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::BlockMapPrepareSimpleKey(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
BlockMapPrepareSimpleKeyValue	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::BlockMapPrepareSimpleKeyValue(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
BlockSeq	src/3rd_party/yaml-cpp/collectionstack.h	/^  enum value { NoCollection, BlockMap, BlockSeq, FlowMap, FlowSeq, CompactMap };$/;"	e	enum:YAML::CollectionType::value
BlockSeq	src/3rd_party/yaml-cpp/emitterdef.h	/^  enum value { NoType, Property, Scalar, FlowSeq, BlockSeq, FlowMap, BlockMap };$/;"	e	enum:YAML::EmitterNodeType::value
BlockSeqPrepareNode	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::BlockSeqPrepareNode(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
BorgType	src/3rd_party/catch.hpp	/^    struct BorgType {$/;"	s	namespace:Catch::Detail
Bottle	scripts/python/mariannmt_server.py	/^from bottle import request, Bottle, abort$/;"	i
Break	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Break() {$/;"	f	namespace:YAML::Exp
Buffer	src/3rd_party/spdlog/details/format.h	/^    Buffer(T *ptr = 0, std::size_t capacity = 0)$/;"	f	class:fmt::Buffer
Buffer	src/3rd_party/spdlog/details/format.h	/^class Buffer$/;"	c	namespace:fmt
Buffer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Buffer(T *ptr = 0, std::size_t capacity = 0)$/;"	f	class:fmt::Buffer
Buffer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class Buffer$/;"	c	namespace:fmt
BufferedFile	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	/^fmt::BufferedFile::BufferedFile($/;"	f	class:fmt::BufferedFile
BufferedFile	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    explicit BufferedFile(FILE *f) : file_(f) {}$/;"	f	class:fmt::BufferedFile
BufferedFile	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^class BufferedFile$/;"	c	namespace:fmt
BuildGraphOfNextDocument	src/3rd_party/yaml-cpp/contrib/graphbuilder.cpp	/^void* BuildGraphOfNextDocument(Parser& parser,$/;"	f	namespace:YAML
BuildGraphOfNextDocument	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^typename Impl::Node *BuildGraphOfNextDocument(Parser &parser, Impl &impl) {$/;"	f	namespace:YAML
C	src/functional/operands.h	/^    struct C {$/;"	s	namespace:marian::functional
CATCH_AND_THEN	src/3rd_party/catch.hpp	11417;"	d
CATCH_AND_THEN	src/3rd_party/spdlog/tests/catch.hpp	9339;"	d
CATCH_AND_WHEN	src/3rd_party/catch.hpp	11415;"	d
CATCH_AND_WHEN	src/3rd_party/spdlog/tests/catch.hpp	9337;"	d
CATCH_ANON_TEST_CASE	src/3rd_party/catch.hpp	11398;"	d
CATCH_ANON_TEST_CASE	src/3rd_party/spdlog/tests/catch.hpp	9320;"	d
CATCH_ARC_ENABLED	src/3rd_party/catch.hpp	1492;"	d
CATCH_ARC_ENABLED	src/3rd_party/spdlog/tests/catch.hpp	1019;"	d
CATCH_ARC_STRONG	src/3rd_party/catch.hpp	1510;"	d
CATCH_ARC_STRONG	src/3rd_party/catch.hpp	1526;"	d
CATCH_ARC_STRONG	src/3rd_party/spdlog/tests/catch.hpp	1037;"	d
CATCH_ARC_STRONG	src/3rd_party/spdlog/tests/catch.hpp	1053;"	d
CATCH_AUTO_PTR	src/3rd_party/catch.hpp	361;"	d
CATCH_AUTO_PTR	src/3rd_party/catch.hpp	363;"	d
CATCH_BREAK_INTO_DEBUGGER	src/3rd_party/catch.hpp	2126;"	d
CATCH_BREAK_INTO_DEBUGGER	src/3rd_party/spdlog/tests/catch.hpp	1537;"	d
CATCH_BREAK_INTO_DEBUGGER	src/3rd_party/spdlog/tests/catch.hpp	1555;"	d
CATCH_CAPTURE	src/3rd_party/catch.hpp	11376;"	d
CATCH_CAPTURE	src/3rd_party/spdlog/tests/catch.hpp	9302;"	d
CATCH_CHECK	src/3rd_party/catch.hpp	11354;"	d
CATCH_CHECK	src/3rd_party/spdlog/tests/catch.hpp	9286;"	d
CATCH_CHECKED_ELSE	src/3rd_party/catch.hpp	11357;"	d
CATCH_CHECKED_ELSE	src/3rd_party/spdlog/tests/catch.hpp	9289;"	d
CATCH_CHECKED_IF	src/3rd_party/catch.hpp	11356;"	d
CATCH_CHECKED_IF	src/3rd_party/spdlog/tests/catch.hpp	9288;"	d
CATCH_CHECK_FALSE	src/3rd_party/catch.hpp	11355;"	d
CATCH_CHECK_FALSE	src/3rd_party/spdlog/tests/catch.hpp	9287;"	d
CATCH_CHECK_NOFAIL	src/3rd_party/catch.hpp	11358;"	d
CATCH_CHECK_NOFAIL	src/3rd_party/spdlog/tests/catch.hpp	9290;"	d
CATCH_CHECK_NOTHROW	src/3rd_party/catch.hpp	11363;"	d
CATCH_CHECK_NOTHROW	src/3rd_party/spdlog/tests/catch.hpp	9294;"	d
CATCH_CHECK_THAT	src/3rd_party/catch.hpp	11365;"	d
CATCH_CHECK_THROWS	src/3rd_party/catch.hpp	11360;"	d
CATCH_CHECK_THROWS	src/3rd_party/spdlog/tests/catch.hpp	9292;"	d
CATCH_CHECK_THROWS_AS	src/3rd_party/catch.hpp	11361;"	d
CATCH_CHECK_THROWS_AS	src/3rd_party/spdlog/tests/catch.hpp	9293;"	d
CATCH_CHECK_THROWS_WITH	src/3rd_party/catch.hpp	11362;"	d
CATCH_CONFIG_COLOUR_WINDOWS	src/3rd_party/catch.hpp	7779;"	d
CATCH_CONFIG_COLOUR_WINDOWS	src/3rd_party/spdlog/tests/catch.hpp	6270;"	d
CATCH_CONFIG_CONSOLE_WIDTH	src/3rd_party/catch.hpp	3929;"	d
CATCH_CONFIG_CONSOLE_WIDTH	src/3rd_party/spdlog/tests/catch.hpp	3127;"	d
CATCH_CONFIG_COUNTER	src/3rd_party/catch.hpp	311;"	d
CATCH_CONFIG_CPP11_GENERATED_METHODS	src/3rd_party/catch.hpp	287;"	d
CATCH_CONFIG_CPP11_IS_ENUM	src/3rd_party/catch.hpp	290;"	d
CATCH_CONFIG_CPP11_LONG_LONG	src/3rd_party/catch.hpp	299;"	d
CATCH_CONFIG_CPP11_NOEXCEPT	src/3rd_party/catch.hpp	284;"	d
CATCH_CONFIG_CPP11_NOEXCEPT	src/3rd_party/spdlog/tests/catch.hpp	81;"	d
CATCH_CONFIG_CPP11_NULLPTR	src/3rd_party/catch.hpp	281;"	d
CATCH_CONFIG_CPP11_NULLPTR	src/3rd_party/spdlog/tests/catch.hpp	134;"	d
CATCH_CONFIG_CPP11_NULLPTR	src/3rd_party/spdlog/tests/catch.hpp	144;"	d
CATCH_CONFIG_CPP11_NULLPTR	src/3rd_party/spdlog/tests/catch.hpp	77;"	d
CATCH_CONFIG_CPP11_OVERRIDE	src/3rd_party/catch.hpp	302;"	d
CATCH_CONFIG_CPP11_SHUFFLE	src/3rd_party/catch.hpp	314;"	d
CATCH_CONFIG_CPP11_TUPLE	src/3rd_party/catch.hpp	293;"	d
CATCH_CONFIG_CPP11_TYPE_TRAITS	src/3rd_party/catch.hpp	317;"	d
CATCH_CONFIG_CPP11_UNIQUE_PTR	src/3rd_party/catch.hpp	305;"	d
CATCH_CONFIG_MAIN	src/3rd_party/spdlog/tests/main.cpp	1;"	d	file:
CATCH_CONFIG_MAIN	src/tests/run_tests.cpp	1;"	d	file:
CATCH_CONFIG_POSIX_SIGNALS	src/3rd_party/catch.hpp	324;"	d
CATCH_CONFIG_VARIADIC_MACROS	src/3rd_party/catch.hpp	296;"	d
CATCH_CONFIG_VARIADIC_MACROS	src/3rd_party/spdlog/tests/catch.hpp	160;"	d
CATCH_CONFIG_WINDOWS_SEH	src/3rd_party/catch.hpp	320;"	d
CATCH_CPP11	src/3rd_party/spdlog/tests/catch.hpp	170;"	d
CATCH_CPP11_OR_GREATER	src/3rd_party/catch.hpp	103;"	d
CATCH_CPP11_OR_GREATER	src/3rd_party/spdlog/tests/catch.hpp	171;"	d
CATCH_CPP11_OR_GREATER	src/3rd_party/spdlog/tests/catch.hpp	173;"	d
CATCH_CPP14_OR_GREATER	src/3rd_party/catch.hpp	107;"	d
CATCH_FAIL	src/3rd_party/catch.hpp	11385;"	d
CATCH_FAIL	src/3rd_party/spdlog/tests/catch.hpp	9310;"	d
CATCH_FAIL_CHECK	src/3rd_party/catch.hpp	11386;"	d
CATCH_GENERATE	src/3rd_party/catch.hpp	11403;"	d
CATCH_GENERATE	src/3rd_party/spdlog/tests/catch.hpp	9325;"	d
CATCH_GIVEN	src/3rd_party/catch.hpp	11413;"	d
CATCH_GIVEN	src/3rd_party/spdlog/tests/catch.hpp	9335;"	d
CATCH_IMPL	src/3rd_party/catch.hpp	49;"	d
CATCH_IMPL	src/3rd_party/spdlog/tests/catch.hpp	42;"	d
CATCH_INFO	src/3rd_party/catch.hpp	11373;"	d
CATCH_INFO	src/3rd_party/spdlog/tests/catch.hpp	9299;"	d
CATCH_INTERNAL_CONFIG_COUNTER	src/3rd_party/catch.hpp	226;"	d
CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	src/3rd_party/catch.hpp	202;"	d
CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	src/3rd_party/catch.hpp	245;"	d
CATCH_INTERNAL_CONFIG_CPP11_IS_ENUM	src/3rd_party/catch.hpp	249;"	d
CATCH_INTERNAL_CONFIG_CPP11_LONG_LONG	src/3rd_party/catch.hpp	261;"	d
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT	src/3rd_party/catch.hpp	119;"	d
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT	src/3rd_party/catch.hpp	201;"	d
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT	src/3rd_party/catch.hpp	241;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	src/3rd_party/catch.hpp	115;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	src/3rd_party/catch.hpp	181;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	src/3rd_party/catch.hpp	196;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	src/3rd_party/catch.hpp	237;"	d
CATCH_INTERNAL_CONFIG_CPP11_OVERRIDE	src/3rd_party/catch.hpp	265;"	d
CATCH_INTERNAL_CONFIG_CPP11_SHUFFLE	src/3rd_party/catch.hpp	203;"	d
CATCH_INTERNAL_CONFIG_CPP11_SHUFFLE	src/3rd_party/catch.hpp	271;"	d
CATCH_INTERNAL_CONFIG_CPP11_TUPLE	src/3rd_party/catch.hpp	253;"	d
CATCH_INTERNAL_CONFIG_CPP11_TYPE_TRAITS	src/3rd_party/catch.hpp	204;"	d
CATCH_INTERNAL_CONFIG_CPP11_TYPE_TRAITS	src/3rd_party/catch.hpp	274;"	d
CATCH_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	src/3rd_party/catch.hpp	197;"	d
CATCH_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	src/3rd_party/catch.hpp	268;"	d
CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS	src/3rd_party/catch.hpp	143;"	d
CATCH_INTERNAL_CONFIG_VARIADIC_MACROS	src/3rd_party/catch.hpp	217;"	d
CATCH_INTERNAL_CONFIG_VARIADIC_MACROS	src/3rd_party/catch.hpp	257;"	d
CATCH_INTERNAL_CONFIG_WINDOWS_SEH	src/3rd_party/catch.hpp	193;"	d
CATCH_INTERNAL_ERROR	src/3rd_party/catch.hpp	496;"	d
CATCH_INTERNAL_ERROR	src/3rd_party/spdlog/tests/catch.hpp	289;"	d
CATCH_INTERNAL_LINEINFO	src/3rd_party/catch.hpp	495;"	d
CATCH_INTERNAL_LINEINFO	src/3rd_party/spdlog/tests/catch.hpp	288;"	d
CATCH_INTERNAL_SUPPRESS_ETD_WARNINGS	src/3rd_party/catch.hpp	123;"	d
CATCH_INTERNAL_SUPPRESS_ETD_WARNINGS	src/3rd_party/catch.hpp	332;"	d
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS	src/3rd_party/catch.hpp	129;"	d
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS	src/3rd_party/catch.hpp	328;"	d
CATCH_INTERNAL_UNSUPPRESS_ETD_WARNINGS	src/3rd_party/catch.hpp	126;"	d
CATCH_INTERNAL_UNSUPPRESS_ETD_WARNINGS	src/3rd_party/catch.hpp	333;"	d
CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS	src/3rd_party/catch.hpp	132;"	d
CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS	src/3rd_party/catch.hpp	329;"	d
CATCH_METHOD_AS_TEST_CASE	src/3rd_party/catch.hpp	11382;"	d
CATCH_METHOD_AS_TEST_CASE	src/3rd_party/spdlog/tests/catch.hpp	9308;"	d
CATCH_NOEXCEPT	src/3rd_party/catch.hpp	/^        virtual const char* what() const CATCH_NOEXCEPT;$/;"	m	class:Catch::NotImplementedException
CATCH_NOEXCEPT	src/3rd_party/catch.hpp	338;"	d
CATCH_NOEXCEPT	src/3rd_party/catch.hpp	341;"	d
CATCH_NOEXCEPT	src/3rd_party/spdlog/tests/catch.hpp	/^        virtual const char* what() const CATCH_NOEXCEPT;$/;"	m	class:Catch::NotImplementedException
CATCH_NOEXCEPT	src/3rd_party/spdlog/tests/catch.hpp	178;"	d
CATCH_NOEXCEPT	src/3rd_party/spdlog/tests/catch.hpp	181;"	d
CATCH_NOEXCEPT_IS	src/3rd_party/catch.hpp	339;"	d
CATCH_NOEXCEPT_IS	src/3rd_party/catch.hpp	342;"	d
CATCH_NOEXCEPT_IS	src/3rd_party/spdlog/tests/catch.hpp	179;"	d
CATCH_NOEXCEPT_IS	src/3rd_party/spdlog/tests/catch.hpp	182;"	d
CATCH_NOT_IMPLEMENTED	src/3rd_party/catch.hpp	518;"	d
CATCH_NOT_IMPLEMENTED	src/3rd_party/spdlog/tests/catch.hpp	313;"	d
CATCH_NULL	src/3rd_party/catch.hpp	347;"	d
CATCH_NULL	src/3rd_party/catch.hpp	349;"	d
CATCH_OVERRIDE	src/3rd_party/catch.hpp	/^        virtual void reconstructExpression( std::string& dest ) const CATCH_OVERRIDE;$/;"	m	class:Catch::ResultBuilder
CATCH_OVERRIDE	src/3rd_party/catch.hpp	354;"	d
CATCH_OVERRIDE	src/3rd_party/catch.hpp	356;"	d
CATCH_PLATFORM_MAC	src/3rd_party/catch.hpp	2072;"	d
CATCH_PLATFORM_MAC	src/3rd_party/spdlog/tests/catch.hpp	1516;"	d
CATCH_REGISTER_LEGACY_REPORTER	src/3rd_party/catch.hpp	11401;"	d
CATCH_REGISTER_LEGACY_REPORTER	src/3rd_party/spdlog/tests/catch.hpp	9323;"	d
CATCH_REGISTER_LISTENER	src/3rd_party/catch.hpp	9796;"	d
CATCH_REGISTER_REPORTER	src/3rd_party/catch.hpp	11400;"	d
CATCH_REGISTER_REPORTER	src/3rd_party/spdlog/tests/catch.hpp	9322;"	d
CATCH_REGISTER_TAG_ALIAS	src/3rd_party/catch.hpp	3116;"	d
CATCH_REGISTER_TAG_ALIAS	src/3rd_party/spdlog/tests/catch.hpp	2443;"	d
CATCH_REGISTER_TEST_CASE	src/3rd_party/catch.hpp	11383;"	d
CATCH_REQUIRE	src/3rd_party/catch.hpp	11342;"	d
CATCH_REQUIRE	src/3rd_party/spdlog/tests/catch.hpp	9279;"	d
CATCH_REQUIRE_FALSE	src/3rd_party/catch.hpp	11343;"	d
CATCH_REQUIRE_FALSE	src/3rd_party/spdlog/tests/catch.hpp	9280;"	d
CATCH_REQUIRE_NOTHROW	src/3rd_party/catch.hpp	11352;"	d
CATCH_REQUIRE_NOTHROW	src/3rd_party/spdlog/tests/catch.hpp	9284;"	d
CATCH_REQUIRE_THAT	src/3rd_party/catch.hpp	11368;"	d
CATCH_REQUIRE_THAT	src/3rd_party/spdlog/tests/catch.hpp	9297;"	d
CATCH_REQUIRE_THROWS	src/3rd_party/catch.hpp	11349;"	d
CATCH_REQUIRE_THROWS	src/3rd_party/spdlog/tests/catch.hpp	9282;"	d
CATCH_REQUIRE_THROWS_AS	src/3rd_party/catch.hpp	11350;"	d
CATCH_REQUIRE_THROWS_AS	src/3rd_party/spdlog/tests/catch.hpp	9283;"	d
CATCH_REQUIRE_THROWS_WITH	src/3rd_party/catch.hpp	11351;"	d
CATCH_SCENARIO	src/3rd_party/catch.hpp	11407;"	d
CATCH_SCENARIO	src/3rd_party/spdlog/tests/catch.hpp	9329;"	d
CATCH_SCENARIO_METHOD	src/3rd_party/catch.hpp	11408;"	d
CATCH_SCENARIO_METHOD	src/3rd_party/spdlog/tests/catch.hpp	9330;"	d
CATCH_SCOPED_CAPTURE	src/3rd_party/catch.hpp	11377;"	d
CATCH_SCOPED_CAPTURE	src/3rd_party/spdlog/tests/catch.hpp	9303;"	d
CATCH_SCOPED_INFO	src/3rd_party/catch.hpp	11375;"	d
CATCH_SCOPED_INFO	src/3rd_party/spdlog/tests/catch.hpp	9301;"	d
CATCH_SECTION	src/3rd_party/catch.hpp	11384;"	d
CATCH_SECTION	src/3rd_party/spdlog/tests/catch.hpp	9309;"	d
CATCH_SUCCEED	src/3rd_party/catch.hpp	11387;"	d
CATCH_SUCCEED	src/3rd_party/spdlog/tests/catch.hpp	9311;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	src/3rd_party/catch.hpp	4069;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	src/3rd_party/catch.hpp	5101;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	src/3rd_party/spdlog/tests/catch.hpp	3272;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	src/3rd_party/spdlog/tests/catch.hpp	4132;"	d
CATCH_TEST_CASE	src/3rd_party/catch.hpp	11380;"	d
CATCH_TEST_CASE	src/3rd_party/spdlog/tests/catch.hpp	9306;"	d
CATCH_TEST_CASE_METHOD	src/3rd_party/catch.hpp	11381;"	d
CATCH_TEST_CASE_METHOD	src/3rd_party/spdlog/tests/catch.hpp	9307;"	d
CATCH_THEN	src/3rd_party/catch.hpp	11416;"	d
CATCH_THEN	src/3rd_party/spdlog/tests/catch.hpp	9338;"	d
CATCH_TRANSLATE_EXCEPTION	src/3rd_party/catch.hpp	11489;"	d
CATCH_TRANSLATE_EXCEPTION	src/3rd_party/spdlog/tests/catch.hpp	9394;"	d
CATCH_TRAP	src/3rd_party/catch.hpp	2100;"	d
CATCH_UNSAFE_UNRETAINED	src/3rd_party/catch.hpp	1509;"	d
CATCH_UNSAFE_UNRETAINED	src/3rd_party/catch.hpp	1525;"	d
CATCH_UNSAFE_UNRETAINED	src/3rd_party/spdlog/tests/catch.hpp	1036;"	d
CATCH_UNSAFE_UNRETAINED	src/3rd_party/spdlog/tests/catch.hpp	1052;"	d
CATCH_WARN	src/3rd_party/catch.hpp	11374;"	d
CATCH_WARN	src/3rd_party/spdlog/tests/catch.hpp	9300;"	d
CATCH_WHEN	src/3rd_party/catch.hpp	11414;"	d
CATCH_WHEN	src/3rd_party/spdlog/tests/catch.hpp	9336;"	d
CHAR	src/3rd_party/spdlog/details/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
CHAR	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
CHAR_FLAG	src/3rd_party/spdlog/details/format.h	/^    CHAR_FLAG = 0x10  \/\/ Argument has char type - used in error reporting.$/;"	e	enum:fmt::__anon32
CHAR_FLAG	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    CHAR_FLAG = 0x10  \/\/ Argument has char type - used in error reporting.$/;"	e	enum:fmt::__anon69
CHAR_IN_ALIAS	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const CHAR_IN_ALIAS =$/;"	m	namespace:YAML::ErrorMsg
CHAR_IN_ANCHOR	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const CHAR_IN_ANCHOR =$/;"	m	namespace:YAML::ErrorMsg
CHAR_IN_BLOCK	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const CHAR_IN_BLOCK = "unexpected character in block scalar";$/;"	m	namespace:YAML::ErrorMsg
CHAR_IN_SCALAR	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const CHAR_IN_SCALAR = "illegal character in scalar";$/;"	m	namespace:YAML::ErrorMsg
CHAR_IN_TAG_HANDLE	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const CHAR_IN_TAG_HANDLE =$/;"	m	namespace:YAML::ErrorMsg
CHECK_THAT	src/3rd_party/spdlog/tests/catch.hpp	9296;"	d
CHOMP	src/3rd_party/yaml-cpp/scanscalar.h	/^enum CHOMP { STRIP = -1, CLIP, KEEP };$/;"	g	namespace:YAML
CHUNK	src/tensors/tensor_allocator.h	/^  const size_t CHUNK = 512;$/;"	m	class:marian::TensorAllocator
CLARA_AUTO_PTR	src/3rd_party/catch.hpp	4381;"	d
CLARA_CONFIG_CONSOLE_WIDTH	src/3rd_party/catch.hpp	4070;"	d
CLARA_CONFIG_CONSOLE_WIDTH	src/3rd_party/catch.hpp	4072;"	d
CLARA_CONFIG_CONSOLE_WIDTH	src/3rd_party/catch.hpp	5100;"	d
CLARA_CONFIG_CONSOLE_WIDTH	src/3rd_party/spdlog/tests/catch.hpp	3273;"	d
CLARA_CONFIG_CONSOLE_WIDTH	src/3rd_party/spdlog/tests/catch.hpp	3275;"	d
CLARA_CONFIG_CONSOLE_WIDTH	src/3rd_party/spdlog/tests/catch.hpp	4131;"	d
CLARA_CONFIG_CPP11_GENERATED_METHODS	src/3rd_party/catch.hpp	4347;"	d
CLARA_CONFIG_CPP11_NOEXCEPT	src/3rd_party/catch.hpp	4344;"	d
CLARA_CONFIG_CPP11_NULLPTR	src/3rd_party/catch.hpp	4341;"	d
CLARA_CONFIG_CPP11_OVERRIDE	src/3rd_party/catch.hpp	4350;"	d
CLARA_CONFIG_CPP11_UNIQUE_PTR	src/3rd_party/catch.hpp	4353;"	d
CLARA_CONFIG_MAIN	src/3rd_party/catch.hpp	11333;"	d
CLARA_CONFIG_MAIN	src/3rd_party/catch.hpp	55;"	d
CLARA_CONFIG_MAIN	src/3rd_party/spdlog/tests/catch.hpp	48;"	d
CLARA_CONFIG_MAIN	src/3rd_party/spdlog/tests/catch.hpp	9271;"	d
CLARA_CONFIG_MAIN_NOT_DEFINED	src/3rd_party/catch.hpp	54;"	d
CLARA_CONFIG_MAIN_NOT_DEFINED	src/3rd_party/spdlog/tests/catch.hpp	47;"	d
CLARA_CPP11_OR_GREATER	src/3rd_party/catch.hpp	4316;"	d
CLARA_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	src/3rd_party/catch.hpp	4305;"	d
CLARA_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	src/3rd_party/catch.hpp	4327;"	d
CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT	src/3rd_party/catch.hpp	4276;"	d
CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT	src/3rd_party/catch.hpp	4304;"	d
CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT	src/3rd_party/catch.hpp	4323;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	src/3rd_party/catch.hpp	4272;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	src/3rd_party/catch.hpp	4286;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	src/3rd_party/catch.hpp	4299;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	src/3rd_party/catch.hpp	4319;"	d
CLARA_INTERNAL_CONFIG_CPP11_OVERRIDE	src/3rd_party/catch.hpp	4331;"	d
CLARA_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	src/3rd_party/catch.hpp	4300;"	d
CLARA_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	src/3rd_party/catch.hpp	4334;"	d
CLARA_NOEXCEPT	src/3rd_party/catch.hpp	4358;"	d
CLARA_NOEXCEPT_IS	src/3rd_party/catch.hpp	4359;"	d
CLARA_NULL	src/3rd_party/catch.hpp	4367;"	d
CLARA_OVERRIDE	src/3rd_party/catch.hpp	4374;"	d
CLARA_PLATFORM_WINDOWS	src/3rd_party/catch.hpp	4396;"	d
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE	src/3rd_party/catch.hpp	5312;"	d
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE	src/3rd_party/catch.hpp	5471;"	d
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE	src/3rd_party/spdlog/tests/catch.hpp	4310;"	d
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE	src/3rd_party/spdlog/tests/catch.hpp	4458;"	d
CLIP	src/3rd_party/yaml-cpp/scanscalar.h	/^enum CHOMP { STRIP = -1, CLIP, KEEP };$/;"	e	enum:YAML::CHOMP
COLLECTIONSTACK_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/collectionstack.h	2;"	d
COMPILE_TIME_CRC32_STR	src/common/compile_time_crc32.h	82;"	d
CPY_ID	src/data/types.h	/^const Word CPY_ID = 3;$/;"	m	namespace:marian
CPY_STR	src/data/types.h	/^const std::string CPY_STR = "<c>";$/;"	m	namespace:marian
CP_REPLACEMENT_CHARACTER	src/3rd_party/yaml-cpp/stream.cpp	12;"	d	file:
CSR	src/kernels/sparse.h	/^  CSR(Tensor dense) : device_(dense->getDevice()) {$/;"	f	class:marian::sparse::CSR
CSR	src/kernels/sparse.h	/^  CSR(int rows, int cols, size_t device)$/;"	f	class:marian::sparse::CSR
CSR	src/kernels/sparse.h	/^  CSR(int rows,$/;"	f	class:marian::sparse::CSR
CSR	src/kernels/sparse.h	/^class CSR {$/;"	c	namespace:marian::sparse
CSTRING	src/3rd_party/spdlog/details/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
CSTRING	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
CStringRef	src/3rd_party/spdlog/details/format.h	/^typedef BasicCStringRef<char> CStringRef;$/;"	t	namespace:fmt
CStringRef	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef BasicCStringRef<char> CStringRef;$/;"	t	namespace:fmt
CUDA_CHECK	src/kernels/cuda_helpers.h	7;"	d
CUDNNWrapper	src/kernels/cudnn_wrappers.h	/^class CUDNNWrapper {$/;"	c	namespace:marian
CURAND_CALL	src/graph/backend_gpu.h	10;"	d
CUSPARSE_CHECK	src/kernels/cuda_helpers.h	20;"	d
CUSTOM	src/3rd_party/spdlog/details/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
CUSTOM	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
CYAN	src/3rd_party/spdlog/details/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
CYAN	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	e	enum:Color
CYAN	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    const WORD CYAN = FOREGROUND_GREEN | FOREGROUND_BLUE;$/;"	m	class:spdlog::sinks::wincolor_sink
C_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class C_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
CamelCase	src/3rd_party/yaml-cpp/emittermanip.h	/^  CamelCase,      \/\/ No, Off$/;"	e	enum:YAML::EMITTER_MANIP
CanEmitNewline	src/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::CanEmitNewline() const { return true; }$/;"	f	class:YAML::Emitter
CanInsertPotentialSimpleKey	src/3rd_party/yaml-cpp/simplekey.cpp	/^bool Scanner::CanInsertPotentialSimpleKey() const {$/;"	f	class:YAML::Scanner
Capture	src/functional/operands.h	/^      Capture(float val) : value(val) {};$/;"	f	struct:marian::functional::Capture
Capture	src/functional/operands.h	/^    struct Capture {$/;"	s	namespace:marian::functional
CaseInsensitiveEqual	src/3rd_party/simple-websocket-server/utility.hpp	/^  class CaseInsensitiveEqual {$/;"	c	namespace:SimpleWeb
CaseInsensitiveHash	src/3rd_party/simple-websocket-server/utility.hpp	/^  class CaseInsensitiveHash {$/;"	c	namespace:SimpleWeb
CaseInsensitiveMultimap	src/3rd_party/simple-websocket-server/utility.hpp	/^  typedef std::unordered_multimap<std::string, std::string, CaseInsensitiveHash, CaseInsensitiveEqual> CaseInsensitiveMultimap;$/;"	t	namespace:SimpleWeb
CaseSensitive	src/3rd_party/catch.hpp	/^    struct CaseSensitive { enum Choice {$/;"	s	namespace:Catch
Catch	src/3rd_party/catch.hpp	/^namespace Catch {$/;"	n
Catch	src/3rd_party/spdlog/tests/catch.hpp	/^namespace Catch {$/;"	n
Cell	src/rnn/types.h	/^  Cell(Ptr<Options> options) : Stackable(options) {}$/;"	f	class:marian::rnn::Cell
Cell	src/rnn/types.h	/^class Cell : public Stackable {$/;"	c	namespace:marian::rnn
CellFactory	src/rnn/constructors.h	/^  CellFactory(Ptr<ExpressionGraph> graph) : StackableFactory(graph) {}$/;"	f	class:marian::rnn::CellFactory
CellFactory	src/rnn/constructors.h	/^class CellFactory : public StackableFactory {$/;"	c	namespace:marian::rnn
CellInput	src/rnn/types.h	/^  CellInput(Ptr<Options> options) : Stackable(options) {}$/;"	f	class:marian::rnn::CellInput
CellInput	src/rnn/types.h	/^class CellInput : public Stackable {$/;"	c	namespace:marian::rnn
Chainable	src/graph/chainable.h	/^  Chainable() {}$/;"	f	struct:marian::Chainable
Chainable	src/graph/chainable.h	/^struct Chainable {$/;"	s	namespace:marian
Char	src/3rd_party/spdlog/details/format.h	/^    typedef CharType Char;$/;"	t	class:fmt::BasicFormatter
Char	src/3rd_party/spdlog/details/format.h	/^    typedef char Char;  \/\/ For FMT_VARIADIC_CTOR.$/;"	t	class:SystemError
Char	src/3rd_party/spdlog/details/format.h	/^    typedef typename Formatter::Char Char;$/;"	t	class:fmt::internal::MakeValue
Char	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef CharType Char;$/;"	t	class:fmt::BasicFormatter
Char	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef char Char;  \/\/ For FMT_VARIADIC_CTOR.$/;"	t	class:SystemError
Char	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef typename Formatter::Char Char;$/;"	t	class:fmt::internal::MakeValue
CharAt	src/3rd_party/yaml-cpp/stream.h	/^inline char Stream::CharAt(size_t i) const { return m_readahead[i]; }$/;"	f	class:YAML::Stream
CharConvPooling	src/layers/convolution.h	/^    CharConvPooling($/;"	f	class:marian::CharConvPooling
CharConvPooling	src/layers/convolution.h	/^class CharConvPooling {$/;"	c	namespace:marian
CharConverter	src/3rd_party/spdlog/details/format.cc	/^			explicit CharConverter(fmt::internal::Arg &arg): arg_(arg)$/;"	f	class:fmt::__anon34::CharConverter
CharConverter	src/3rd_party/spdlog/details/format.cc	/^		class CharConverter: public fmt::internal::ArgVisitor<CharConverter, void>$/;"	c	namespace:fmt::__anon34	file:
CharConverter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  explicit CharConverter(internal::Arg &arg) : arg_(arg) {}$/;"	f	class:fmt::__anon71::CharConverter
CharConverter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^class CharConverter : public ArgVisitor<CharConverter, void> {$/;"	c	namespace:fmt::__anon71	file:
CharPtr	src/3rd_party/spdlog/details/format.h	/^    typedef stdext::checked_array_iterator<Char*> CharPtr;$/;"	t	class:fmt::internal::BasicCharTraits
CharPtr	src/3rd_party/spdlog/details/format.h	/^    typedef typename internal::CharTraits<Char>::CharPtr CharPtr;$/;"	t	class:BasicWriter
CharPtr	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef stdext::checked_array_iterator<Char*> CharPtr;$/;"	t	class:fmt::internal::BasicCharTraits
CharPtr	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef typename internal::CharTraits<Char>::CharPtr CharPtr;$/;"	t	class:BasicWriter
CharS2SEncoder	src/models/charS2S.h	/^  CharS2SEncoder(Ptr<Options> options) : EncoderS2S(options) {}$/;"	f	class:marian::CharS2SEncoder
CharS2SEncoder	src/models/charS2S.h	/^class CharS2SEncoder : public EncoderS2S {$/;"	c	namespace:marian
CharTraits	src/3rd_party/spdlog/details/format.h	/^class CharTraits<char>: public BasicCharTraits<char>$/;"	c	namespace:fmt::internal
CharTraits	src/3rd_party/spdlog/details/format.h	/^class CharTraits<wchar_t>: public BasicCharTraits<wchar_t>$/;"	c	namespace:fmt::internal
CharTraits	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class CharTraits<char> : public BasicCharTraits<char>$/;"	c	namespace:fmt::internal
CharTraits	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class CharTraits<wchar_t> : public BasicCharTraits<wchar_t>$/;"	c	namespace:fmt::internal
CharacterSet	src/3rd_party/yaml-cpp/stream.h	/^  enum CharacterSet { utf8, utf16le, utf16be, utf32le, utf32be };$/;"	g	class:YAML::Stream
CheckOverflow	src/3rd_party/exception.h	/^inline std::size_t CheckOverflow(uint64_t value) {$/;"	f	namespace:util
CheckOverflowInternal	src/3rd_party/exception.h	/^template <> inline std::size_t CheckOverflowInternal<8>(uint64_t value) {$/;"	f	namespace:util
CheckOverflowInternal	src/3rd_party/exception.h	/^template <unsigned len> inline std::size_t CheckOverflowInternal(uint64_t value) {$/;"	f	namespace:util
CheckType	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  static T *CheckType(U *p) {$/;"	f	class:YAML::GraphBuilder
Choice	src/3rd_party/catch.hpp	/^    struct CaseSensitive { enum Choice {$/;"	g	struct:Catch::CaseSensitive
Chomp	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Chomp() {$/;"	f	namespace:YAML::Exp
ChompIndicator	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& ChompIndicator() {$/;"	f	namespace:YAML::Exp
ClearModifiedSettings	src/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::ClearModifiedSettings() { m_modifiedSettings.clear(); }$/;"	f	class:YAML::EmitterState
Clipper	src/optimizers/clippers.h	/^ClipperBasePtr Clipper(Args&&... args) {$/;"	f	namespace:marian
ClipperBase	src/optimizers/clippers.h	/^class ClipperBase {$/;"	c	namespace:marian
ClipperBasePtr	src/common/definitions.h	/^typedef Ptr<ClipperBase> ClipperBasePtr;$/;"	t	namespace:marian
ClipperPtr	src/optimizers/clippers.h	/^typedef std::shared_ptr<ClipperBase> ClipperPtr;$/;"	t	namespace:marian
Clone	src/3rd_party/yaml-cpp/node.cpp	/^Node Clone(const Node& node) {$/;"	f	namespace:YAML
CollectionStack	src/3rd_party/yaml-cpp/collectionstack.h	/^class CollectionStack {$/;"	c	namespace:YAML
CollectionType	src/3rd_party/yaml-cpp/collectionstack.h	/^struct CollectionType {$/;"	s	namespace:YAML
Color	src/3rd_party/spdlog/details/format.h	/^enum Color$/;"	g
Color	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	g
ColsNodeOp	src/graph/node_operators_unary.h	/^  ColsNodeOp(Expr a, const std::vector<size_t>& indeces, Args... args)$/;"	f	struct:marian::ColsNodeOp
ColsNodeOp	src/graph/node_operators_unary.h	/^struct ColsNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
Comment	src/3rd_party/yaml-cpp/emittermanip.h	/^inline _Comment Comment(const std::string content) { return _Comment(content); }$/;"	f	namespace:YAML
Comment	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx Comment() {$/;"	f	namespace:YAML::Exp
CompactMap	src/3rd_party/yaml-cpp/collectionstack.h	/^  enum value { NoCollection, BlockMap, BlockSeq, FlowMap, FlowSeq, CompactMap };$/;"	e	enum:YAML::CollectionType::value
ComputeFullBoolName	src/3rd_party/yaml-cpp/emitter.cpp	/^const char* Emitter::ComputeFullBoolName(bool b) const {$/;"	f	class:YAML::Emitter
ComputeStringFormat	src/3rd_party/yaml-cpp/emitterutils.cpp	/^StringFormat::value ComputeStringFormat(const std::string& str,$/;"	f	namespace:YAML::Utils
ConcatenateNodeOp	src/graph/node_operators_binary.h	/^  ConcatenateNodeOp(const std::vector<Expr>& nodes, Args... args)$/;"	f	struct:marian::ConcatenateNodeOp
ConcatenateNodeOp	src/graph/node_operators_binary.h	/^struct ConcatenateNodeOp : public NaryNodeOp {$/;"	s	namespace:marian
Conditional	src/3rd_party/spdlog/details/format.h	/^struct Conditional$/;"	s	namespace:fmt::internal
Conditional	src/3rd_party/spdlog/details/format.h	/^struct Conditional<false, T, F>$/;"	s	namespace:fmt::internal
Conditional	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct Conditional$/;"	s	namespace:fmt::internal
Conditional	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct Conditional<false, T, F>$/;"	s	namespace:fmt::internal
Config	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    class Config {$/;"	c	class:SimpleWeb::SocketServerBase
Config	src/common/config.h	/^  Config(const Config& other) : config_(YAML::Clone(other.config_)) {}$/;"	f	class:marian::Config
Config	src/common/config.h	/^  Config(const std::string options,$/;"	f	class:marian::Config
Config	src/common/config.h	/^  Config(int argc,$/;"	f	class:marian::Config
Config	src/common/config.h	/^class Config {$/;"	c	namespace:marian
ConfigMode	src/common/config_parser.h	/^enum struct ConfigMode {$/;"	s	namespace:marian
ConfigParser	src/common/config_parser.h	/^  ConfigParser(int argc, char** argv, ConfigMode mode, bool validate = false)$/;"	f	class:marian::ConfigParser
ConfigParser	src/common/config_parser.h	/^class ConfigParser {$/;"	c	namespace:marian
Connection	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    class Connection : public std::enable_shared_from_this<Connection> {$/;"	c	class:SimpleWeb::SocketServerBase
ConstantNode	src/graph/node_operators.h	/^  ConstantNode(Args... args)$/;"	f	struct:marian::ConstantNode
ConstantNode	src/graph/node_operators.h	/^struct ConstantNode : public Node {$/;"	s	namespace:marian
ConstantShape	src/gpu/shape.h	/^  ConstantShape(const Shape& shape) {$/;"	f	struct:marian::gpu::ConstantShape
ConstantShape	src/gpu/shape.h	/^  __HD__ ConstantShape() {$/;"	f	struct:marian::gpu::ConstantShape
ConstantShape	src/gpu/shape.h	/^  __HD__ ConstantShape(const ConstantShape& shape)$/;"	f	struct:marian::gpu::ConstantShape
ConstantShape	src/gpu/shape.h	/^struct ConstantShape {$/;"	s	namespace:marian::gpu
ContainerFrame	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^    ContainerFrame(void* pMap, void* pPrevKeyNode)$/;"	f	struct:YAML::GraphBuilderAdapter::ContainerFrame
ContainerFrame	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^    ContainerFrame(void* pSequence)$/;"	f	struct:YAML::GraphBuilderAdapter::ContainerFrame
ContainerFrame	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  struct ContainerFrame {$/;"	s	class:YAML::GraphBuilderAdapter
ContainerStack	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  typedef std::stack<ContainerFrame> ContainerStack;$/;"	t	class:YAML::GraphBuilderAdapter
ContinueOnFailure	src/3rd_party/catch.hpp	/^        ContinueOnFailure = 0x02,   \/\/ Failures fail test, but execution continues$/;"	e	enum:Catch::ResultDisposition::Flags
ContinueOnFailure	src/3rd_party/spdlog/tests/catch.hpp	/^        ContinueOnFailure = 0x01,   \/\/ Failures fail test, but execution continues$/;"	e	enum:Catch::ResultDisposition::Flags
ConvertToInt	src/3rd_party/spdlog/details/format.h	/^struct ConvertToInt$/;"	s	namespace:fmt::internal
ConvertToInt	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct ConvertToInt$/;"	s	namespace:fmt::internal
ConvertToIntImpl	src/3rd_party/spdlog/details/format.h	/^struct ConvertToIntImpl$/;"	s	namespace:fmt::internal
ConvertToIntImpl	src/3rd_party/spdlog/details/format.h	/^struct ConvertToIntImpl<T, true>$/;"	s	namespace:fmt::internal
ConvertToIntImpl	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct ConvertToIntImpl$/;"	s	namespace:fmt::internal
ConvertToIntImpl	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.h	/^struct ConvertToIntImpl<T, true>$/;"	s	namespace:fmt::internal
ConvertToIntImpl2	src/3rd_party/spdlog/details/format.h	/^struct ConvertToIntImpl2$/;"	s	namespace:fmt::internal
ConvertToIntImpl2	src/3rd_party/spdlog/details/format.h	/^struct ConvertToIntImpl2<T, true>$/;"	s	namespace:fmt::internal
ConvertToIntImpl2	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct ConvertToIntImpl2$/;"	s	namespace:fmt::internal
ConvertToIntImpl2	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct ConvertToIntImpl2<T, true>$/;"	s	namespace:fmt::internal
Convolution	src/layers/convolution.h	/^class Convolution : public Factory {$/;"	c	namespace:marian
ConvolutionInTime	src/models/experimental/pooling.h	/^Expr ConvolutionInTime(Ptr<ExpressionGraph> graph, Expr x,$/;"	f	namespace:marian
ConvolutionOp	src/graph/node_operators_binary.h	/^  ConvolutionOp($/;"	f	class:marian::ConvolutionOp
ConvolutionOp	src/graph/node_operators_binary.h	/^class ConvolutionOp : public NaryNodeOp {$/;"	c	namespace:marian
ConvolutionWrapper	src/kernels/cudnn_wrappers.h	/^class ConvolutionWrapper : public CUDNNWrapper {$/;"	c	namespace:marian
CopyableStream	src/3rd_party/catch.hpp	/^        CopyableStream( CopyableStream const& other ) {$/;"	f	struct:Catch::CopyableStream
CopyableStream	src/3rd_party/catch.hpp	/^        CopyableStream() {}$/;"	f	struct:Catch::CopyableStream
CopyableStream	src/3rd_party/catch.hpp	/^    struct CopyableStream {$/;"	s	namespace:Catch
CopyableStream	src/3rd_party/spdlog/tests/catch.hpp	/^        CopyableStream( CopyableStream const& other ) {$/;"	f	struct:Catch::CopyableStream
CopyableStream	src/3rd_party/spdlog/tests/catch.hpp	/^        CopyableStream() {}$/;"	f	struct:Catch::CopyableStream
CopyableStream	src/3rd_party/spdlog/tests/catch.hpp	/^    struct CopyableStream {$/;"	s	namespace:Catch
Corpus	src/data/corpus.cpp	/^Corpus::Corpus(Ptr<Config> options, bool translate)$/;"	f	class:marian::data::Corpus
Corpus	src/data/corpus.cpp	/^Corpus::Corpus(std::vector<std::string> paths,$/;"	f	class:marian::data::Corpus
Corpus	src/data/corpus.h	/^class Corpus : public DatasetBase<SentenceTuple, CorpusIterator, CorpusBatch> {$/;"	c	namespace:marian::data
CorpusBatch	src/data/corpus.h	/^  CorpusBatch(const std::vector<Ptr<SubBatch>>& batches) : batches_(batches) {}$/;"	f	class:marian::data::CorpusBatch
CorpusBatch	src/data/corpus.h	/^class CorpusBatch : public Batch {$/;"	c	namespace:marian::data
CorpusIterator	src/data/corpus.cpp	/^CorpusIterator::CorpusIterator() : pos_(-1), tup_(0) {}$/;"	f	class:marian::data::CorpusIterator
CorpusIterator	src/data/corpus.cpp	/^CorpusIterator::CorpusIterator(Corpus& corpus)$/;"	f	class:marian::data::CorpusIterator
CorpusIterator	src/data/corpus.h	/^class CorpusIterator$/;"	c	namespace:marian::data
Cost	src/layers/generic.cpp	/^Expr Cost(Expr logits,$/;"	f	namespace:marian
CrossEntropyNodeOp	src/graph/node_operators_binary.h	/^  CrossEntropyNodeOp(Expr a, Expr b, Args... args)$/;"	f	struct:marian::CrossEntropyNodeOp
CrossEntropyNodeOp	src/graph/node_operators_binary.h	/^struct CrossEntropyNodeOp : public NaryNodeOp {$/;"	s	namespace:marian
CrossEntropyValidator	src/training/validator.h	/^  CrossEntropyValidator(std::vector<Ptr<Vocab>> vocabs, Ptr<Config> options)$/;"	f	class:marian::CrossEntropyValidator
CrossEntropyValidator	src/training/validator.h	/^class CrossEntropyValidator : public Validator<data::Corpus> {$/;"	c	namespace:marian
CrusherLoop	src/3rd_party/spdlog/bench/latency/g3log-crush.cpp	/^void CrusherLoop()$/;"	f
Crypto	src/3rd_party/simple-websocket-server/crypto.hpp	/^  class Crypto {$/;"	c	namespace:SimpleWeb
CurGroupChildCount	src/3rd_party/yaml-cpp/emitterstate.cpp	/^std::size_t EmitterState::CurGroupChildCount() const {$/;"	f	class:YAML::EmitterState
CurGroupFlowType	src/3rd_party/yaml-cpp/emitterstate.cpp	/^FlowType::value EmitterState::CurGroupFlowType() const {$/;"	f	class:YAML::EmitterState
CurGroupIndent	src/3rd_party/yaml-cpp/emitterstate.cpp	/^std::size_t EmitterState::CurGroupIndent() const {$/;"	f	class:YAML::EmitterState
CurGroupLongKey	src/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::CurGroupLongKey() const {$/;"	f	class:YAML::EmitterState
CurGroupNodeType	src/3rd_party/yaml-cpp/emitterstate.cpp	/^EmitterNodeType::value EmitterState::CurGroupNodeType() const {$/;"	f	class:YAML::EmitterState
CurGroupType	src/3rd_party/yaml-cpp/emitterstate.cpp	/^GroupType::value EmitterState::CurGroupType() const {$/;"	f	class:YAML::EmitterState
CurIndent	src/3rd_party/yaml-cpp/emitterstate.h	/^  std::size_t CurIndent() const { return m_curIndent; }$/;"	f	class:YAML::EmitterState
CustomValue	src/3rd_party/spdlog/details/format.h	/^    struct CustomValue$/;"	s	struct:fmt::internal::Value
CustomValue	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    struct CustomValue$/;"	s	struct:fmt::internal::Value
DEL_ID	src/data/types.h	/^const Word DEL_ID = 4;$/;"	m	namespace:marian
DEL_STR	src/data/types.h	/^const std::string DEL_STR = "<d>";$/;"	m	namespace:marian
DESC	scripts/contrib/inject_model_params.py	/^DESC = "Adds special node including Marian options to Nematus model.npz file."$/;"	v
DIGITS	src/3rd_party/spdlog/details/format.cc	/^const char fmt::internal::BasicData<T>::DIGITS[] =$/;"	m	class:fmt::internal::BasicData	file:
DIGITS	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^const char fmt::internal::BasicData<T>::DIGITS[] =$/;"	m	class:fmt::internal::BasicData	file:
DIRECTIVE	src/3rd_party/yaml-cpp/token.h	/^    DIRECTIVE,$/;"	e	enum:YAML::Token::TYPE
DIRECTIVES_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/directives.h	2;"	d
DLL_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/dll.h	2;"	d
DOC_END	src/3rd_party/yaml-cpp/token.h	/^    DOC_END,$/;"	e	enum:YAML::Token::TYPE
DOC_IN_SCALAR	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const DOC_IN_SCALAR = "illegal document indicator in scalar";$/;"	m	namespace:YAML::ErrorMsg
DOC_START	src/3rd_party/yaml-cpp/token.h	/^    DOC_START,$/;"	e	enum:YAML::Token::TYPE
DONT_FOLD	src/3rd_party/yaml-cpp/scanscalar.h	/^enum FOLD { DONT_FOLD, FOLD_BLOCK, FOLD_FLOW };$/;"	e	enum:YAML::FOLD
DOUBLE	src/3rd_party/spdlog/details/format.h	/^        DOUBLE, LONG_DOUBLE, LAST_NUMERIC_TYPE = LONG_DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
DOUBLE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        DOUBLE, LONG_DOUBLE, LAST_NUMERIC_TYPE = LONG_DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
D_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class D_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
Data	src/data/dataset.h	/^typedef std::vector<float> Data;$/;"	t	namespace:marian::data
DataBatch	src/data/dataset.h	/^class DataBatch : public Batch {$/;"	c	namespace:marian::data
Dataset	src/data/dataset.h	/^  Dataset(std::vector<std::string> paths) : DatasetBase(paths) {}$/;"	f	class:marian::data::Dataset
Dataset	src/data/dataset.h	/^class Dataset : public DatasetBase<Example, ExampleIterator, DataBatch> {$/;"	c	namespace:marian::data
DatasetBase	src/data/dataset.h	/^  DatasetBase() {}$/;"	f	class:marian::data::DatasetBase
DatasetBase	src/data/dataset.h	/^  DatasetBase(std::vector<std::string> paths) : paths_(paths) {}$/;"	f	class:marian::data::DatasetBase
DatasetBase	src/data/dataset.h	/^class DatasetBase {$/;"	c	namespace:marian::data
Dec	src/3rd_party/yaml-cpp/emittermanip.h	/^  Dec,$/;"	e	enum:YAML::EMITTER_MANIP
DecodeBase64	src/3rd_party/yaml-cpp/binary.cpp	/^std::vector<unsigned char> DecodeBase64(const std::string &input) {$/;"	f	namespace:YAML
DecoderBase	src/models/encdec.h	/^  DecoderBase(Ptr<Options> options)$/;"	f	class:marian::DecoderBase
DecoderBase	src/models/encdec.h	/^class DecoderBase {$/;"	c	namespace:marian
DecoderFactory	src/models/model_factory.h	/^  DecoderFactory(Ptr<ExpressionGraph> graph = nullptr) : Factory(graph) {}$/;"	f	class:marian::models::DecoderFactory
DecoderFactory	src/models/model_factory.h	/^class DecoderFactory : public Factory {$/;"	c	namespace:marian::models
DecoderHardAtt	src/models/hardatt.h	/^  DecoderHardAtt(Ptr<Options> options) : DecoderBase(options) {$/;"	f	class:marian::DecoderHardAtt
DecoderHardAtt	src/models/hardatt.h	/^class DecoderHardAtt : public DecoderBase {$/;"	c	namespace:marian
DecoderS2S	src/models/s2s.h	/^  DecoderS2S(Ptr<Options> options) : DecoderBase(options) {}$/;"	f	class:marian::DecoderS2S
DecoderS2S	src/models/s2s.h	/^class DecoderS2S : public DecoderBase {$/;"	c	namespace:marian
DecoderState	src/models/states.h	/^  DecoderState(const rnn::States& states,$/;"	f	class:marian::DecoderState
DecoderState	src/models/states.h	/^class DecoderState {$/;"	c	namespace:marian
DecoderStateHardAtt	src/models/hardatt.h	/^  DecoderStateHardAtt(const rnn::States& states,$/;"	f	class:marian::DecoderStateHardAtt
DecoderStateHardAtt	src/models/hardatt.h	/^class DecoderStateHardAtt : public DecoderState {$/;"	c	namespace:marian
DecoderTransformer	src/models/transformer.h	/^  DecoderTransformer(Ptr<Options> options) : DecoderBase(options) {}$/;"	f	class:marian::DecoderTransformer
DecoderTransformer	src/models/transformer.h	/^class DecoderTransformer : public DecoderBase, public Transformer {$/;"	c	namespace:marian
DecomposedExpression	src/3rd_party/catch.hpp	/^    struct DecomposedExpression$/;"	s	namespace:Catch
Default	src/3rd_party/yaml-cpp/emitterstyle.h	/^  enum value { Default, Block, Flow };$/;"	e	enum:YAML::EmitterStyle::value
DefaultPrinting	src/translator/output_collector.h	/^class DefaultPrinting : public PrintingStrategy {$/;"	c	namespace:marian
Dense	src/layers/generic.h	/^  Dense(Ptr<ExpressionGraph> graph, Ptr<Options> options)$/;"	f	class:marian::mlp::Dense
Dense	src/layers/generic.h	/^class Dense : public Layer {$/;"	c	namespace:marian::mlp
DenseFactory	src/layers/constructors.h	/^  DenseFactory(Ptr<ExpressionGraph> graph) : LayerFactory(graph) {}$/;"	f	class:marian::mlp::DenseFactory
DenseFactory	src/layers/constructors.h	/^class DenseFactory : public LayerFactory {$/;"	c	namespace:marian::mlp
Destruct	src/data/npz_converter.cpp	/^void NpzConverter::Destruct() {$/;"	f	class:NpzConverter
Destruct	src/data/npz_converter.h	/^  void Destruct() {$/;"	f	class:NpzConverter
Detail	src/3rd_party/catch.hpp	/^namespace Detail {$/;"	n	namespace:Catch
Detail	src/3rd_party/spdlog/tests/catch.hpp	/^namespace Detail {$/;"	n	namespace:Catch
DeviceCPU	src/tensors/tensor_cpu.h	/^      public : DeviceCPU()$/;"	f	class:marian::DeviceCPU
DeviceCPU	src/tensors/tensor_cpu.h	/^class DeviceCPU {$/;"	c	namespace:marian
DeviceCPU	src/tests/allocator_test.cpp	/^  DeviceCPU(size_t device, size_t alignment = 256)$/;"	f	class:DeviceCPU
DeviceCPU	src/tests/allocator_test.cpp	/^class DeviceCPU {$/;"	c	file:
DeviceGPU	src/tensors/device_gpu.h	/^  DeviceGPU(size_t device, size_t alignment = 256)$/;"	f	class:marian::DeviceGPU
DeviceGPU	src/tensors/device_gpu.h	/^class DeviceGPU {$/;"	c	namespace:marian
DidntThrowException	src/3rd_party/catch.hpp	/^        DidntThrowException = Exception | 2,$/;"	e	enum:Catch::ResultWas::OfType
DidntThrowException	src/3rd_party/spdlog/tests/catch.hpp	/^        DidntThrowException = Exception | 2,$/;"	e	enum:Catch::ResultWas::OfType
Digit	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Digit() {$/;"	f	namespace:YAML::Exp
Directive	src/3rd_party/yaml-cpp/exp.h	/^const char Directive = '%';$/;"	m	namespace:YAML::Keys
Directives	src/3rd_party/yaml-cpp/directives.cpp	/^Directives::Directives() {$/;"	f	class:YAML::Directives
Directives	src/3rd_party/yaml-cpp/directives.h	/^struct Directives {$/;"	s	namespace:YAML
DirectoryOfThisScript	contrib/vim/.ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f
Disable	src/3rd_party/spdlog/tests/catch.hpp	/^        typedef void Disable;$/;"	t	struct:Catch::FalseType
DispositionNode	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::DispositionNode(void *pNode) {$/;"	f	class:YAML::GraphBuilderAdapter
DivNodeOp	src/graph/node_operators_binary.h	/^  DivNodeOp(Args... args) : ElementBinaryNodeOp(args...) {}$/;"	f	struct:marian::DivNodeOp
DivNodeOp	src/graph/node_operators_binary.h	/^struct DivNodeOp : public ElementBinaryNodeOp {$/;"	s	namespace:marian
DocEnd	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& DocEnd() {$/;"	f	namespace:YAML::Exp
DocIndicator	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& DocIndicator() {$/;"	f	namespace:YAML::Exp
DocStart	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& DocStart() {$/;"	f	namespace:YAML::Exp
DotBatchedNodeOp	src/graph/node_operators_binary.h	/^  DotBatchedNodeOp(Expr a,$/;"	f	class:marian::DotBatchedNodeOp
DotBatchedNodeOp	src/graph/node_operators_binary.h	/^class DotBatchedNodeOp : public NaryNodeOp {$/;"	c	namespace:marian
DotNodeOp	src/graph/node_operators_binary.h	/^  DotNodeOp(Expr a,$/;"	f	class:marian::DotNodeOp
DotNodeOp	src/graph/node_operators_binary.h	/^class DotNodeOp : public NaryNodeOp {$/;"	c	namespace:marian
DoublePrecision	src/3rd_party/yaml-cpp/emittermanip.h	/^inline _Precision DoublePrecision(int n) { return _Precision(-1, n); }$/;"	f	namespace:YAML
DoubleQuoted	src/3rd_party/yaml-cpp/emittermanip.h	/^  DoubleQuoted,$/;"	e	enum:YAML::EMITTER_MANIP
DoubleQuoted	src/3rd_party/yaml-cpp/emitterutils.h	/^  enum value { Plain, SingleQuoted, DoubleQuoted, Literal };$/;"	e	enum:YAML::StringFormat::value
DummyInt	src/3rd_party/spdlog/details/format.h	/^struct DummyInt$/;"	s	namespace:fmt::internal
DummyInt	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct DummyInt$/;"	s	namespace:fmt::internal
DummyStream	src/3rd_party/spdlog/details/format.h	/^struct DummyStream: std::ostream$/;"	s	namespace:fmt::internal
DummyStream	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.h	/^struct DummyStream : std::ostream$/;"	s	namespace:fmt::internal
Dump	src/3rd_party/yaml-cpp/emit.cpp	/^std::string Dump(const Node& node) {$/;"	f	namespace:YAML
EMITFROMEVENTS_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/emitfromevents.h	2;"	d
EMITTERDEF_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/emitterdef.h	2;"	d
EMITTERMANIP_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/emittermanip.h	2;"	d
EMITTERSTATE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/emitterstate.h	2;"	d
EMITTERSTYLE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/emitterstyle.h	2;"	d
EMITTERUTILS_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/emitterutils.h	2;"	d
EMITTER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/emitter.h	2;"	d
EMITTER_MANIP	src/3rd_party/yaml-cpp/emittermanip.h	/^enum EMITTER_MANIP {$/;"	g	namespace:YAML
END_OF_MAP	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const END_OF_MAP = "end of map not found";$/;"	m	namespace:YAML::ErrorMsg
END_OF_MAP_FLOW	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const END_OF_MAP_FLOW = "end of map flow not found";$/;"	m	namespace:YAML::ErrorMsg
END_OF_SEQ	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const END_OF_SEQ = "end of sequence not found";$/;"	m	namespace:YAML::ErrorMsg
END_OF_SEQ_FLOW	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const END_OF_SEQ_FLOW = "end of sequence flow not found";$/;"	m	namespace:YAML::ErrorMsg
END_OF_VERBATIM_TAG	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const END_OF_VERBATIM_TAG = "end of verbatim tag not found";$/;"	m	namespace:YAML::ErrorMsg
EOF_IN_SCALAR	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const EOF_IN_SCALAR = "illegal EOF in scalar";$/;"	m	namespace:YAML::ErrorMsg
EOS	scripts/embeddings/prepare_corpus.py	/^EOS = '<\/s>'$/;"	v
EOS	scripts/embeddings/process_word2vec.py	/^EOS = '<\/s>'$/;"	v
EOS_ID	src/data/types.h	/^const Word EOS_ID = 0;$/;"	m	namespace:marian
EOS_STR	src/data/types.h	/^const std::string EOS_STR = "<\/s>";$/;"	m	namespace:marian
EVENTHANDLER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/eventhandler.h	2;"	d
EXCEPTIONS_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/exceptions.h	2;"	d
EXP_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/exp.h	2;"	d
Edge	src/tools/align2steps.cpp	/^typedef std::pair<int, int> Edge;$/;"	t	file:
Element	src/kernels/tensor_operators.h	/^void Element(Functor functor, Tensor out, Tensors ...tensors) {$/;"	f	namespace:marian
ElementBinaryNodeOp	src/graph/node_operators_binary.h	/^  ElementBinaryNodeOp(Expr a, Expr b, Args... args)$/;"	f	struct:marian::ElementBinaryNodeOp
ElementBinaryNodeOp	src/graph/node_operators_binary.h	/^struct ElementBinaryNodeOp : public NaryNodeOp {$/;"	s	namespace:marian
Elementwise	src/optimizers/clippers.h	/^  Elementwise(float c = 10.0) : c_(c) {}$/;"	f	class:marian::Elementwise
Elementwise	src/optimizers/clippers.h	/^class Elementwise : public ClipperBase {$/;"	c	namespace:marian
EmbeddingFactory	src/layers/generic.h	/^  EmbeddingFactory(Ptr<ExpressionGraph> graph) : Factory(graph) {}$/;"	f	struct:marian::EmbeddingFactory
EmbeddingFactory	src/layers/generic.h	/^struct EmbeddingFactory : public Factory {$/;"	s	namespace:marian
Emit	src/3rd_party/yaml-cpp/nodeevents.cpp	/^void NodeEvents::Emit(EventHandler& handler) {$/;"	f	class:YAML::NodeEvents
Emit	src/3rd_party/yaml-cpp/nodeevents.cpp	/^void NodeEvents::Emit(const detail::node& node, EventHandler& handler,$/;"	f	class:YAML::NodeEvents
EmitBeginDoc	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::EmitBeginDoc() {$/;"	f	class:YAML::Emitter
EmitBeginMap	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::EmitBeginMap() {$/;"	f	class:YAML::Emitter
EmitBeginSeq	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::EmitBeginSeq() {$/;"	f	class:YAML::Emitter
EmitEndDoc	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::EmitEndDoc() {$/;"	f	class:YAML::Emitter
EmitEndMap	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::EmitEndMap() {$/;"	f	class:YAML::Emitter
EmitEndSeq	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::EmitEndSeq() {$/;"	f	class:YAML::Emitter
EmitFromEvents	src/3rd_party/yaml-cpp/emitfromevents.cpp	/^EmitFromEvents::EmitFromEvents(Emitter& emitter) : m_emitter(emitter) {}$/;"	f	class:YAML::EmitFromEvents
EmitFromEvents	src/3rd_party/yaml-cpp/emitfromevents.h	/^class EmitFromEvents : public EventHandler {$/;"	c	namespace:YAML
EmitKindTag	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::EmitKindTag() { Write(LocalTag("")); }$/;"	f	class:YAML::Emitter
EmitNewline	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::EmitNewline() {$/;"	f	class:YAML::Emitter
EmitNonAscii	src/3rd_party/yaml-cpp/emittermanip.h	/^  EmitNonAscii,$/;"	e	enum:YAML::EMITTER_MANIP
EmitProps	src/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::EmitProps(const std::string& tag, anchor_t anchor) {$/;"	f	class:YAML::EmitFromEvents
EmitSeq	src/3rd_party/yaml-cpp/stlemitter.h	/^inline Emitter& EmitSeq(Emitter& emitter, const Seq& seq) {$/;"	f	namespace:YAML
Emitter	src/3rd_party/yaml-cpp/emitter.cpp	/^Emitter::Emitter() : m_pState(new EmitterState) {}$/;"	f	class:YAML::Emitter
Emitter	src/3rd_party/yaml-cpp/emitter.cpp	/^Emitter::Emitter(std::ostream& stream)$/;"	f	class:YAML::Emitter
Emitter	src/3rd_party/yaml-cpp/emitter.h	/^class YAML_CPP_API Emitter : private noncopyable {$/;"	c	namespace:YAML
EmitterException	src/3rd_party/yaml-cpp/exceptions.h	/^  EmitterException(const std::string& msg_)$/;"	f	class:YAML::EmitterException
EmitterException	src/3rd_party/yaml-cpp/exceptions.h	/^class YAML_CPP_API EmitterException : public Exception {$/;"	c	namespace:YAML
EmitterNodeType	src/3rd_party/yaml-cpp/emitterdef.h	/^struct EmitterNodeType {$/;"	s	namespace:YAML
EmitterState	src/3rd_party/yaml-cpp/emitterstate.cpp	/^EmitterState::EmitterState()$/;"	f	class:YAML::EmitterState
EmitterState	src/3rd_party/yaml-cpp/emitterstate.h	/^class EmitterState {$/;"	c	namespace:YAML
EmitterStyle	src/3rd_party/yaml-cpp/emitterstyle.h	/^struct EmitterStyle {$/;"	s	namespace:YAML
Empty	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Empty() {$/;"	f	namespace:YAML::Exp
EmptySpec	src/3rd_party/spdlog/details/format.h	/^struct EmptySpec$/;"	s	namespace:fmt
EmptySpec	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct EmptySpec {};$/;"	s	namespace:fmt
Enable	src/3rd_party/spdlog/tests/catch.hpp	/^        typedef void Enable;$/;"	t	struct:Catch::TrueType
EnableIf	src/3rd_party/spdlog/details/format.h	/^struct EnableIf$/;"	s	namespace:fmt::internal
EnableIf	src/3rd_party/spdlog/details/format.h	/^struct EnableIf<true, T>$/;"	s	namespace:fmt::internal
EnableIf	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct EnableIf {};$/;"	s	namespace:fmt::internal
EnableIf	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct EnableIf<true, T>$/;"	s	namespace:fmt::internal
EncodeBase64	src/3rd_party/yaml-cpp/binary.cpp	/^std::string EncodeBase64(const unsigned char *data, std::size_t size) {$/;"	f	namespace:YAML
EncoderBase	src/models/encdec.h	/^  EncoderBase(Ptr<Options> options)$/;"	f	class:marian::EncoderBase
EncoderBase	src/models/encdec.h	/^class EncoderBase {$/;"	c	namespace:marian
EncoderDecoder	src/models/encdec.h	/^  EncoderDecoder(Ptr<Options> options)$/;"	f	class:marian::EncoderDecoder
EncoderDecoder	src/models/encdec.h	/^class EncoderDecoder : public EncoderDecoderBase {$/;"	c	namespace:marian
EncoderDecoderBase	src/models/encdec.h	/^class EncoderDecoderBase : public models::ModelBase {$/;"	c	namespace:marian
EncoderDecoderFactory	src/models/model_factory.h	/^  EncoderDecoderFactory(Ptr<ExpressionGraph> graph = nullptr)$/;"	f	class:marian::models::EncoderDecoderFactory
EncoderDecoderFactory	src/models/model_factory.h	/^class EncoderDecoderFactory : public Factory {$/;"	c	namespace:marian::models
EncoderDecoderRec	src/models/experimental/s2s_rec.h	/^  EncoderDecoderRec(Ptr<Config> options, Args... args)$/;"	f	class:marian::EncoderDecoderRec
EncoderDecoderRec	src/models/experimental/s2s_rec.h	/^class EncoderDecoderRec : public EncoderDecoder<EncoderS2S, DecoderS2S> {$/;"	c	namespace:marian
EncoderDecoderSymmetric	src/models/experimental/s2s_symmetric.h	/^  EncoderDecoderSymmetric(Ptr<Config> options, Args... args)$/;"	f	class:marian::EncoderDecoderSymmetric
EncoderDecoderSymmetric	src/models/experimental/s2s_symmetric.h	/^class EncoderDecoderSymmetric : public EncDec {$/;"	c	namespace:marian
EncoderFactory	src/models/model_factory.h	/^  EncoderFactory(Ptr<ExpressionGraph> graph = nullptr) : Factory(graph) {}$/;"	f	class:marian::models::EncoderFactory
EncoderFactory	src/models/model_factory.h	/^class EncoderFactory : public Factory {$/;"	c	namespace:marian::models
EncoderPooling	src/models/experimental/pooling.h	/^  EncoderPooling(Ptr<Config> options, Args... args)$/;"	f	class:marian::EncoderPooling
EncoderPooling	src/models/experimental/pooling.h	/^class EncoderPooling : public EncoderBase {$/;"	c	namespace:marian
EncoderS2S	src/models/s2s.h	/^  EncoderS2S(Ptr<Options> options) : EncoderBase(options) {}$/;"	f	class:marian::EncoderS2S
EncoderS2S	src/models/s2s.h	/^class EncoderS2S : public EncoderBase {$/;"	c	namespace:marian
EncoderState	src/models/states.h	/^  EncoderState() {}$/;"	f	class:marian::EncoderState
EncoderState	src/models/states.h	/^  EncoderState(Expr context, Expr mask, Ptr<data::CorpusBatch> batch)$/;"	f	class:marian::EncoderState
EncoderState	src/models/states.h	/^class EncoderState {$/;"	c	namespace:marian
EncoderStatePooling	src/models/experimental/pooling.h	/^  EncoderStatePooling(Expr context, Expr attended, Expr mask, Ptr<data::CorpusBatch> batch)$/;"	f	class:marian::EncoderStatePooling
EncoderStatePooling	src/models/experimental/pooling.h	/^class EncoderStatePooling : public EncoderState {$/;"	c	namespace:marian
EncoderTransformer	src/models/transformer.h	/^  EncoderTransformer(Ptr<Options> options) : EncoderBase(options) {}$/;"	f	class:marian::EncoderTransformer
EncoderTransformer	src/models/transformer.h	/^class EncoderTransformer : public EncoderBase, public Transformer {$/;"	c	namespace:marian
EndDoc	src/3rd_party/yaml-cpp/emittermanip.h	/^  EndDoc,$/;"	e	enum:YAML::EMITTER_MANIP
EndMap	src/3rd_party/yaml-cpp/emittermanip.h	/^  EndMap,$/;"	e	enum:YAML::EMITTER_MANIP
EndScalar	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& EndScalar() {$/;"	f	namespace:YAML::Exp
EndScalarInFlow	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& EndScalarInFlow() {$/;"	f	namespace:YAML::Exp
EndSeq	src/3rd_party/yaml-cpp/emittermanip.h	/^  EndSeq,$/;"	e	enum:YAML::EMITTER_MANIP
EndStream	src/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::EndStream() {$/;"	f	class:YAML::Scanner
EndedDoc	src/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::EndedDoc() {$/;"	f	class:YAML::EmitterState
EndedGroup	src/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::EndedGroup(GroupType::value type) {$/;"	f	class:YAML::EmitterState
Endpoint	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    class Endpoint {$/;"	c	class:SimpleWeb::SocketServerBase
EnsureNodeExists	src/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::EnsureNodeExists() const {$/;"	f	class:YAML::Node
EnsureTokensInQueue	src/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::EnsureTokensInQueue() {$/;"	f	class:YAML::Scanner
EnumStringMaker	src/3rd_party/catch.hpp	/^    struct EnumStringMaker$/;"	s	namespace:Catch::Detail
EnumStringMaker	src/3rd_party/catch.hpp	/^    struct EnumStringMaker<T,true>$/;"	s	namespace:Catch::Detail
ErrnoException	src/3rd_party/exception.cpp	/^ErrnoException::ErrnoException() throw() : errno_(errno) {$/;"	f	class:util::ErrnoException
ErrnoException	src/3rd_party/exception.h	/^class ErrnoException : public Exception {$/;"	c	namespace:util
Error	src/3rd_party/exception.h	/^    int Error() const throw() { return errno_; }$/;"	f	class:util::ErrnoException
ErrorCode	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^class ErrorCode$/;"	c	namespace:fmt
ErrorMsg	src/3rd_party/yaml-cpp/exceptions.h	/^namespace ErrorMsg {$/;"	n	namespace:YAML
EscBreak	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& EscBreak() {$/;"	f	namespace:YAML::Exp
EscSingleQuote	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& EscSingleQuote() {$/;"	f	namespace:YAML::Exp
Escape	src/3rd_party/yaml-cpp/exp.cpp	/^std::string Escape(Stream& in) {$/;"	f	namespace:YAML::Exp
Escape	src/3rd_party/yaml-cpp/exp.cpp	/^std::string Escape(Stream& in, int codeLength) {$/;"	f	namespace:YAML::Exp
EscapeNonAscii	src/3rd_party/yaml-cpp/emittermanip.h	/^  EscapeNonAscii,$/;"	e	enum:YAML::EMITTER_MANIP
Evaluator	src/3rd_party/catch.hpp	/^    class Evaluator{};$/;"	c	namespace:Catch::Internal
Evaluator	src/3rd_party/catch.hpp	/^    struct Evaluator<T1, T2, IsEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	src/3rd_party/catch.hpp	/^    struct Evaluator<T1, T2, IsGreaterThan> {$/;"	s	namespace:Catch::Internal
Evaluator	src/3rd_party/catch.hpp	/^    struct Evaluator<T1, T2, IsGreaterThanOrEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	src/3rd_party/catch.hpp	/^    struct Evaluator<T1, T2, IsLessThan> {$/;"	s	namespace:Catch::Internal
Evaluator	src/3rd_party/catch.hpp	/^    struct Evaluator<T1, T2, IsLessThanOrEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	src/3rd_party/catch.hpp	/^    struct Evaluator<T1, T2, IsNotEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	src/3rd_party/spdlog/tests/catch.hpp	/^    class Evaluator{};$/;"	c	namespace:Catch::Internal
Evaluator	src/3rd_party/spdlog/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	src/3rd_party/spdlog/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsGreaterThan> {$/;"	s	namespace:Catch::Internal
Evaluator	src/3rd_party/spdlog/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsGreaterThanOrEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	src/3rd_party/spdlog/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsLessThan> {$/;"	s	namespace:Catch::Internal
Evaluator	src/3rd_party/spdlog/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsLessThanOrEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	src/3rd_party/spdlog/tests/catch.hpp	/^    struct Evaluator<T1, T2, IsNotEqualTo> {$/;"	s	namespace:Catch::Internal
EventHandler	src/3rd_party/yaml-cpp/eventhandler.h	/^class EventHandler {$/;"	c	namespace:YAML
Example	src/data/dataset.h	/^typedef std::vector<Data> Example;$/;"	t	namespace:marian::data
ExampleIterator	src/data/dataset.h	/^typedef Examples::const_iterator ExampleIterator;$/;"	t	namespace:marian::data
Examples	src/data/dataset.h	/^typedef std::vector<Example> Examples;$/;"	t	namespace:marian::data
Exception	src/3rd_party/catch.hpp	/^        Exception = 0x100 | FailureBit,$/;"	e	enum:Catch::ResultWas::OfType
Exception	src/3rd_party/exception.cpp	/^Exception::Exception() throw() {}$/;"	f	class:util::Exception
Exception	src/3rd_party/exception.cpp	/^Exception::Exception(const Exception& o) throw() : what_(o.what_) {}$/;"	f	class:util::Exception
Exception	src/3rd_party/exception.h	/^class Exception : public std::exception {$/;"	c	namespace:util
Exception	src/3rd_party/spdlog/tests/catch.hpp	/^        Exception = 0x100 | FailureBit,$/;"	e	enum:Catch::ResultWas::OfType
Exception	src/3rd_party/yaml-cpp/exceptions.h	/^  Exception(const Mark& mark_, const std::string& msg_)$/;"	f	class:YAML::Exception
Exception	src/3rd_party/yaml-cpp/exceptions.h	/^class YAML_CPP_API Exception : public std::runtime_error {$/;"	c	namespace:YAML
ExceptionTag	src/3rd_party/exception.h	/^    template <class T> struct ExceptionTag {$/;"	s	class:util::Exception
Exec	src/common/utils.cpp	/^std::string Exec(const std::string& cmd) {$/;"	f
ExistsActiveSimpleKey	src/3rd_party/yaml-cpp/simplekey.cpp	/^bool Scanner::ExistsActiveSimpleKey() const {$/;"	f	class:YAML::Scanner
Exp	src/3rd_party/yaml-cpp/exp.cpp	/^namespace Exp {$/;"	n	namespace:YAML	file:
Exp	src/3rd_party/yaml-cpp/exp.h	/^namespace Exp {$/;"	n	namespace:YAML
ExpNodeOp	src/graph/node_operators_unary.h	/^  ExpNodeOp(Args... args) : UnaryNodeOp(args...) {}$/;"	f	struct:marian::ExpNodeOp
ExpNodeOp	src/graph/node_operators_unary.h	/^struct ExpNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
ExplicitFailure	src/3rd_party/catch.hpp	/^        ExplicitFailure = FailureBit | 2,$/;"	e	enum:Catch::ResultWas::OfType
ExplicitFailure	src/3rd_party/spdlog/tests/catch.hpp	/^        ExplicitFailure = FailureBit | 2,$/;"	e	enum:Catch::ResultWas::OfType
Expr	src/common/definitions.h	/^typedef Ptr<Chainable<Tensor>> Expr;$/;"	t	namespace:marian
Expr	src/graph/chainable.h	/^typedef Ptr<Chainable<Tensor>> Expr;$/;"	t	namespace:marian
ExprComponents	src/3rd_party/spdlog/tests/catch.hpp	/^            ExprComponents() : testFalse( false ) {}$/;"	f	struct:Catch::ResultBuilder::ExprComponents
ExprComponents	src/3rd_party/spdlog/tests/catch.hpp	/^        struct ExprComponents {$/;"	s	class:Catch::ResultBuilder
Expression	src/graph/expression_graph.h	/^Expr Expression(Args&&... args) {$/;"	f	namespace:marian
ExpressionFailed	src/3rd_party/catch.hpp	/^        ExpressionFailed = FailureBit | 1,$/;"	e	enum:Catch::ResultWas::OfType
ExpressionFailed	src/3rd_party/spdlog/tests/catch.hpp	/^        ExpressionFailed = FailureBit | 1,$/;"	e	enum:Catch::ResultWas::OfType
ExpressionGraph	src/graph/expression_graph.h	/^class ExpressionGraph : public std::enable_shared_from_this<ExpressionGraph> {$/;"	c	namespace:marian
F	src/functional/floats.h	/^    struct F {$/;"	s	namespace:marian::functional
FApply	src/gpu/tmp.h	/^struct FApply {};$/;"	s	namespace:marian::gpu
FApply	src/gpu/tmp.h	/^struct FApply<1, Functor> {$/;"	s	namespace:marian::gpu
FApply	src/gpu/tmp.h	/^struct FApply<2, Functor> {$/;"	s	namespace:marian::gpu
FApply	src/gpu/tmp.h	/^struct FApply<3, Functor> {$/;"	s	namespace:marian::gpu
FApply	src/gpu/tmp.h	/^struct FApply<4, Functor> {$/;"	s	namespace:marian::gpu
FLOW_END	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const FLOW_END = "illegal flow end";$/;"	m	namespace:YAML::ErrorMsg
FLOW_ENTRY	src/3rd_party/yaml-cpp/token.h	/^    FLOW_ENTRY,$/;"	e	enum:YAML::Token::TYPE
FLOW_MAP	src/3rd_party/yaml-cpp/scanner.h	/^  enum FLOW_MARKER { FLOW_MAP, FLOW_SEQ };$/;"	e	enum:YAML::Scanner::FLOW_MARKER
FLOW_MAP_COMPACT	src/3rd_party/yaml-cpp/token.h	/^    FLOW_MAP_COMPACT,$/;"	e	enum:YAML::Token::TYPE
FLOW_MAP_END	src/3rd_party/yaml-cpp/token.h	/^    FLOW_MAP_END,$/;"	e	enum:YAML::Token::TYPE
FLOW_MAP_START	src/3rd_party/yaml-cpp/token.h	/^    FLOW_MAP_START,$/;"	e	enum:YAML::Token::TYPE
FLOW_MARKER	src/3rd_party/yaml-cpp/scanner.h	/^  enum FLOW_MARKER { FLOW_MAP, FLOW_SEQ };$/;"	g	class:YAML::Scanner
FLOW_SEQ	src/3rd_party/yaml-cpp/scanner.h	/^  enum FLOW_MARKER { FLOW_MAP, FLOW_SEQ };$/;"	e	enum:YAML::Scanner::FLOW_MARKER
FLOW_SEQ_END	src/3rd_party/yaml-cpp/token.h	/^    FLOW_SEQ_END,$/;"	e	enum:YAML::Token::TYPE
FLOW_SEQ_START	src/3rd_party/yaml-cpp/token.h	/^    FLOW_SEQ_START,$/;"	e	enum:YAML::Token::TYPE
FMT_API	src/3rd_party/spdlog/details/format.h	79;"	d
FMT_API	src/3rd_party/spdlog/details/format.h	81;"	d
FMT_API	src/3rd_party/spdlog/details/format.h	85;"	d
FMT_API	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	69;"	d
FMT_API	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	71;"	d
FMT_API	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	75;"	d
FMT_ARGS	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	88;"	d	file:
FMT_ARG_TYPE_DEFAULT	src/3rd_party/spdlog/details/format.h	2455;"	d
FMT_ARG_TYPE_DEFAULT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2538;"	d
FMT_ASSERT	src/3rd_party/spdlog/details/format.h	230;"	d
FMT_ASSERT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	240;"	d
FMT_ASSIGN_char	src/3rd_party/spdlog/details/format.h	2507;"	d
FMT_ASSIGN_char	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2553;"	d
FMT_ASSIGN_wchar_t	src/3rd_party/spdlog/details/format.h	2509;"	d
FMT_ASSIGN_wchar_t	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2555;"	d
FMT_BUILTIN_CLZ	src/3rd_party/spdlog/details/format.h	235;"	d
FMT_BUILTIN_CLZ	src/3rd_party/spdlog/details/format.h	266;"	d
FMT_BUILTIN_CLZ	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	244;"	d
FMT_BUILTIN_CLZ	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	275;"	d
FMT_BUILTIN_CLZLL	src/3rd_party/spdlog/details/format.h	239;"	d
FMT_BUILTIN_CLZLL	src/3rd_party/spdlog/details/format.h	293;"	d
FMT_BUILTIN_CLZLL	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	248;"	d
FMT_BUILTIN_CLZLL	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	302;"	d
FMT_CATCH	src/3rd_party/spdlog/details/format.cc	57;"	d	file:
FMT_CATCH	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	57;"	d	file:
FMT_CONCAT_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	68;"	d
FMT_DEFINE_INT_FORMATTERS	src/3rd_party/spdlog/details/format.h	1981;"	d
FMT_DEFINE_INT_FORMATTERS	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2029;"	d
FMT_DELETED_OR_UNDEFINED	src/3rd_party/spdlog/details/format.h	208;"	d
FMT_DELETED_OR_UNDEFINED	src/3rd_party/spdlog/details/format.h	213;"	d
FMT_DELETED_OR_UNDEFINED	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	216;"	d
FMT_DELETED_OR_UNDEFINED	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	221;"	d
FMT_DISABLE_CONVERSION_TO_INT	src/3rd_party/spdlog/details/format.h	1287;"	d
FMT_DISABLE_CONVERSION_TO_INT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	1291;"	d
FMT_DISALLOW_COPY_AND_ASSIGN	src/3rd_party/spdlog/details/format.h	209;"	d
FMT_DISALLOW_COPY_AND_ASSIGN	src/3rd_party/spdlog/details/format.h	214;"	d
FMT_DISALLOW_COPY_AND_ASSIGN	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	217;"	d
FMT_DISALLOW_COPY_AND_ASSIGN	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	222;"	d
FMT_DISPATCH	src/3rd_party/spdlog/details/format.h	1544;"	d
FMT_DISPATCH	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	1646;"	d
FMT_EXCEPTIONS	src/3rd_party/spdlog/details/format.h	164;"	d
FMT_EXCEPTIONS	src/3rd_party/spdlog/details/format.h	167;"	d
FMT_EXCEPTIONS	src/3rd_party/spdlog/details/format.h	170;"	d
FMT_EXCEPTIONS	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	161;"	d
FMT_EXCEPTIONS	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	164;"	d
FMT_EXCEPTIONS	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	167;"	d
FMT_FORMAT_H_	src/3rd_party/spdlog/details/format.h	29;"	d
FMT_FORMAT_H_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	29;"	d
FMT_FOR_EACH1	src/3rd_party/spdlog/details/format.h	2582;"	d
FMT_FOR_EACH1	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2628;"	d
FMT_FOR_EACH10	src/3rd_party/spdlog/details/format.h	2599;"	d
FMT_FOR_EACH10	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2645;"	d
FMT_FOR_EACH2	src/3rd_party/spdlog/details/format.h	2583;"	d
FMT_FOR_EACH2	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2629;"	d
FMT_FOR_EACH3	src/3rd_party/spdlog/details/format.h	2585;"	d
FMT_FOR_EACH3	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2631;"	d
FMT_FOR_EACH4	src/3rd_party/spdlog/details/format.h	2587;"	d
FMT_FOR_EACH4	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2633;"	d
FMT_FOR_EACH5	src/3rd_party/spdlog/details/format.h	2589;"	d
FMT_FOR_EACH5	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2635;"	d
FMT_FOR_EACH6	src/3rd_party/spdlog/details/format.h	2591;"	d
FMT_FOR_EACH6	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2637;"	d
FMT_FOR_EACH7	src/3rd_party/spdlog/details/format.h	2593;"	d
FMT_FOR_EACH7	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2639;"	d
FMT_FOR_EACH8	src/3rd_party/spdlog/details/format.h	2595;"	d
FMT_FOR_EACH8	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2641;"	d
FMT_FOR_EACH9	src/3rd_party/spdlog/details/format.h	2597;"	d
FMT_FOR_EACH9	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2643;"	d
FMT_FUNC	src/3rd_party/spdlog/details/format.cc	64;"	d	file:
FMT_GCC_EXTENSION	src/3rd_party/spdlog/details/format.h	107;"	d
FMT_GCC_EXTENSION	src/3rd_party/spdlog/details/format.h	90;"	d
FMT_GCC_EXTENSION	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	80;"	d
FMT_GCC_EXTENSION	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	97;"	d
FMT_GCC_VERSION	src/3rd_party/spdlog/details/format.h	89;"	d
FMT_GCC_VERSION	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	79;"	d
FMT_GEN	src/3rd_party/spdlog/details/format.h	2373;"	d
FMT_GEN	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2454;"	d
FMT_GEN1	src/3rd_party/spdlog/details/format.h	2374;"	d
FMT_GEN1	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2455;"	d
FMT_GEN10	src/3rd_party/spdlog/details/format.h	2383;"	d
FMT_GEN10	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2464;"	d
FMT_GEN11	src/3rd_party/spdlog/details/format.h	2384;"	d
FMT_GEN11	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2465;"	d
FMT_GEN12	src/3rd_party/spdlog/details/format.h	2385;"	d
FMT_GEN12	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2466;"	d
FMT_GEN13	src/3rd_party/spdlog/details/format.h	2386;"	d
FMT_GEN13	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2467;"	d
FMT_GEN14	src/3rd_party/spdlog/details/format.h	2387;"	d
FMT_GEN14	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2468;"	d
FMT_GEN15	src/3rd_party/spdlog/details/format.h	/^inline uint64_t make_type(FMT_GEN15(FMT_ARG_TYPE_DEFAULT))$/;"	f	namespace:fmt
FMT_GEN15	src/3rd_party/spdlog/details/format.h	2388;"	d
FMT_GEN15	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline uint64_t make_type(FMT_GEN15(FMT_ARG_TYPE_DEFAULT))$/;"	f	namespace:fmt
FMT_GEN15	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2469;"	d
FMT_GEN2	src/3rd_party/spdlog/details/format.h	2375;"	d
FMT_GEN2	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2456;"	d
FMT_GEN3	src/3rd_party/spdlog/details/format.h	2376;"	d
FMT_GEN3	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2457;"	d
FMT_GEN4	src/3rd_party/spdlog/details/format.h	2377;"	d
FMT_GEN4	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2458;"	d
FMT_GEN5	src/3rd_party/spdlog/details/format.h	2378;"	d
FMT_GEN5	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2459;"	d
FMT_GEN6	src/3rd_party/spdlog/details/format.h	2379;"	d
FMT_GEN6	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2460;"	d
FMT_GEN7	src/3rd_party/spdlog/details/format.h	2380;"	d
FMT_GEN7	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2461;"	d
FMT_GEN8	src/3rd_party/spdlog/details/format.h	2381;"	d
FMT_GEN8	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2462;"	d
FMT_GEN9	src/3rd_party/spdlog/details/format.h	2382;"	d
FMT_GEN9	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2463;"	d
FMT_GNUC_LIBSTD_VERSION	src/3rd_party/spdlog/details/format.h	116;"	d
FMT_GNUC_LIBSTD_VERSION	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	113;"	d
FMT_HAS_BUILTIN	src/3rd_party/spdlog/details/format.h	126;"	d
FMT_HAS_BUILTIN	src/3rd_party/spdlog/details/format.h	128;"	d
FMT_HAS_BUILTIN	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	123;"	d
FMT_HAS_BUILTIN	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	125;"	d
FMT_HAS_CPP_ATTRIBUTE	src/3rd_party/spdlog/details/format.h	132;"	d
FMT_HAS_CPP_ATTRIBUTE	src/3rd_party/spdlog/details/format.h	134;"	d
FMT_HAS_CPP_ATTRIBUTE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	129;"	d
FMT_HAS_CPP_ATTRIBUTE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	131;"	d
FMT_HAS_FEATURE	src/3rd_party/spdlog/details/format.h	120;"	d
FMT_HAS_FEATURE	src/3rd_party/spdlog/details/format.h	122;"	d
FMT_HAS_FEATURE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	117;"	d
FMT_HAS_FEATURE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	119;"	d
FMT_HAS_GXX_CXX11	src/3rd_party/spdlog/details/format.h	104;"	d
FMT_HAS_GXX_CXX11	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	94;"	d
FMT_HEADER_ONLY	src/3rd_party/spdlog/details/format.h	33;"	d
FMT_HEADER_ONLY	src/3rd_party/spdlog/include/spdlog/fmt/fmt.h	16;"	d
FMT_ICC_VERSION	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	101;"	d
FMT_ICC_VERSION	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	103;"	d
FMT_LOCALE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	364;"	d
FMT_MAKE_ARG	src/3rd_party/spdlog/details/format.h	2506;"	d
FMT_MAKE_ARG	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2552;"	d
FMT_MAKE_ARG_TYPE	src/3rd_party/spdlog/details/format.h	2505;"	d
FMT_MAKE_ARG_TYPE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2551;"	d
FMT_MAKE_STR_VALUE	src/3rd_party/spdlog/details/format.h	1453;"	d
FMT_MAKE_STR_VALUE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	1469;"	d
FMT_MAKE_TEMPLATE_ARG	src/3rd_party/spdlog/details/format.h	2504;"	d
FMT_MAKE_TEMPLATE_ARG	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2550;"	d
FMT_MAKE_VALUE	src/3rd_party/spdlog/details/format.h	1397;"	d
FMT_MAKE_VALUE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	1413;"	d
FMT_MAKE_VALUE_	src/3rd_party/spdlog/details/format.h	1393;"	d
FMT_MAKE_VALUE_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	1409;"	d
FMT_MAKE_WSTR_VALUE	src/3rd_party/spdlog/details/format.h	1465;"	d
FMT_MAKE_WSTR_VALUE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	1483;"	d
FMT_MSC_VER	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	54;"	d
FMT_MSC_VER	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	56;"	d
FMT_NOEXCEPT	src/3rd_party/spdlog/details/format.h	/^                                  fmt::StringRef message) FMT_NOEXCEPT;$/;"	m	namespace:fmt::internal
FMT_NOEXCEPT	src/3rd_party/spdlog/details/format.h	/^                                 fmt::StringRef message) FMT_NOEXCEPT;$/;"	m	namespace:fmt::internal
FMT_NOEXCEPT	src/3rd_party/spdlog/details/format.h	191;"	d
FMT_NOEXCEPT	src/3rd_party/spdlog/details/format.h	193;"	d
FMT_NOEXCEPT	src/3rd_party/spdlog/details/format.h	196;"	d
FMT_NOEXCEPT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^                                  fmt::StringRef message) FMT_NOEXCEPT;$/;"	m	namespace:fmt::internal
FMT_NOEXCEPT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^                                 fmt::StringRef message) FMT_NOEXCEPT;$/;"	m	namespace:fmt::internal
FMT_NOEXCEPT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	188;"	d
FMT_NOEXCEPT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	190;"	d
FMT_NOEXCEPT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	193;"	d
FMT_NOEXCEPT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    void dup2(int fd, ErrorCode &ec) FMT_NOEXCEPT;$/;"	m	class:fmt::File
FMT_NOEXCEPT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    ~BufferedFile() FMT_NOEXCEPT;$/;"	m	class:fmt::BufferedFile
FMT_NOEXCEPT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    ~File() FMT_NOEXCEPT;$/;"	m	class:fmt::File
FMT_OSTREAM_H_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.h	11;"	d
FMT_OVERRIDE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void grow(std::size_t size) FMT_OVERRIDE;$/;"	m	class:fmt::internal::MemoryBuffer
FMT_OVERRIDE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	201;"	d
FMT_OVERRIDE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	203;"	d
FMT_POSIX	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	35;"	d
FMT_POSIX	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	37;"	d
FMT_POSIX_CALL	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	43;"	d
FMT_POSIX_CALL	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	48;"	d
FMT_POSIX_CALL	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	50;"	d
FMT_POSIX_H_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	11;"	d
FMT_POWERS_OF_10	src/3rd_party/spdlog/details/format.cc	568;"	d	file:
FMT_POWERS_OF_10	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	483;"	d	file:
FMT_RETRY	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	84;"	d
FMT_RETRY_VAL	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	76;"	d
FMT_RETRY_VAL	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	81;"	d
FMT_SECURE_SCL	src/3rd_party/spdlog/details/format.h	60;"	d
FMT_SECURE_SCL	src/3rd_party/spdlog/details/format.h	62;"	d
FMT_SECURE_SCL	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	44;"	d
FMT_SECURE_SCL	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	46;"	d
FMT_SNPRINTF	src/3rd_party/spdlog/details/format.cc	93;"	d	file:
FMT_SNPRINTF	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	90;"	d	file:
FMT_SPECIALIZE_MAKE_UNSIGNED	src/3rd_party/spdlog/details/format.h	626;"	d
FMT_SPECIALIZE_MAKE_UNSIGNED	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	622;"	d
FMT_STATIC_ASSERT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	66;"	d
FMT_STATIC_ASSERT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	69;"	d
FMT_SWPRINTF	src/3rd_party/spdlog/details/format.cc	107;"	d	file:
FMT_SWPRINTF	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	103;"	d	file:
FMT_SYSTEM	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	45;"	d
FMT_THROW	src/3rd_party/spdlog/details/format.h	175;"	d
FMT_THROW	src/3rd_party/spdlog/details/format.h	177;"	d
FMT_THROW	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	172;"	d
FMT_THROW	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	174;"	d
FMT_TIME_H_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/time.h	11;"	d
FMT_TRY	src/3rd_party/spdlog/details/format.cc	56;"	d	file:
FMT_TRY	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	56;"	d	file:
FMT_UNUSED	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	55;"	d
FMT_UNUSED	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	57;"	d
FMT_USE_DELETED_FUNCTIONS	src/3rd_party/spdlog/details/format.h	203;"	d
FMT_USE_DELETED_FUNCTIONS	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	211;"	d
FMT_USE_EXTERN_TEMPLATES	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	986;"	d
FMT_USE_IOSTREAMS	src/3rd_party/spdlog/details/format.h	52;"	d
FMT_USE_NOEXCEPT	src/3rd_party/spdlog/details/format.h	183;"	d
FMT_USE_NOEXCEPT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	180;"	d
FMT_USE_RVALUE_REFERENCES	src/3rd_party/spdlog/details/format.h	150;"	d
FMT_USE_RVALUE_REFERENCES	src/3rd_party/spdlog/details/format.h	152;"	d
FMT_USE_RVALUE_REFERENCES	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	147;"	d
FMT_USE_RVALUE_REFERENCES	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	149;"	d
FMT_USE_STATIC_ASSERT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	61;"	d
FMT_USE_USER_DEFINED_LITERALS	src/3rd_party/spdlog/details/format.h	223;"	d
FMT_USE_USER_DEFINED_LITERALS	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	232;"	d
FMT_USE_VARIADIC_TEMPLATES	src/3rd_party/spdlog/details/format.h	141;"	d
FMT_USE_VARIADIC_TEMPLATES	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	138;"	d
FMT_USE_WINDOWS_H	src/3rd_party/spdlog/details/format.h	1064;"	d
FMT_USE_WINDOWS_H	src/3rd_party/spdlog/details/format.h	1066;"	d
FMT_USE_WINDOWS_H	src/3rd_party/spdlog/details/format.h	37;"	d
FMT_USE_WINDOWS_H	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	1102;"	d
FMT_USE_WINDOWS_H	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	1104;"	d
FMT_USE_WINDOWS_H	src/3rd_party/spdlog/include/spdlog/fmt/fmt.h	19;"	d
FMT_VARIADIC_CTOR	src/3rd_party/spdlog/details/format.h	2524;"	d
FMT_VARIADIC_CTOR	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2570;"	d
FMT_VARIADIC_VOID	src/3rd_party/spdlog/details/format.h	2514;"	d
FMT_VARIADIC_VOID	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	2560;"	d
FOLD	src/3rd_party/yaml-cpp/scanscalar.h	/^enum FOLD { DONT_FOLD, FOLD_BLOCK, FOLD_FLOW };$/;"	g	namespace:YAML
FOLD_BLOCK	src/3rd_party/yaml-cpp/scanscalar.h	/^enum FOLD { DONT_FOLD, FOLD_BLOCK, FOLD_FLOW };$/;"	e	enum:YAML::FOLD
FOLD_FLOW	src/3rd_party/yaml-cpp/scanscalar.h	/^enum FOLD { DONT_FOLD, FOLD_BLOCK, FOLD_FLOW };$/;"	e	enum:YAML::FOLD
FORWARD	src/3rd_party/svd/defs_and_types.h	30;"	d
FPUtil	src/3rd_party/spdlog/details/format.h	/^typedef std::numeric_limits<fmt::internal::DummyInt> FPUtil;$/;"	t	namespace:fmt::internal
FPUtil	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef std::numeric_limits<fmt::internal::DummyInt> FPUtil;$/;"	t	namespace:fmt::internal
FUNCTION_NAME	src/common/logging.h	28;"	d
FUNCTION_NAME	src/common/logging.h	31;"	d
FUNCTION_NAME	src/common/logging.h	33;"	d
F_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class F_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
Factory	src/layers/factory.h	/^  Factory(Ptr<ExpressionGraph> graph)$/;"	f	class:marian::Factory
Factory	src/layers/factory.h	/^class Factory : public std::enable_shared_from_this<Factory> {$/;"	c	namespace:marian
FailureBit	src/3rd_party/catch.hpp	/^        FailureBit = 0x10,$/;"	e	enum:Catch::ResultWas::OfType
FailureBit	src/3rd_party/spdlog/tests/catch.hpp	/^        FailureBit = 0x10,$/;"	e	enum:Catch::ResultWas::OfType
False	src/3rd_party/svd/defs_and_types.h	34;"	d
False	src/common/keywords.h	/^struct False {};$/;"	s	namespace:marian::keywords
FalseTest	src/3rd_party/catch.hpp	/^        FalseTest = 0x04,           \/\/ Prefix expression with !$/;"	e	enum:Catch::ResultDisposition::Flags
FalseTest	src/3rd_party/spdlog/tests/catch.hpp	/^        FalseTest = 0x02,           \/\/ Prefix expression with !$/;"	e	enum:Catch::ResultDisposition::Flags
FalseType	src/3rd_party/catch.hpp	/^    struct FalseType { char sizer[2]; };$/;"	s	namespace:Catch::Detail
FalseType	src/3rd_party/spdlog/tests/catch.hpp	/^    struct FalseType {$/;"	s	namespace:Catch
FastLSTM	src/rnn/cells.h	/^  FastLSTM(Ptr<ExpressionGraph> graph, Ptr<Options> options) : Cell(options) {$/;"	f	class:marian::rnn::FastLSTM
FastLSTM	src/rnn/cells.h	/^class FastLSTM : public Cell {$/;"	c	namespace:marian::rnn
FatalErrorCondition	src/3rd_party/catch.hpp	/^        FatalErrorCondition = 0x200 | FailureBit$/;"	e	enum:Catch::ResultWas::OfType
FatalErrorCondition	src/3rd_party/spdlog/tests/catch.hpp	/^        FatalErrorCondition = 0x200 | FailureBit$/;"	e	enum:Catch::ResultWas::OfType
File	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	/^fmt::File::File(fmt::CStringRef path, int oflag) {$/;"	f	class:fmt::File
File	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    explicit File(int fd) : fd_(fd) {}$/;"	f	class:fmt::File
File	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^class File$/;"	c	namespace:fmt
FileOpenException	src/3rd_party/exception.h	/^	FileOpenException() throw() {}$/;"	f	class:util::FileOpenException
FileOpenException	src/3rd_party/exception.h	/^class FileOpenException : public Exception {$/;"	c	namespace:util
Filter	src/data/filter.h	/^  Filter(Ptr<Config> options, Ptr<Vocab> srcVocab, Ptr<Vocab> trgVocab)$/;"	f	class:marian::Filter
Filter	src/data/filter.h	/^class Filter {$/;"	c	namespace:marian
FilterInfo	src/data/filter.h	/^  FilterInfo(const std::vector<Word>& indeces,$/;"	f	class:marian::FilterInfo
FilterInfo	src/data/filter.h	/^class FilterInfo {$/;"	c	namespace:marian
FixedBuffer	src/3rd_party/spdlog/details/format.h	/^    FixedBuffer(Char *array, std::size_t size): fmt::Buffer<Char>(array, size)$/;"	f	class:fmt::internal::FixedBuffer
FixedBuffer	src/3rd_party/spdlog/details/format.h	/^class FixedBuffer: public fmt::Buffer<Char>$/;"	c	namespace:fmt::internal
FixedBuffer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    FixedBuffer(Char *array, std::size_t size) : fmt::Buffer<Char>(array, size) {}$/;"	f	class:fmt::internal::FixedBuffer
FixedBuffer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class FixedBuffer : public fmt::Buffer<Char>$/;"	c	namespace:fmt::internal
Flags	src/3rd_party/catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	g	struct:Catch::ResultDisposition
Flags	src/3rd_party/spdlog/tests/catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	g	struct:Catch::ResultDisposition
FlagsForFile	contrib/vim/.ycm_extra_conf.py	/^def FlagsForFile( filename, **kwargs ):$/;"	f
FloatPrecision	src/3rd_party/yaml-cpp/emittermanip.h	/^inline _Precision FloatPrecision(int n) { return _Precision(n, -1); }$/;"	f	namespace:YAML
Flow	src/3rd_party/yaml-cpp/emittermanip.h	/^  Flow,$/;"	e	enum:YAML::EMITTER_MANIP
Flow	src/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { NoType, Flow, Block };$/;"	e	enum:YAML::FlowType::value
Flow	src/3rd_party/yaml-cpp/emitterstyle.h	/^  enum value { Default, Block, Flow };$/;"	e	enum:YAML::EmitterStyle::value
FlowEntry	src/3rd_party/yaml-cpp/exp.h	/^const char FlowEntry = ',';$/;"	m	namespace:YAML::Keys
FlowMap	src/3rd_party/yaml-cpp/collectionstack.h	/^  enum value { NoCollection, BlockMap, BlockSeq, FlowMap, FlowSeq, CompactMap };$/;"	e	enum:YAML::CollectionType::value
FlowMap	src/3rd_party/yaml-cpp/emitterdef.h	/^  enum value { NoType, Property, Scalar, FlowSeq, BlockSeq, FlowMap, BlockMap };$/;"	e	enum:YAML::EmitterNodeType::value
FlowMapEnd	src/3rd_party/yaml-cpp/exp.h	/^const char FlowMapEnd = '}';$/;"	m	namespace:YAML::Keys
FlowMapPrepareLongKey	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::FlowMapPrepareLongKey(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
FlowMapPrepareLongKeyValue	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::FlowMapPrepareLongKeyValue(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
FlowMapPrepareNode	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::FlowMapPrepareNode(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
FlowMapPrepareSimpleKey	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::FlowMapPrepareSimpleKey(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
FlowMapPrepareSimpleKeyValue	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::FlowMapPrepareSimpleKeyValue(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
FlowMapStart	src/3rd_party/yaml-cpp/exp.h	/^const char FlowMapStart = '{';$/;"	m	namespace:YAML::Keys
FlowSeq	src/3rd_party/yaml-cpp/collectionstack.h	/^  enum value { NoCollection, BlockMap, BlockSeq, FlowMap, FlowSeq, CompactMap };$/;"	e	enum:YAML::CollectionType::value
FlowSeq	src/3rd_party/yaml-cpp/emitterdef.h	/^  enum value { NoType, Property, Scalar, FlowSeq, BlockSeq, FlowMap, BlockMap };$/;"	e	enum:YAML::EmitterNodeType::value
FlowSeqEnd	src/3rd_party/yaml-cpp/exp.h	/^const char FlowSeqEnd = ']';$/;"	m	namespace:YAML::Keys
FlowSeqPrepareNode	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::FlowSeqPrepareNode(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
FlowSeqStart	src/3rd_party/yaml-cpp/exp.h	/^const char FlowSeqStart = '[';$/;"	m	namespace:YAML::Keys
FlowType	src/3rd_party/yaml-cpp/emitterstate.h	/^struct FlowType {$/;"	s	namespace:YAML
FmtScope	src/3rd_party/yaml-cpp/emitterstate.h	/^struct FmtScope {$/;"	s	namespace:YAML
FoldedScalar	src/3rd_party/yaml-cpp/exp.h	/^const char FoldedScalar = '>';$/;"	m	namespace:YAML::Keys
ForceFlow	src/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::ForceFlow() {$/;"	f	class:YAML::EmitterState
FormatBuf	src/3rd_party/spdlog/details/format.h	/^    FormatBuf(Buffer<Char> &buffer): buffer_(buffer), start_(&buffer[0])$/;"	f	class:fmt::FormatBuf
FormatBuf	src/3rd_party/spdlog/details/format.h	/^class FormatBuf: public std::basic_streambuf<Char>$/;"	c	namespace:fmt
FormatBuf	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.h	/^    FormatBuf(Buffer<Char> &buffer) : buffer_(buffer), start_(&buffer[0])$/;"	f	class:fmt::internal::FormatBuf
FormatBuf	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.h	/^class FormatBuf : public std::basic_streambuf<Char>$/;"	c	namespace:fmt::internal
FormatError	src/3rd_party/spdlog/details/format.h	/^    explicit FormatError(CStringRef message)$/;"	f	class:fmt::FormatError
FormatError	src/3rd_party/spdlog/details/format.h	/^class FormatError: public std::runtime_error$/;"	c	namespace:fmt
FormatError	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    explicit FormatError(CStringRef message)$/;"	f	class:fmt::FormatError
FormatError	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class FormatError : public std::runtime_error$/;"	c	namespace:fmt
FormatFunc	src/3rd_party/spdlog/details/format.cc	/^		typedef void(*FormatFunc)(fmt::Writer &, int, fmt::StringRef);$/;"	t	namespace:fmt::__anon34	file:
FormatFunc	src/3rd_party/spdlog/details/format.h	/^    typedef void(*FormatFunc)($/;"	t	struct:fmt::internal::Value
FormatFunc	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^typedef void (*FormatFunc)(Writer &, int, StringRef);$/;"	t	namespace:fmt::__anon71	file:
FormatFunc	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef void (*FormatFunc)($/;"	t	struct:fmt::internal::Value
FormatInt	src/3rd_party/spdlog/details/format.h	/^    explicit FormatInt(LongLong value)$/;"	f	class:FormatInt
FormatInt	src/3rd_party/spdlog/details/format.h	/^    explicit FormatInt(ULongLong value): str_(format_decimal(value))$/;"	f	class:FormatInt
FormatInt	src/3rd_party/spdlog/details/format.h	/^    explicit FormatInt(int value)$/;"	f	class:FormatInt
FormatInt	src/3rd_party/spdlog/details/format.h	/^    explicit FormatInt(long value)$/;"	f	class:FormatInt
FormatInt	src/3rd_party/spdlog/details/format.h	/^    explicit FormatInt(unsigned long value): str_(format_decimal(value))$/;"	f	class:FormatInt
FormatInt	src/3rd_party/spdlog/details/format.h	/^    explicit FormatInt(unsigned value): str_(format_decimal(value))$/;"	f	class:FormatInt
FormatInt	src/3rd_party/spdlog/details/format.h	/^class FormatInt$/;"	c
FormatInt	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(LongLong value)$/;"	f	class:FormatInt
FormatInt	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(ULongLong value) : str_(format_decimal(value)) {}$/;"	f	class:FormatInt
FormatInt	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(int value)$/;"	f	class:FormatInt
FormatInt	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(long value)$/;"	f	class:FormatInt
FormatInt	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(unsigned long value) : str_(format_decimal(value)) {}$/;"	f	class:FormatInt
FormatInt	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    explicit FormatInt(unsigned value) : str_(format_decimal(value)) {}$/;"	f	class:FormatInt
FormatInt	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class FormatInt$/;"	c
FormatSigned	src/3rd_party/spdlog/details/format.h	/^    void FormatSigned(LongLong value)$/;"	f	class:FormatInt
FormatSigned	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void FormatSigned(LongLong value)$/;"	f	class:FormatInt
FormatSpec	src/3rd_party/spdlog/details/format.h	/^    FormatSpec($/;"	f	struct:fmt::FormatSpec
FormatSpec	src/3rd_party/spdlog/details/format.h	/^struct FormatSpec: AlignSpec$/;"	s	namespace:fmt
FormatSpec	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    FormatSpec($/;"	f	struct:fmt::FormatSpec
FormatSpec	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct FormatSpec : AlignSpec$/;"	s	namespace:fmt
FormatterBase	src/3rd_party/spdlog/details/format.h	/^    explicit FormatterBase(const ArgList &args)$/;"	f	class:fmt::internal::FormatterBase
FormatterBase	src/3rd_party/spdlog/details/format.h	/^class FormatterBase$/;"	c	namespace:fmt::internal
FormatterBase	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    explicit FormatterBase(const ArgList &args)$/;"	f	class:fmt::internal::FormatterBase
FormatterBase	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class FormatterBase$/;"	c	namespace:fmt::internal
GIVEN	src/3rd_party/catch.hpp	11499;"	d
GIVEN	src/3rd_party/spdlog/tests/catch.hpp	9404;"	d
GPU_SHAPE_DIMS	src/gpu/shape.h	14;"	d
GRAPHBUILDERADAPTER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	2;"	d
GRAPHBUILDER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	2;"	d
GREEN	src/3rd_party/spdlog/details/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
GREEN	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	e	enum:Color
GROW	src/tensors/tensor_allocator.h	/^  const size_t GROW = CHUNK * MBYTE;$/;"	m	class:marian::TensorAllocator
GRU	src/rnn/cells.h	/^  GRU(Ptr<ExpressionGraph> graph, Ptr<Options> options) : Cell(options) {$/;"	f	class:marian::rnn::GRU
GRU	src/rnn/cells.h	/^class GRU : public Cell {$/;"	c	namespace:marian::rnn
GRUNematus	src/rnn/cells.h	/^  GRUNematus(Ptr<ExpressionGraph> graph, Ptr<Options> options) : Cell(options) {$/;"	f	class:marian::rnn::GRUNematus
GRUNematus	src/rnn/cells.h	/^class GRUNematus : public Cell {$/;"	c	namespace:marian::rnn
Gap	src/tensors/allocator.h	/^  Gap(uint8_t* data, size_t size) : data_(data), size_(size) {}$/;"	f	class:marian::Gap
Gap	src/tensors/allocator.h	/^class Gap {$/;"	c	namespace:marian
GeometricPrinting	src/translator/output_collector.h	/^class GeometricPrinting : public PrintingStrategy {$/;"	c	namespace:marian
Get	src/3rd_party/yaml-cpp/contrib/anchordict.h	/^  T Get(anchor_t anchor) const { return m_data[anchor - 1]; }$/;"	f	class:YAML::AnchorDict
Get	src/common/keywords.h	/^  typename Match::value_type Get(Match key, typename Match::value_type dflt) {$/;"	f	class:marian::keywords::Keywords
Get	src/common/keywords.h	/^typename Match::value_type Get(Match key,$/;"	f	namespace:marian::keywords
GetAlignment	src/translator/printer.cpp	/^std::vector<size_t> GetAlignment(const HypothesisPtr& hypothesis) {$/;"	f	namespace:marian
GetAlignmentString	src/translator/printer.cpp	/^std::string GetAlignmentString(const std::vector<size_t>& alignment) {$/;"	f	namespace:marian
GetBoolCaseFormat	src/3rd_party/yaml-cpp/emitterstate.h	/^  EMITTER_MANIP GetBoolCaseFormat() const { return m_boolCaseFmt.get(); }$/;"	f	class:YAML::EmitterState
GetBoolFormat	src/3rd_party/yaml-cpp/emitterstate.h	/^  EMITTER_MANIP GetBoolFormat() const { return m_boolFmt.get(); }$/;"	f	class:YAML::EmitterState
GetBoolLengthFormat	src/3rd_party/yaml-cpp/emitterstate.h	/^  EMITTER_MANIP GetBoolLengthFormat() const { return m_boolLengthFmt.get(); }$/;"	f	class:YAML::EmitterState
GetCompilationInfoForFile	contrib/vim/.ycm_extra_conf.py	/^def GetCompilationInfoForFile( filename ):$/;"	f
GetCost	src/translator/hypothesis.h	/^  float GetCost() const { return cost_; }$/;"	f	class:marian::Hypothesis
GetCostBreakdown	src/translator/hypothesis.h	/^  std::vector<float>& GetCostBreakdown() { return costBreakdown_; }$/;"	f	class:marian::Hypothesis
GetCurCollectionType	src/3rd_party/yaml-cpp/collectionstack.h	/^  CollectionType::value GetCurCollectionType() const {$/;"	f	class:YAML::CollectionStack
GetCurrentParent	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void *GraphBuilderAdapter::GetCurrentParent() const {$/;"	f	class:YAML::GraphBuilderAdapter
GetDoublePrecision	src/3rd_party/yaml-cpp/emitter.cpp	/^std::size_t Emitter::GetDoublePrecision() const {$/;"	f	class:YAML::Emitter
GetDoublePrecision	src/3rd_party/yaml-cpp/emitterstate.h	/^  std::size_t GetDoublePrecision() const { return m_doublePrecision.get(); }$/;"	f	class:YAML::EmitterState
GetFloatPrecision	src/3rd_party/yaml-cpp/emitter.cpp	/^std::size_t Emitter::GetFloatPrecision() const {$/;"	f	class:YAML::Emitter
GetFloatPrecision	src/3rd_party/yaml-cpp/emitterstate.h	/^  std::size_t GetFloatPrecision() const { return m_floatPrecision.get(); }$/;"	f	class:YAML::EmitterState
GetFlowLevel	src/3rd_party/yaml-cpp/scanner.h	/^  std::size_t GetFlowLevel() const { return m_flows.size(); }$/;"	f	class:YAML::Scanner
GetFlowType	src/3rd_party/yaml-cpp/emitterstate.cpp	/^EMITTER_MANIP EmitterState::GetFlowType(GroupType::value groupType) const {$/;"	f	class:YAML::EmitterState
GetIndent	src/3rd_party/yaml-cpp/emitterstate.h	/^  std::size_t GetIndent() const { return m_indent.get(); }$/;"	f	class:YAML::EmitterState
GetIntFormat	src/3rd_party/yaml-cpp/emitterstate.h	/^  EMITTER_MANIP GetIntFormat() const { return m_intFmt.get(); }$/;"	f	class:YAML::EmitterState
GetLastError	src/3rd_party/yaml-cpp/emitter.cpp	/^const std::string Emitter::GetLastError() const {$/;"	f	class:YAML::Emitter
GetLastError	src/3rd_party/yaml-cpp/emitterstate.h	/^  const std::string GetLastError() const { return m_lastError; }$/;"	f	class:YAML::EmitterState
GetLineNum	src/translator/history.h	/^  size_t GetLineNum() const { return lineNo_; }$/;"	f	class:marian::History
GetMapKeyFormat	src/3rd_party/yaml-cpp/emitterstate.h	/^  EMITTER_MANIP GetMapKeyFormat() const { return m_mapKeyFmt.get(); }$/;"	f	class:YAML::EmitterState
GetNextByte	src/3rd_party/yaml-cpp/stream.cpp	/^unsigned char Stream::GetNextByte() const {$/;"	f	class:YAML::Stream
GetNextCodePointAndAdvance	src/3rd_party/yaml-cpp/emitterutils.cpp	/^bool GetNextCodePointAndAdvance(int& codePoint,$/;"	f	namespace:YAML::Utils::__anon77
GetOutputCharset	src/3rd_party/yaml-cpp/emitterstate.h	/^  EMITTER_MANIP GetOutputCharset() const { return m_charset.get(); }$/;"	f	class:YAML::EmitterState
GetPostCommentIndent	src/3rd_party/yaml-cpp/emitterstate.h	/^  std::size_t GetPostCommentIndent() const { return m_postCommentIndent.get(); }$/;"	f	class:YAML::EmitterState
GetPreCommentIndent	src/3rd_party/yaml-cpp/emitterstate.h	/^  std::size_t GetPreCommentIndent() const { return m_preCommentIndent.get(); }$/;"	f	class:YAML::EmitterState
GetPrevHyp	src/translator/hypothesis.h	/^  const Ptr<Hypothesis> GetPrevHyp() const { return prevHyp_; }$/;"	f	class:marian::Hypothesis
GetPrevStateIndex	src/translator/hypothesis.h	/^  size_t GetPrevStateIndex() const { return prevIndex_; }$/;"	f	class:marian::Hypothesis
GetStartTokenFor	src/3rd_party/yaml-cpp/scanner.cpp	/^Token::TYPE Scanner::GetStartTokenFor(IndentMarker::INDENT_TYPE type) const {$/;"	f	class:YAML::Scanner
GetStringFormat	src/3rd_party/yaml-cpp/emitterstate.h	/^  EMITTER_MANIP GetStringFormat() const { return m_strFmt.get(); }$/;"	f	class:YAML::EmitterState
GetTopIndent	src/3rd_party/yaml-cpp/scanner.cpp	/^int Scanner::GetTopIndent() const {$/;"	f	class:YAML::Scanner
GetValueRegex	src/3rd_party/yaml-cpp/scanner.cpp	/^const RegEx& Scanner::GetValueRegex() const {$/;"	f	class:YAML::Scanner
GetWord	src/translator/hypothesis.h	/^  size_t GetWord() const { return word_; }$/;"	f	class:marian::Hypothesis
GetYamlFromNpz	src/common/config.cpp	/^void Config::GetYamlFromNpz(YAML::Node& yaml,$/;"	f	class:marian::Config
Global	src/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { Local, Global };$/;"	e	enum:YAML::FmtScope::value
GlobalAttention	src/rnn/attention.h	/^  GlobalAttention(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::rnn::GlobalAttention
GlobalAttention	src/rnn/attention.h	/^class GlobalAttention : public CellInput {$/;"	c	namespace:marian::rnn
GradientDrop	src/training/dropper.h	/^typedef Ptr<GradientDropBase> GradientDrop;$/;"	t	namespace:marian
GradientDropBase	src/training/dropper.h	/^class GradientDropBase {$/;"	c	namespace:marian
GraphBuilder	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  GraphBuilder(Impl &impl) : m_impl(impl) {$/;"	f	class:YAML::GraphBuilder
GraphBuilder	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^class GraphBuilder : public GraphBuilderInterface {$/;"	c	namespace:YAML
GraphBuilderAdapter	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  GraphBuilderAdapter(GraphBuilderInterface& builder)$/;"	f	class:YAML::GraphBuilderAdapter
GraphBuilderAdapter	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^class GraphBuilderAdapter : public EventHandler {$/;"	c	namespace:YAML
GraphBuilderInterface	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^class GraphBuilderInterface {$/;"	c	namespace:YAML
GraphGroup	src/training/graph_group.h	/^  GraphGroup(Ptr<Config> options)$/;"	f	class:marian::GraphGroup
GraphGroup	src/training/graph_group.h	/^class GraphGroup {$/;"	c	namespace:marian
Group	src/3rd_party/yaml-cpp/emitterstate.h	/^    explicit Group(GroupType::value type_)$/;"	f	struct:YAML::EmitterState::Group
Group	src/3rd_party/yaml-cpp/emitterstate.h	/^  struct Group {$/;"	s	class:YAML::EmitterState
GroupType	src/3rd_party/yaml-cpp/emitterstate.h	/^struct GroupType {$/;"	s	namespace:YAML
HASH_FLAG	src/3rd_party/spdlog/details/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon32
HASH_FLAG	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon69
H_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class H_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
HandleBlockMap	src/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleBlockMap(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleBlockSequence	src/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleBlockSequence(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleCompactMap	src/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleCompactMap(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleCompactMapWithNoKey	src/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleCompactMapWithNoKey(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleDirective	src/3rd_party/yaml-cpp/parser.cpp	/^void Parser::HandleDirective(const Token& token) {$/;"	f	class:YAML::Parser
HandleDocument	src/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleDocument(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleFlowMap	src/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleFlowMap(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleFlowSequence	src/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleFlowSequence(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleMap	src/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleMap(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleNextDocument	src/3rd_party/yaml-cpp/parser.cpp	/^bool Parser::HandleNextDocument(EventHandler& eventHandler) {$/;"	f	class:YAML::Parser
HandleNode	src/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleNode(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleSequence	src/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::HandleSequence(EventHandler& eventHandler) {$/;"	f	class:YAML::SingleDocParser
HandleStrerror	src/3rd_party/exception.cpp	/^const char *HandleStrerror(const char *ret, const char * \/*buf*\/) {$/;"	f	namespace:util::__anon97
HandleStrerror	src/3rd_party/exception.cpp	/^const char *HandleStrerror(int ret, const char *buf) {$/;"	f	namespace:util::__anon97
HandleTagDirective	src/3rd_party/yaml-cpp/parser.cpp	/^void Parser::HandleTagDirective(const Token& token) {$/;"	f	class:YAML::Parser
HandleYamlDirective	src/3rd_party/yaml-cpp/parser.cpp	/^void Parser::HandleYamlDirective(const Token& token) {$/;"	f	class:YAML::Parser
Has	src/common/keywords.h	/^  bool Has(Match key) {$/;"	f	class:marian::keywords::Keywords
Has	src/common/keywords.h	/^constexpr bool Has(Match key, Args... args) {$/;"	f	namespace:marian::keywords
HasAnchor	src/3rd_party/yaml-cpp/emitterstate.h	/^  bool HasAnchor() const { return m_hasAnchor; }$/;"	f	class:YAML::EmitterState
HasBegunContent	src/3rd_party/yaml-cpp/emitterstate.h	/^  bool HasBegunContent() const { return m_hasAnchor || m_hasTag; }$/;"	f	class:YAML::EmitterState
HasBegunNode	src/3rd_party/yaml-cpp/emitterstate.h	/^  bool HasBegunNode() const {$/;"	f	class:YAML::EmitterState
HasTag	src/3rd_party/yaml-cpp/emitterstate.h	/^  bool HasTag() const { return m_hasTag; }$/;"	f	class:YAML::EmitterState
Hex	src/3rd_party/yaml-cpp/emittermanip.h	/^  Hex,$/;"	e	enum:YAML::EMITTER_MANIP
Hex	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Hex() {$/;"	f	namespace:YAML::Exp
HighwayNodeOp	src/graph/node_operators_binary.h	/^  HighwayNodeOp(const std::vector<Expr>& nodes) : NaryNodeOp(nodes) {}$/;"	f	struct:marian::HighwayNodeOp
HighwayNodeOp	src/graph/node_operators_binary.h	/^struct HighwayNodeOp : public NaryNodeOp {$/;"	s	namespace:marian
Histories	src/translator/history.h	/^typedef std::vector<Ptr<History>> Histories;$/;"	t	namespace:marian
History	src/translator/history.cpp	/^History::History(size_t lineNo, float alpha) : lineNo_(lineNo), alpha_(alpha) {}$/;"	f	class:marian::History
History	src/translator/history.h	/^class History {$/;"	c	namespace:marian
Hypothesis	src/translator/hypothesis.h	/^  Hypothesis() : prevHyp_(nullptr), prevIndex_(0), word_(0), cost_(0.0) {}$/;"	f	class:marian::Hypothesis
Hypothesis	src/translator/hypothesis.h	/^  Hypothesis(const Ptr<Hypothesis> prevHyp,$/;"	f	class:marian::Hypothesis
Hypothesis	src/translator/hypothesis.h	/^class Hypothesis {$/;"	c	namespace:marian
HypothesisCoord	src/translator/history.h	/^  struct HypothesisCoord {$/;"	s	class:marian::History
IContext	src/3rd_party/catch.hpp	/^    struct IContext$/;"	s	namespace:Catch
IContext	src/3rd_party/spdlog/tests/catch.hpp	/^    struct IContext$/;"	s	namespace:Catch
IGeneratorInfo	src/3rd_party/catch.hpp	/^    struct IGeneratorInfo {$/;"	s	namespace:Catch
IGeneratorInfo	src/3rd_party/spdlog/tests/catch.hpp	/^    struct IGeneratorInfo {$/;"	s	namespace:Catch
IGeneratorsForTest	src/3rd_party/catch.hpp	/^    struct IGeneratorsForTest {$/;"	s	namespace:Catch
IGeneratorsForTest	src/3rd_party/spdlog/tests/catch.hpp	/^    struct IGeneratorsForTest {$/;"	s	namespace:Catch
IMAGE_MAGIC_NUMBER	src/examples/mnist/dataset.h	/^  const int IMAGE_MAGIC_NUMBER;$/;"	m	class:marian::data::MNISTData
IMutableContext	src/3rd_party/catch.hpp	/^    struct IMutableContext : IContext$/;"	s	namespace:Catch
IMutableContext	src/3rd_party/spdlog/tests/catch.hpp	/^    struct IMutableContext : IContext$/;"	s	namespace:Catch
INDENTATION_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/indentation.h	2;"	d
INDENT_TYPE	src/3rd_party/yaml-cpp/scanner.h	/^    enum INDENT_TYPE { MAP, SEQ, NONE };$/;"	g	struct:YAML::Scanner::IndentMarker
INLINE_BUFFER_SIZE	src/3rd_party/spdlog/details/format.h	/^    INLINE_BUFFER_SIZE = 500$/;"	e	enum:fmt::internal::__anon20
INLINE_BUFFER_SIZE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^enum { INLINE_BUFFER_SIZE = 500 };$/;"	e	enum:fmt::internal::__anon58
INPUT	src/3rd_party/yaml-cpp/scanner.h	/^  Stream INPUT;$/;"	m	class:YAML::Scanner
INT	src/3rd_party/spdlog/details/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
INT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
INTERNAL_CATCH_ELSE	src/3rd_party/catch.hpp	2210;"	d
INTERNAL_CATCH_ELSE	src/3rd_party/spdlog/tests/catch.hpp	1598;"	d
INTERNAL_CATCH_GENERATE	src/3rd_party/catch.hpp	2641;"	d
INTERNAL_CATCH_GENERATE	src/3rd_party/spdlog/tests/catch.hpp	2019;"	d
INTERNAL_CATCH_IF	src/3rd_party/catch.hpp	2205;"	d
INTERNAL_CATCH_IF	src/3rd_party/spdlog/tests/catch.hpp	1593;"	d
INTERNAL_CATCH_INFO	src/3rd_party/catch.hpp	2285;"	d
INTERNAL_CATCH_INFO	src/3rd_party/spdlog/tests/catch.hpp	1673;"	d
INTERNAL_CATCH_LINESTR	src/3rd_party/catch.hpp	2639;"	d
INTERNAL_CATCH_LINESTR	src/3rd_party/spdlog/tests/catch.hpp	2017;"	d
INTERNAL_CATCH_LINESTR2	src/3rd_party/catch.hpp	2638;"	d
INTERNAL_CATCH_LINESTR2	src/3rd_party/spdlog/tests/catch.hpp	2016;"	d
INTERNAL_CATCH_METHOD_AS_TEST_CASE	src/3rd_party/catch.hpp	781;"	d
INTERNAL_CATCH_METHOD_AS_TEST_CASE	src/3rd_party/spdlog/tests/catch.hpp	563;"	d
INTERNAL_CATCH_MSG	src/3rd_party/catch.hpp	2267;"	d
INTERNAL_CATCH_MSG	src/3rd_party/spdlog/tests/catch.hpp	1655;"	d
INTERNAL_CATCH_NO_THROW	src/3rd_party/catch.hpp	2215;"	d
INTERNAL_CATCH_NO_THROW	src/3rd_party/spdlog/tests/catch.hpp	1603;"	d
INTERNAL_CATCH_REACT	src/3rd_party/catch.hpp	2148;"	d
INTERNAL_CATCH_REACT	src/3rd_party/spdlog/tests/catch.hpp	1575;"	d
INTERNAL_CATCH_REGISTER_LEGACY_REPORTER	src/3rd_party/catch.hpp	9786;"	d
INTERNAL_CATCH_REGISTER_LEGACY_REPORTER	src/3rd_party/spdlog/tests/catch.hpp	7835;"	d
INTERNAL_CATCH_REGISTER_LISTENER	src/3rd_party/catch.hpp	9793;"	d
INTERNAL_CATCH_REGISTER_REPORTER	src/3rd_party/catch.hpp	9789;"	d
INTERNAL_CATCH_REGISTER_REPORTER	src/3rd_party/spdlog/tests/catch.hpp	7837;"	d
INTERNAL_CATCH_REGISTER_TESTCASE	src/3rd_party/catch.hpp	801;"	d
INTERNAL_CATCH_SECTION	src/3rd_party/catch.hpp	2457;"	d
INTERNAL_CATCH_SECTION	src/3rd_party/spdlog/tests/catch.hpp	1834;"	d
INTERNAL_CATCH_STRINGIFY	src/3rd_party/catch.hpp	375;"	d
INTERNAL_CATCH_STRINGIFY	src/3rd_party/spdlog/tests/catch.hpp	63;"	d
INTERNAL_CATCH_STRINGIFY2	src/3rd_party/catch.hpp	374;"	d
INTERNAL_CATCH_STRINGIFY2	src/3rd_party/spdlog/tests/catch.hpp	62;"	d
INTERNAL_CATCH_TEST	src/3rd_party/catch.hpp	2189;"	d
INTERNAL_CATCH_TEST	src/3rd_party/spdlog/tests/catch.hpp	1580;"	d
INTERNAL_CATCH_TESTCASE	src/3rd_party/catch.hpp	777;"	d
INTERNAL_CATCH_TESTCASE	src/3rd_party/spdlog/tests/catch.hpp	557;"	d
INTERNAL_CATCH_TESTCASE2	src/3rd_party/catch.hpp	771;"	d
INTERNAL_CATCH_TEST_CASE_METHOD	src/3rd_party/catch.hpp	797;"	d
INTERNAL_CATCH_TEST_CASE_METHOD	src/3rd_party/spdlog/tests/catch.hpp	567;"	d
INTERNAL_CATCH_TEST_CASE_METHOD2	src/3rd_party/catch.hpp	787;"	d
INTERNAL_CATCH_TEST_NO_TRY	src/3rd_party/catch.hpp	2156;"	d
INTERNAL_CATCH_THROWS	src/3rd_party/catch.hpp	2229;"	d
INTERNAL_CATCH_THROWS	src/3rd_party/spdlog/tests/catch.hpp	1617;"	d
INTERNAL_CATCH_THROWS_AS	src/3rd_party/catch.hpp	2246;"	d
INTERNAL_CATCH_THROWS_AS	src/3rd_party/spdlog/tests/catch.hpp	1634;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION	src/3rd_party/catch.hpp	2748;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION	src/3rd_party/spdlog/tests/catch.hpp	2109;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION2	src/3rd_party/catch.hpp	2743;"	d
INTERNAL_CATCH_UNIQUE_NAME	src/3rd_party/catch.hpp	369;"	d
INTERNAL_CATCH_UNIQUE_NAME	src/3rd_party/catch.hpp	371;"	d
INTERNAL_CATCH_UNIQUE_NAME	src/3rd_party/spdlog/tests/catch.hpp	60;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE	src/3rd_party/catch.hpp	367;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE	src/3rd_party/spdlog/tests/catch.hpp	59;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE2	src/3rd_party/catch.hpp	366;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE2	src/3rd_party/spdlog/tests/catch.hpp	58;"	d
INTERNAL_CHECK_THAT	src/3rd_party/catch.hpp	2289;"	d
INTERNAL_CHECK_THAT	src/3rd_party/spdlog/tests/catch.hpp	1677;"	d
INTERNAL_CHECK_THAT_NO_TRY	src/3rd_party/catch.hpp	2168;"	d
INVALID	src/3rd_party/yaml-cpp/scanner.h	/^    enum STATUS { VALID, INVALID, UNKNOWN };$/;"	e	enum:YAML::Scanner::IndentMarker::STATUS
INVALID	src/3rd_party/yaml-cpp/token.h	/^  enum STATUS { VALID, INVALID, UNVERIFIED };$/;"	e	enum:YAML::Token::STATUS
INVALID_ALIAS	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const INVALID_ALIAS = "invalid alias";$/;"	m	namespace:YAML::ErrorMsg
INVALID_ANCHOR	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const INVALID_ANCHOR = "invalid anchor";$/;"	m	namespace:YAML::ErrorMsg
INVALID_ESCAPE	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const INVALID_ESCAPE = "unknown escape character: ";$/;"	m	namespace:YAML::ErrorMsg
INVALID_HEX	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const INVALID_HEX = "bad character found while scanning hex number";$/;"	m	namespace:YAML::ErrorMsg
INVALID_NODE	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const INVALID_NODE =$/;"	m	namespace:YAML::ErrorMsg
INVALID_SCALAR	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const INVALID_SCALAR = "invalid scalar";$/;"	m	namespace:YAML::ErrorMsg
INVALID_TAG	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const INVALID_TAG = "invalid tag";$/;"	m	namespace:YAML::ErrorMsg
INVALID_UNICODE	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const INVALID_UNICODE = "invalid unicode: ";$/;"	m	namespace:YAML::ErrorMsg
IShared	src/3rd_party/catch.hpp	/^    struct IShared : NonCopyable {$/;"	s	namespace:Catch
IShared	src/3rd_party/spdlog/tests/catch.hpp	/^    struct IShared : NonCopyable {$/;"	s	namespace:Catch
ITestCase	src/3rd_party/catch.hpp	/^    struct ITestCase : IShared {$/;"	s	namespace:Catch
ITestCase	src/3rd_party/spdlog/tests/catch.hpp	/^    struct ITestCase : IShared {$/;"	s	namespace:Catch
ITestCaseRegistry	src/3rd_party/catch.hpp	/^    struct ITestCaseRegistry {$/;"	s	namespace:Catch
ITestCaseRegistry	src/3rd_party/spdlog/tests/catch.hpp	/^    struct ITestCaseRegistry {$/;"	s	namespace:Catch
I_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class I_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
Id2Str	src/data/vocab.h	/^  typedef std::vector<std::string> Id2Str;$/;"	t	class:marian::Vocab
Identity	src/3rd_party/exception.h	/^      typedef T Identity;$/;"	t	struct:util::Exception::ExceptionTag
If	src/3rd_party/spdlog/tests/catch.hpp	/^    template<> struct If<false> : FalseType {};$/;"	s	namespace:Catch
If	src/3rd_party/spdlog/tests/catch.hpp	/^    template<> struct If<true> : TrueType {};$/;"	s	namespace:Catch
If	src/3rd_party/spdlog/tests/catch.hpp	/^    template<bool c> struct If : NotABooleanExpression<c> {};$/;"	s	namespace:Catch
Impl	src/3rd_party/catch.hpp	/^    namespace Impl {$/;"	n	namespace:Catch::Matchers
InBlockContext	src/3rd_party/yaml-cpp/scanner.h	/^  bool InBlockContext() const { return m_flows.empty(); }$/;"	f	class:YAML::Scanner
InFlowContext	src/3rd_party/yaml-cpp/scanner.h	/^  bool InFlowContext() const { return !m_flows.empty(); }$/;"	f	class:YAML::Scanner
Indent	src/3rd_party/yaml-cpp/emittermanip.h	/^inline _Indent Indent(int value) { return _Indent(value); }$/;"	f	namespace:YAML
IndentMarker	src/3rd_party/yaml-cpp/scanner.h	/^    IndentMarker(int column_, INDENT_TYPE type_)$/;"	f	struct:YAML::Scanner::IndentMarker
IndentMarker	src/3rd_party/yaml-cpp/scanner.h	/^  struct IndentMarker {$/;"	s	class:YAML::Scanner
IndentTo	src/3rd_party/yaml-cpp/indentation.h	/^  IndentTo(std::size_t n_) : n(n_) {}$/;"	f	struct:YAML::IndentTo
IndentTo	src/3rd_party/yaml-cpp/indentation.h	/^struct IndentTo {$/;"	s	namespace:YAML
Indentation	src/3rd_party/yaml-cpp/indentation.h	/^  Indentation(std::size_t n_) : n(n_) {}$/;"	f	struct:YAML::Indentation
Indentation	src/3rd_party/yaml-cpp/indentation.h	/^struct Indentation {$/;"	s	namespace:YAML
Index	src/common/keywords.h	/^struct Index<T, std::tuple<T, Types...>> {$/;"	s	namespace:marian::keywords
Index	src/common/keywords.h	/^struct Index<T, std::tuple<U, Types...>> {$/;"	s	namespace:marian::keywords
Info	src/3rd_party/catch.hpp	/^        Info = 1,$/;"	e	enum:Catch::ResultWas::OfType
Info	src/3rd_party/spdlog/tests/catch.hpp	/^        Info = 1,$/;"	e	enum:Catch::ResultWas::OfType
Input	src/data/dataset.h	/^  Input(const Shape& shape)$/;"	f	class:marian::data::Input
Input	src/data/dataset.h	/^class Input {$/;"	c	namespace:marian::data
InputFactory	src/rnn/constructors.h	/^  InputFactory(Ptr<ExpressionGraph> graph) : StackableFactory(graph) {}$/;"	f	struct:marian::rnn::InputFactory
InputFactory	src/rnn/constructors.h	/^struct InputFactory : public StackableFactory {$/;"	s	namespace:marian::rnn
InputFileStream	src/common/file_stream.h	/^  InputFileStream(TemporaryFile& tempfile)$/;"	f	class:InputFileStream
InputFileStream	src/common/file_stream.h	/^  InputFileStream(const std::string& file) : file_(file), ifstream_(file_) {$/;"	f	class:InputFileStream
InputFileStream	src/common/file_stream.h	/^  InputFileStream(std::istream& strm) { istream_.push(strm, 0); }$/;"	f	class:InputFileStream
InputFileStream	src/common/file_stream.h	/^class InputFileStream {$/;"	c
InsertPotentialSimpleKey	src/3rd_party/yaml-cpp/simplekey.cpp	/^void Scanner::InsertPotentialSimpleKey() {$/;"	f	class:YAML::Scanner
IntChecker	src/3rd_party/spdlog/details/format.cc	/^		struct IntChecker$/;"	s	namespace:fmt::__anon34	file:
IntChecker	src/3rd_party/spdlog/details/format.cc	/^		struct IntChecker<true>$/;"	s	namespace:fmt::__anon34	file:
IntChecker	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^struct IntChecker {$/;"	s	namespace:fmt::__anon71	file:
IntChecker	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^struct IntChecker<true> {$/;"	s	namespace:fmt::__anon71	file:
IntFormatSpec	src/3rd_party/spdlog/details/format.h	/^    IntFormatSpec(T val, const SpecT &spec = SpecT())$/;"	f	class:fmt::IntFormatSpec
IntFormatSpec	src/3rd_party/spdlog/details/format.h	/^class IntFormatSpec: public SpecT$/;"	c	namespace:fmt
IntFormatSpec	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    IntFormatSpec(T val, const SpecT &spec = SpecT())$/;"	f	class:fmt::IntFormatSpec
IntFormatSpec	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class IntFormatSpec : public SpecT$/;"	c	namespace:fmt
IntTraits	src/3rd_party/spdlog/details/format.h	/^struct IntTraits$/;"	s	namespace:fmt::internal
IntTraits	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct IntTraits$/;"	s	namespace:fmt::internal
Internal	src/3rd_party/catch.hpp	/^namespace Internal {$/;"	n	namespace:Catch
Internal	src/3rd_party/spdlog/tests/catch.hpp	/^namespace Internal {$/;"	n	namespace:Catch
IntroCharTypeOf	src/3rd_party/yaml-cpp/stream.cpp	/^inline UtfIntroCharType IntroCharTypeOf(std::istream::int_type ch) {$/;"	f	namespace:YAML
InvalidNode	src/3rd_party/yaml-cpp/exceptions.h	/^  InvalidNode()$/;"	f	class:YAML::InvalidNode
InvalidNode	src/3rd_party/yaml-cpp/exceptions.h	/^class YAML_CPP_API InvalidNode : public RepresentationException {$/;"	c	namespace:YAML
InvalidScalar	src/3rd_party/yaml-cpp/exceptions.h	/^  InvalidScalar(const Mark& mark_)$/;"	f	class:YAML::InvalidScalar
InvalidScalar	src/3rd_party/yaml-cpp/exceptions.h	/^class YAML_CPP_API InvalidScalar : public RepresentationException {$/;"	c	namespace:YAML
Invalidate	src/3rd_party/yaml-cpp/simplekey.cpp	/^void Scanner::SimpleKey::Invalidate() {$/;"	f	class:YAML::Scanner::SimpleKey
InvalidateSimpleKey	src/3rd_party/yaml-cpp/simplekey.cpp	/^void Scanner::InvalidateSimpleKey() {$/;"	f	class:YAML::Scanner
InverseMask	src/models/transformer.h	/^  Expr InverseMask(Expr mask) {$/;"	f	class:marian::Transformer
IsAliased	src/3rd_party/yaml-cpp/nodeevents.cpp	/^bool NodeEvents::IsAliased(const detail::node& node) const {$/;"	f	class:YAML::NodeEvents
IsAnchorChar	src/3rd_party/yaml-cpp/emitterutils.cpp	/^bool IsAnchorChar(int ch) {  \/\/ test for ns-anchor-char$/;"	f	namespace:YAML::Utils::__anon77
IsDefined	src/3rd_party/yaml-cpp/node/impl.h	/^inline bool Node::IsDefined() const {$/;"	f	class:YAML::Node
IsEntirely	src/3rd_party/yaml-cpp/convert.cpp	/^bool IsEntirely(const std::string& str, T func) {$/;"	f	namespace:__anon95
IsEqualTo	src/3rd_party/catch.hpp	/^        IsEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsEqualTo	src/3rd_party/spdlog/tests/catch.hpp	/^        IsEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsFlexibleCase	src/3rd_party/yaml-cpp/convert.cpp	/^bool IsFlexibleCase(const std::string& str) {$/;"	f	namespace:__anon95
IsGreaterThan	src/3rd_party/catch.hpp	/^        IsGreaterThan,$/;"	e	enum:Catch::Internal::Operator
IsGreaterThan	src/3rd_party/spdlog/tests/catch.hpp	/^        IsGreaterThan,$/;"	e	enum:Catch::Internal::Operator
IsGreaterThanOrEqualTo	src/3rd_party/catch.hpp	/^        IsGreaterThanOrEqualTo$/;"	e	enum:Catch::Internal::Operator
IsGreaterThanOrEqualTo	src/3rd_party/spdlog/tests/catch.hpp	/^        IsGreaterThanOrEqualTo$/;"	e	enum:Catch::Internal::Operator
IsHeaderFile	contrib/vim/.ycm_extra_conf.py	/^def IsHeaderFile( filename ):$/;"	f
IsInfinity	src/3rd_party/yaml-cpp/node/convert.h	/^inline bool IsInfinity(const std::string& input) {$/;"	f	namespace:YAML::conversion
IsLessThan	src/3rd_party/catch.hpp	/^        IsLessThan,$/;"	e	enum:Catch::Internal::Operator
IsLessThan	src/3rd_party/spdlog/tests/catch.hpp	/^        IsLessThan,$/;"	e	enum:Catch::Internal::Operator
IsLessThanOrEqualTo	src/3rd_party/catch.hpp	/^        IsLessThanOrEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsLessThanOrEqualTo	src/3rd_party/spdlog/tests/catch.hpp	/^        IsLessThanOrEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsLower	src/3rd_party/yaml-cpp/convert.cpp	/^bool IsLower(char ch) { return 'a' <= ch && ch <= 'z'; }$/;"	f	namespace:__anon95
IsMap	src/3rd_party/yaml-cpp/node/node.h	/^  bool IsMap() const { return Type() == NodeType::Map; }$/;"	f	class:YAML::Node
IsNaN	src/3rd_party/yaml-cpp/node/convert.h	/^inline bool IsNaN(const std::string& input) {$/;"	f	namespace:YAML::conversion
IsNegativeInfinity	src/3rd_party/yaml-cpp/node/convert.h	/^inline bool IsNegativeInfinity(const std::string& input) {$/;"	f	namespace:YAML::conversion
IsNotEqualTo	src/3rd_party/catch.hpp	/^        IsNotEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsNotEqualTo	src/3rd_party/spdlog/tests/catch.hpp	/^        IsNotEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsNull	src/3rd_party/yaml-cpp/node/node.h	/^  bool IsNull() const { return Type() == NodeType::Null; }$/;"	f	class:YAML::Node
IsNullString	src/3rd_party/yaml-cpp/null.cpp	/^bool IsNullString(const std::string& str) {$/;"	f	namespace:YAML
IsScalar	src/3rd_party/yaml-cpp/node/node.h	/^  bool IsScalar() const { return Type() == NodeType::Scalar; }$/;"	f	class:YAML::Node
IsSequence	src/3rd_party/yaml-cpp/node/node.h	/^  bool IsSequence() const { return Type() == NodeType::Sequence; }$/;"	f	class:YAML::Node
IsStreamInsertable	src/3rd_party/catch.hpp	/^    class IsStreamInsertable {$/;"	c	namespace:Catch::Detail
IsStreamInsertable	src/3rd_party/catch.hpp	/^    struct IsStreamInsertable {$/;"	s	namespace:Catch::Detail
IsStreamInsertableHelper	src/3rd_party/spdlog/tests/catch.hpp	/^    class IsStreamInsertableHelper {$/;"	c	namespace:Catch::Detail
IsTrailingByte	src/3rd_party/yaml-cpp/emitterutils.cpp	/^bool IsTrailingByte(char ch) { return (ch & 0xC0) == 0x80; }$/;"	f	namespace:YAML::Utils::__anon77
IsUpper	src/3rd_party/yaml-cpp/convert.cpp	/^bool IsUpper(char ch) { return 'A' <= ch && ch <= 'Z'; }$/;"	f	namespace:__anon95
IsValidLiteralScalar	src/3rd_party/yaml-cpp/emitterutils.cpp	/^bool IsValidLiteralScalar(const std::string& str, FlowType::value flowType,$/;"	f	namespace:YAML::Utils::__anon77
IsValidPlainScalar	src/3rd_party/yaml-cpp/emitterutils.cpp	/^bool IsValidPlainScalar(const std::string& str, FlowType::value flowType,$/;"	f	namespace:YAML::Utils::__anon77
IsValidSingleQuotedScalar	src/3rd_party/yaml-cpp/emitterutils.cpp	/^bool IsValidSingleQuotedScalar(const std::string& str, bool escapeNonAscii) {$/;"	f	namespace:YAML::Utils::__anon77
IsValidSource	src/3rd_party/yaml-cpp/regeximpl.h	/^inline bool RegEx::IsValidSource(const Source& source) const {$/;"	f	class:YAML::RegEx
IsValidSource	src/3rd_party/yaml-cpp/regeximpl.h	/^inline bool RegEx::IsValidSource<StringCharSource>($/;"	f	class:YAML::RegEx
IsWhitespaceToBeEaten	src/3rd_party/yaml-cpp/scanner.cpp	/^bool Scanner::IsWhitespaceToBeEaten(char ch) {$/;"	f	class:YAML::Scanner
IsZeroInt	src/3rd_party/spdlog/details/format.cc	/^		class IsZeroInt: public fmt::internal::ArgVisitor<IsZeroInt, bool>$/;"	c	namespace:fmt::__anon34	file:
IsZeroInt	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^class IsZeroInt : public ArgVisitor<IsZeroInt, bool> {$/;"	c	namespace:fmt::__anon71	file:
Join	src/common/utils.cpp	/^std::string Join(const std::vector<std::string>& words, const std::string del) {$/;"	f
JoinHeads	src/models/transformer.h	/^  Expr JoinHeads(Expr input, int dimBeam = 1) {$/;"	f	class:marian::Transformer
KEEP	src/3rd_party/yaml-cpp/scanscalar.h	/^enum CHOMP { STRIP = -1, CLIP, KEEP };$/;"	e	enum:YAML::CHOMP
KEY	src/3rd_party/yaml-cpp/token.h	/^    KEY,$/;"	e	enum:YAML::Token::TYPE
KEY	src/common/keywords.h	230;"	d
KEY_NOT_FOUND	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const KEY_NOT_FOUND = "key not found";$/;"	m	namespace:YAML::ErrorMsg
KEY_NOT_FOUND_WITH_KEY	src/3rd_party/yaml-cpp/exceptions.h	/^inline const std::string KEY_NOT_FOUND_WITH_KEY($/;"	f	namespace:YAML::ErrorMsg
KEY_NOT_FOUND_WITH_KEY	src/3rd_party/yaml-cpp/exceptions.h	/^inline const std::string KEY_NOT_FOUND_WITH_KEY(const std::string& key) {$/;"	f	namespace:YAML::ErrorMsg
Key	src/3rd_party/yaml-cpp/emittermanip.h	/^  Key,$/;"	e	enum:YAML::EMITTER_MANIP
Key	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Key() {$/;"	f	namespace:YAML::Exp
KeyInFlow	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& KeyInFlow() {$/;"	f	namespace:YAML::Exp
KeyNotFound	src/3rd_party/yaml-cpp/exceptions.h	/^  KeyNotFound(const Mark& mark_, const T& key_)$/;"	f	class:YAML::KeyNotFound
KeyNotFound	src/3rd_party/yaml-cpp/exceptions.h	/^class YAML_CPP_API KeyNotFound : public RepresentationException {$/;"	c	namespace:YAML
Keys	src/3rd_party/yaml-cpp/exp.h	/^namespace Keys {$/;"	n	namespace:YAML
Keyword	src/common/keywords.h	/^  Keyword() : value_() {}$/;"	f	class:marian::keywords::Keyword
Keyword	src/common/keywords.h	/^  Keyword(Value value) : value_(value) {}$/;"	f	class:marian::keywords::Keyword
Keyword	src/common/keywords.h	/^class Keyword {$/;"	c	namespace:marian::keywords
Keywords	src/common/keywords.h	/^  Keywords(Args... args) {$/;"	f	class:marian::keywords::Keywords
Keywords	src/common/keywords.h	/^class Keywords {$/;"	c	namespace:marian::keywords
LABEL_MAGIC_NUMBER	src/examples/mnist/dataset.h	/^  const int LABEL_MAGIC_NUMBER;$/;"	m	class:marian::data::MNISTData
LAST_INTEGER_TYPE	src/3rd_party/spdlog/details/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
LAST_INTEGER_TYPE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
LAST_NUMERIC_TYPE	src/3rd_party/spdlog/details/format.h	/^        DOUBLE, LONG_DOUBLE, LAST_NUMERIC_TYPE = LONG_DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
LAST_NUMERIC_TYPE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        DOUBLE, LONG_DOUBLE, LAST_NUMERIC_TYPE = LONG_DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
LC_NUMERIC_MASK	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    enum { LC_NUMERIC_MASK = LC_NUMERIC };$/;"	e	enum:fmt::Locale::__anon42
LConvCheck	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    LConvCheck(int) {}$/;"	f	struct:fmt::internal::LConvCheck
LConvCheck	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^template<typename T, T> struct LConvCheck$/;"	s	namespace:fmt::internal
LIBCNPY_H_	src/3rd_party/cnpy/cnpy.h	6;"	d
LOCAL_MODULE	src/3rd_party/spdlog/example/jni/Android.mk	/^LOCAL_MODULE := example$/;"	m
LOCAL_PATH	src/3rd_party/spdlog/example/jni/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_SRC_FILES	src/3rd_party/spdlog/example/jni/Android.mk	/^LOCAL_SRC_FILES := example.cpp$/;"	m
LOG	src/common/logging.h	15;"	d
LOG_VALID	src/common/logging.h	25;"	d
LONG_DOUBLE	src/3rd_party/spdlog/details/format.h	/^        DOUBLE, LONG_DOUBLE, LAST_NUMERIC_TYPE = LONG_DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
LONG_DOUBLE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        DOUBLE, LONG_DOUBLE, LAST_NUMERIC_TYPE = LONG_DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
LONG_LONG	src/3rd_party/spdlog/details/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
LONG_LONG	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
LastIndent	src/3rd_party/yaml-cpp/emitterstate.cpp	/^std::size_t EmitterState::LastIndent() const {$/;"	f	class:YAML::EmitterState
Layer	src/layers/generic.h	/^  Layer(Ptr<ExpressionGraph> graph, Ptr<Options> options)$/;"	f	class:marian::mlp::Layer
Layer	src/layers/generic.h	/^class Layer {$/;"	c	namespace:marian::mlp
LayerAttention	src/models/transformer.h	/^  Expr LayerAttention(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::Transformer
LayerFFN	src/models/transformer.h	/^  Expr LayerFFN(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::Transformer
LayerFactory	src/layers/constructors.h	/^  LayerFactory(Ptr<ExpressionGraph> graph) : Factory(graph) {}$/;"	f	struct:marian::mlp::LayerFactory
LayerFactory	src/layers/constructors.h	/^struct LayerFactory : public Factory {$/;"	s	namespace:marian::mlp
LayerNormalizationOp	src/graph/node_operators_binary.h	/^  LayerNormalizationOp(const std::vector<Expr>& nodes, float eps = 1e-9)$/;"	f	struct:marian::LayerNormalizationOp
LayerNormalizationOp	src/graph/node_operators_binary.h	/^struct LayerNormalizationOp : public NaryNodeOp {$/;"	s	namespace:marian
LeakyReLU	src/layers/generic.h	/^enum struct act : int { linear, tanh, logit, ReLU, LeakyReLU, PReLU, swish };$/;"	m	struct:marian::mlp::act
LengthPenalty	src/translator/history.h	/^  float LengthPenalty(size_t length) { return std::pow((float)length, alpha_); }$/;"	f	class:marian::History
LexProbs	src/models/experimental/lex_probs.h	/^  LexProbs(Ptr<Config> options, Ptr<Vocab> srcVocab, Ptr<Vocab> trgVocab)$/;"	f	class:marian::LexProbs
LexProbs	src/models/experimental/lex_probs.h	/^  LexProbs(const std::string& fname,$/;"	f	class:marian::LexProbs
LexProbs	src/models/experimental/lex_probs.h	/^class LexProbs {$/;"	c	namespace:marian
LexicalBias	src/models/experimental/lex_probs.h	/^  LexicalBias(Ptr<sparse::CSR> sentLexProbs,$/;"	f	class:marian::LexicalBias
LexicalBias	src/models/experimental/lex_probs.h	/^class LexicalBias {$/;"	c	namespace:marian
Literal	src/3rd_party/yaml-cpp/emittermanip.h	/^  Literal,$/;"	e	enum:YAML::EMITTER_MANIP
Literal	src/3rd_party/yaml-cpp/emitterutils.h	/^  enum value { Plain, SingleQuoted, DoubleQuoted, Literal };$/;"	e	enum:YAML::StringFormat::value
LiteralScalar	src/3rd_party/yaml-cpp/exp.h	/^const char LiteralScalar = '|';$/;"	m	namespace:YAML::Keys
Load	src/3rd_party/yaml-cpp/parse.cpp	/^Node Load(const char* input) {$/;"	f	namespace:YAML
Load	src/3rd_party/yaml-cpp/parse.cpp	/^Node Load(const std::string& input) {$/;"	f	namespace:YAML
Load	src/3rd_party/yaml-cpp/parse.cpp	/^Node Load(std::istream& input) {$/;"	f	namespace:YAML
Load	src/3rd_party/yaml-cpp/parser.cpp	/^void Parser::Load(std::istream& in) {$/;"	f	class:YAML::Parser
Load	src/data/npz_converter.h	/^  void Load(const std::string& key,$/;"	f	class:NpzConverter
LoadAll	src/3rd_party/yaml-cpp/parse.cpp	/^std::vector<Node> LoadAll(const char* input) {$/;"	f	namespace:YAML
LoadAll	src/3rd_party/yaml-cpp/parse.cpp	/^std::vector<Node> LoadAll(const std::string& input) {$/;"	f	namespace:YAML
LoadAll	src/3rd_party/yaml-cpp/parse.cpp	/^std::vector<Node> LoadAll(std::istream& input) {$/;"	f	namespace:YAML
LoadAllFromFile	src/3rd_party/yaml-cpp/parse.cpp	/^std::vector<Node> LoadAllFromFile(const std::string& filename) {$/;"	f	namespace:YAML
LoadFile	src/3rd_party/yaml-cpp/parse.cpp	/^Node LoadFile(const std::string& filename) {$/;"	f	namespace:YAML
Local	src/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { Local, Global };$/;"	e	enum:YAML::FmtScope::value
LocalTag	src/3rd_party/yaml-cpp/emittermanip.h	/^inline _Tag LocalTag(const std::string content) {$/;"	f	namespace:YAML
LocalTag	src/3rd_party/yaml-cpp/emittermanip.h	/^inline _Tag LocalTag(const std::string& prefix, const std::string content) {$/;"	f	namespace:YAML
Locale	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    Locale() : locale_(newlocale(LC_NUMERIC_MASK, "C", NULL))$/;"	f	class:fmt::Locale
Locale	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^class Locale$/;"	c	namespace:fmt
LogNodeOp	src/graph/node_operators_unary.h	/^  LogNodeOp(Args... args) : UnaryNodeOp(args...) {}$/;"	f	struct:marian::LogNodeOp
LogNodeOp	src/graph/node_operators_unary.h	/^struct LogNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
LogSoftmaxNodeOp	src/graph/node_operators_unary.h	/^  LogSoftmaxNodeOp(Args... args) : UnaryNodeOp(args...) {}$/;"	f	struct:marian::LogSoftmaxNodeOp
LogSoftmaxNodeOp	src/graph/node_operators_unary.h	/^struct LogSoftmaxNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
Logger	src/common/logging.h	/^typedef std::shared_ptr<spdlog::logger> Logger;$/;"	t
LogitNodeOp	src/graph/node_operators_unary.h	/^  LogitNodeOp(Args... args) : UnaryNodeOp(args...) {}$/;"	f	struct:marian::LogitNodeOp
LogitNodeOp	src/graph/node_operators_unary.h	/^struct LogitNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
LongBool	src/3rd_party/yaml-cpp/emittermanip.h	/^  LongBool,       \/\/ yes, On$/;"	e	enum:YAML::EMITTER_MANIP
LongKey	src/3rd_party/yaml-cpp/emittermanip.h	/^  LongKey$/;"	e	enum:YAML::EMITTER_MANIP
LongLong	src/3rd_party/spdlog/details/format.h	/^FMT_GCC_EXTENSION typedef long long LongLong;$/;"	t	namespace:fmt
LongLong	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_GCC_EXTENSION typedef long long LongLong;$/;"	t	namespace:fmt
LookupAnchor	src/3rd_party/yaml-cpp/nodeevents.cpp	/^anchor_t NodeEvents::AliasManager::LookupAnchor($/;"	f	class:YAML::NodeEvents::AliasManager
LookupAnchor	src/3rd_party/yaml-cpp/singledocparser.cpp	/^anchor_t SingleDocParser::LookupAnchor(const Mark& mark,$/;"	f	class:YAML::SingleDocParser
Loop	src/gpu/tmp.h	/^struct Loop {$/;"	s	namespace:marian::gpu
Loop	src/gpu/tmp.h	/^struct Loop<1, N, K> {$/;"	s	namespace:marian::gpu
LowerCase	src/3rd_party/yaml-cpp/emittermanip.h	/^  LowerCase,      \/\/ f, yes$/;"	e	enum:YAML::EMITTER_MANIP
MAGENTA	src/3rd_party/spdlog/details/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
MAGENTA	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	e	enum:Color
MAP	src/3rd_party/yaml-cpp/scanner.h	/^    enum INDENT_TYPE { MAP, SEQ, NONE };$/;"	e	enum:YAML::Scanner::IndentMarker::INDENT_TYPE
MAP_KEY	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const MAP_KEY = "illegal map key";$/;"	m	namespace:YAML::ErrorMsg
MAP_VALUE	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const MAP_VALUE = "illegal map value";$/;"	m	namespace:YAML::ErrorMsg
MARK_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/mark.h	2;"	d
MAX	src/3rd_party/svd/defs_and_types.h	24;"	d
MAXHIST	src/3rd_party/svd/defs_and_types.h	28;"	d
MAXINT	src/3rd_party/svd/defs_and_types.h	26;"	d
MAX_BLOCKS	src/kernels/tensor_operators.h	/^const int MAX_BLOCKS = 65535;$/;"	m	namespace:marian
MAX_EPOCHS	src/examples/iris/iris.cpp	/^const size_t MAX_EPOCHS = 200;$/;"	v
MAX_PACKED_ARGS	src/3rd_party/spdlog/details/format.h	/^        MAX_PACKED_ARGS = 16$/;"	e	enum:fmt::ArgList::__anon31
MAX_PACKED_ARGS	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    enum { MAX_PACKED_ARGS = 16 };$/;"	e	enum:fmt::ArgList::__anon68
MAX_THREADS	src/kernels/tensor_operators.h	/^const int MAX_THREADS = 512;$/;"	m	namespace:marian
MAX_VOCAB_SIZE	src/translator/nth_element.h	/^  const int MAX_VOCAB_SIZE = 100000;$/;"	m	class:marian::NthElement
MBYTE	src/tensors/tensor_allocator.h	/^  const size_t MBYTE = 1024 * 1024;$/;"	m	class:marian::TensorAllocator
MIN	src/3rd_party/svd/defs_and_types.h	23;"	d
MINUS_FLAG	src/3rd_party/spdlog/details/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon32
MINUS_FLAG	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon69
MLP	src/layers/constructors.h	/^  MLP(Ptr<ExpressionGraph> graph, Ptr<Options> options)$/;"	f	class:marian::mlp::MLP
MLP	src/layers/constructors.h	/^class MLP {$/;"	c	namespace:marian::mlp
MLPFactory	src/layers/constructors.h	/^  MLPFactory(Ptr<ExpressionGraph> graph) : Factory(graph) {}$/;"	f	class:marian::mlp::MLPFactory
MLPFactory	src/layers/constructors.h	/^class MLPFactory : public Factory {$/;"	c	namespace:marian::mlp
MNISTData	src/examples/mnist/dataset.h	/^  MNISTData(std::vector<std::string> paths,$/;"	f	class:marian::data::MNISTData
MNISTData	src/examples/mnist/dataset.h	/^class MNISTData : public Dataset {$/;"	c	namespace:marian::data
MULTIPLE_ALIASES	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const MULTIPLE_ALIASES =$/;"	m	namespace:YAML::ErrorMsg
MULTIPLE_ANCHORS	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const MULTIPLE_ANCHORS =$/;"	m	namespace:YAML::ErrorMsg
MULTIPLE_TAGS	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const MULTIPLE_TAGS =$/;"	m	namespace:YAML::ErrorMsg
M_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class M_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
MakeArg	src/3rd_party/spdlog/details/format.h	/^    MakeArg()$/;"	f	class:fmt::internal::MakeArg
MakeArg	src/3rd_party/spdlog/details/format.h	/^    MakeArg(const T &value)$/;"	f	class:fmt::internal::MakeArg
MakeArg	src/3rd_party/spdlog/details/format.h	/^class MakeArg: public Arg$/;"	c	namespace:fmt::internal
MakeArg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    MakeArg()$/;"	f	class:fmt::internal::MakeArg
MakeArg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    MakeArg(const T &value)$/;"	f	class:fmt::internal::MakeArg
MakeArg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class MakeArg : public Arg$/;"	c	namespace:fmt::internal
MakeRelativePathsInFlagsAbsolute	contrib/vim/.ycm_extra_conf.py	/^def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):$/;"	f
MakeTemp	src/common/file_stream.h	/^  int MakeTemp(const std::string& base) {$/;"	f	class:TemporaryFile
MakeTypedKeyNotFound	src/3rd_party/yaml-cpp/exceptions.h	/^inline TypedKeyNotFound<T> MakeTypedKeyNotFound(const Mark& mark,$/;"	f	namespace:YAML
MakeUnsigned	src/3rd_party/spdlog/details/format.h	/^struct MakeUnsigned$/;"	s	namespace:fmt::internal
MakeUnsigned	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct MakeUnsigned$/;"	s	namespace:fmt::internal
MakeValue	src/3rd_party/spdlog/details/format.h	/^    MakeValue()$/;"	f	class:fmt::internal::MakeValue
MakeValue	src/3rd_party/spdlog/details/format.h	/^    MakeValue(const NamedArg<Char_> &value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	src/3rd_party/spdlog/details/format.h	/^    MakeValue(const T &value,$/;"	f	class:fmt::internal::MakeValue
MakeValue	src/3rd_party/spdlog/details/format.h	/^    MakeValue(long value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	src/3rd_party/spdlog/details/format.h	/^    MakeValue(typename WCharHelper<wchar_t, Char>::Supported value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	src/3rd_party/spdlog/details/format.h	/^    MakeValue(unsigned long value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	src/3rd_party/spdlog/details/format.h	/^class MakeValue: public Arg$/;"	c	namespace:fmt::internal
MakeValue	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    MakeValue() {}$/;"	f	class:fmt::internal::MakeValue
MakeValue	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    MakeValue(const NamedArg<Char_> &value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    MakeValue(const T &value,$/;"	f	class:fmt::internal::MakeValue
MakeValue	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    MakeValue(long value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    MakeValue(typename WCharHelper<wchar_t, Char>::Supported value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    MakeValue(unsigned long value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class MakeValue : public Arg$/;"	c	namespace:fmt::internal
Map	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  typedef typename Impl::Map Map;$/;"	t	class:YAML::GraphBuilder
Map	src/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { NoType, Seq, Map };$/;"	e	enum:YAML::GroupType::value
Map	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  enum value { None, Sequence, Map };$/;"	e	enum:YAML::detail::iterator_type::value
Map	src/3rd_party/yaml-cpp/node/type.h	/^  enum value { Undefined, Null, Scalar, Sequence, Map };$/;"	e	enum:YAML::NodeType::value
MapComplete	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void MapComplete(void *pMap) { (void)pMap; }$/;"	f	class:YAML::GraphBuilderInterface
MapComplete	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void MapComplete(void *pMap) { m_impl.MapComplete(AsMap(pMap)); }$/;"	f	class:YAML::GraphBuilder
MapIter	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typedef typename node_iterator_type<V>::map MapIter;$/;"	t	class:YAML::detail::node_iterator_base
MapType	src/3rd_party/spdlog/details/format.h	/^    typedef std::vector<std::pair<fmt::BasicStringRef<Char>, internal::Arg> > MapType;$/;"	t	class:fmt::internal::ArgMap
MapType	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::pair<fmt::BasicStringRef<Char>, internal::Arg> > MapType;$/;"	t	class:fmt::internal::ArgMap
Mark	src/3rd_party/yaml-cpp/mark.h	/^  Mark() : pos(0), line(0), column(0) {}$/;"	f	struct:YAML::Mark
Mark	src/3rd_party/yaml-cpp/mark.h	/^  Mark(int pos_, int line_, int column_)$/;"	f	struct:YAML::Mark
Mark	src/3rd_party/yaml-cpp/mark.h	/^struct YAML_CPP_API Mark {$/;"	s	namespace:YAML
Mark	src/3rd_party/yaml-cpp/node/impl.h	/^inline Mark Node::Mark() const {$/;"	f	class:YAML::Node
MaskBatch	src/data/corpus.cpp	/^typedef std::vector<float> MaskBatch;$/;"	t	namespace:marian::data	file:
Match	src/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::Match(const Source& source) const {$/;"	f	class:YAML::RegEx
Match	src/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::Match(const Stream& in) const {$/;"	f	class:YAML::RegEx
Match	src/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::Match(const std::string& str) const {$/;"	f	class:YAML::RegEx
MatchAllOf	src/3rd_party/catch.hpp	/^        struct MatchAllOf : MatcherBase<ArgT> {$/;"	s	namespace:Catch::Matchers::Impl
MatchAnyOf	src/3rd_party/catch.hpp	/^        struct MatchAnyOf : MatcherBase<ArgT> {$/;"	s	namespace:Catch::Matchers::Impl
MatchNotOf	src/3rd_party/catch.hpp	/^            MatchNotOf( MatcherBase<ArgT> const& underlyingMatcher ) : m_underlyingMatcher( underlyingMatcher ) {}$/;"	f	struct:Catch::Matchers::Impl::MatchNotOf
MatchNotOf	src/3rd_party/catch.hpp	/^        struct MatchNotOf : MatcherBase<ArgT> {$/;"	s	namespace:Catch::Matchers::Impl
MatchOpAnd	src/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchOpAnd(const Source& source) const {$/;"	f	class:YAML::RegEx
MatchOpEmpty	src/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchOpEmpty(const Source& source) const {$/;"	f	class:YAML::RegEx
MatchOpEmpty	src/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchOpEmpty<StringCharSource>($/;"	f	class:YAML::RegEx
MatchOpMatch	src/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchOpMatch(const Source& source) const {$/;"	f	class:YAML::RegEx
MatchOpNot	src/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchOpNot(const Source& source) const {$/;"	f	class:YAML::RegEx
MatchOpOr	src/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchOpOr(const Source& source) const {$/;"	f	class:YAML::RegEx
MatchOpRange	src/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchOpRange(const Source& source) const {$/;"	f	class:YAML::RegEx
MatchOpSeq	src/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchOpSeq(const Source& source) const {$/;"	f	class:YAML::RegEx
MatchUnchecked	src/3rd_party/yaml-cpp/regeximpl.h	/^inline int RegEx::MatchUnchecked(const Source& source) const {$/;"	f	class:YAML::RegEx
MatcherBase	src/3rd_party/catch.hpp	/^        struct MatcherBase : MatcherUntypedBase, MatcherMethod<ObjectT> {$/;"	s	namespace:Catch::Matchers::Impl
MatcherMethod	src/3rd_party/catch.hpp	/^        struct MatcherMethod {$/;"	s	namespace:Catch::Matchers::Impl
MatcherMethod	src/3rd_party/catch.hpp	/^        struct MatcherMethod<PtrT*> {$/;"	s	namespace:Catch::Matchers::Impl
MatcherUntypedBase	src/3rd_party/catch.hpp	/^        class MatcherUntypedBase {$/;"	c	namespace:Catch::Matchers::Impl
Matchers	src/3rd_party/catch.hpp	/^namespace Matchers {$/;"	n	namespace:Catch
Matches	src/3rd_party/yaml-cpp/regeximpl.h	/^inline bool RegEx::Matches(char ch) const {$/;"	f	class:YAML::RegEx
Matches	src/3rd_party/yaml-cpp/regeximpl.h	/^inline bool RegEx::Matches(const Source& source) const {$/;"	f	class:YAML::RegEx
Matches	src/3rd_party/yaml-cpp/regeximpl.h	/^inline bool RegEx::Matches(const Stream& in) const { return Match(in) >= 0; }$/;"	f	class:YAML::RegEx
Matches	src/3rd_party/yaml-cpp/regeximpl.h	/^inline bool RegEx::Matches(const std::string& str) const {$/;"	f	class:YAML::RegEx
MeanInTime	src/models/experimental/pooling.h	/^Expr MeanInTime(Ptr<ExpressionGraph> graph, Expr x, int k) {$/;"	f	namespace:marian
MeanNodeOp	src/graph/node_operators_unary.h	/^  MeanNodeOp(Expr a, Args... args)$/;"	f	struct:marian::MeanNodeOp
MeanNodeOp	src/graph/node_operators_unary.h	/^struct MeanNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
MeasurePeakDuringLogWrites	src/3rd_party/spdlog/bench/latency/g3log-latency.cpp	/^void MeasurePeakDuringLogWrites(const size_t id, std::vector<uint64_t>& result)$/;"	f	namespace:__anon76
MeasurePeakDuringLogWrites	src/3rd_party/spdlog/bench/latency/spdlog-latency.cpp	/^void MeasurePeakDuringLogWrites(const size_t id, std::vector<uint64_t>& result)$/;"	f	namespace:__anon75
MemoryBuffer	src/3rd_party/spdlog/details/format.h	/^    MemoryBuffer(MemoryBuffer &&other)$/;"	f	class:fmt::internal::MemoryBuffer
MemoryBuffer	src/3rd_party/spdlog/details/format.h	/^    explicit MemoryBuffer(const Allocator &alloc = Allocator())$/;"	f	class:fmt::internal::MemoryBuffer
MemoryBuffer	src/3rd_party/spdlog/details/format.h	/^class MemoryBuffer: private Allocator, public Buffer<T>$/;"	c	namespace:fmt::internal
MemoryBuffer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    MemoryBuffer(MemoryBuffer &&other)$/;"	f	class:fmt::internal::MemoryBuffer
MemoryBuffer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    explicit MemoryBuffer(const Allocator &alloc = Allocator())$/;"	f	class:fmt::internal::MemoryBuffer
MemoryBuffer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class MemoryBuffer : private Allocator, public Buffer<T>$/;"	c	namespace:fmt::internal
MemoryPiece	src/tensors/memory_piece.h	/^  MemoryPiece(uint8_t* data, size_t size) : data_(data), size_(size) {}$/;"	f	class:marian::MemoryPiece
MemoryPiece	src/tensors/memory_piece.h	/^class MemoryPiece {$/;"	c	namespace:marian
MemoryWriter	src/3rd_party/spdlog/details/format.h	/^typedef BasicMemoryWriter<char> MemoryWriter;$/;"	t
MemoryWriter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef BasicMemoryWriter<char> MemoryWriter;$/;"	t
Message	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    class Message : public std::istream {$/;"	c	class:SimpleWeb::SocketServerBase
MethodTestCase	src/3rd_party/catch.hpp	/^    MethodTestCase( void (C::*method)() ) : m_method( method ) {}$/;"	f	class:Catch::MethodTestCase
MethodTestCase	src/3rd_party/catch.hpp	/^class MethodTestCase : public SharedImpl<ITestCase> {$/;"	c	namespace:Catch
MethodTestCase	src/3rd_party/spdlog/tests/catch.hpp	/^    MethodTestCase( void (C::*method)() ) : m_method( method ) {}$/;"	f	class:Catch::MethodTestCase
MethodTestCase	src/3rd_party/spdlog/tests/catch.hpp	/^class MethodTestCase : public SharedImpl<ITestCase> {$/;"	c	namespace:Catch
MinusNodeOp	src/graph/node_operators_binary.h	/^  MinusNodeOp(Args... args) : ElementBinaryNodeOp(args...) {}$/;"	f	struct:marian::MinusNodeOp
MinusNodeOp	src/graph/node_operators_binary.h	/^struct MinusNodeOp : public ElementBinaryNodeOp {$/;"	s	namespace:marian
MnistFeedForwardNet	src/examples/mnist/model.h	/^  MnistFeedForwardNet(Ptr<Options> options, Args... args)$/;"	f	class:marian::models::MnistFeedForwardNet
MnistFeedForwardNet	src/examples/mnist/model.h	/^class MnistFeedForwardNet : public ModelBase {$/;"	c	namespace:marian::models
MnistLeNet	src/examples/mnist/model_lenet.h	/^  MnistLeNet(Ptr<Options> options, Args... args)$/;"	f	class:marian::models::MnistLeNet
MnistLeNet	src/examples/mnist/model_lenet.h	/^class MnistLeNet : public MnistFeedForwardNet {$/;"	c	namespace:marian::models
ModelBase	src/models/model_base.h	/^class ModelBase {$/;"	c	namespace:marian::models
ModelServiceTask	src/models/model_task.h	/^struct ModelServiceTask {$/;"	s	namespace:marian
ModelTask	src/models/model_task.h	/^struct ModelTask {$/;"	s	namespace:marian
MultNodeOp	src/graph/node_operators_binary.h	/^  MultNodeOp(Args... args) : ElementBinaryNodeOp(args...) {}$/;"	f	struct:marian::MultNodeOp
MultNodeOp	src/graph/node_operators_binary.h	/^struct MultNodeOp : public ElementBinaryNodeOp {$/;"	s	namespace:marian
MultiCellInput	src/rnn/types.h	/^  MultiCellInput(const std::vector<Ptr<CellInput>>& inputs,$/;"	f	class:marian::rnn::MultiCellInput
MultiCellInput	src/rnn/types.h	/^class MultiCellInput : public CellInput {$/;"	c	namespace:marian::rnn
MultiHead	src/models/transformer.h	/^  Expr MultiHead(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::Transformer
Multiplicative	src/rnn/cells.h	/^  Multiplicative(Ptr<ExpressionGraph> graph, Ptr<Options> options)$/;"	f	class:marian::rnn::Multiplicative
Multiplicative	src/rnn/cells.h	/^class Multiplicative : public CellType {$/;"	c	namespace:marian::rnn
NAMED_ARG	src/3rd_party/spdlog/details/format.h	/^        NONE, NAMED_ARG,$/;"	e	enum:fmt::internal::Value::Type
NAMED_ARG	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        NONE, NAMED_ARG,$/;"	e	enum:fmt::internal::Value::Type
NAMED_HANDLE	src/3rd_party/yaml-cpp/tag.h	/^    NAMED_HANDLE,$/;"	e	enum:YAML::Tag::TYPE
NBest	src/translator/history.h	/^  NBestList NBest(size_t n) const {$/;"	f	class:marian::History
NBestList	src/translator/hypothesis.h	/^typedef std::vector<Result> NBestList;$/;"	t	namespace:marian
NEMATUS_LN_EPS	src/common/definitions.h	/^const float NEMATUS_LN_EPS = 1e-5;$/;"	m	namespace:marian
NODE_CONVERT_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/node/convert.h	2;"	d
NODE_DETAIL_BOOL_TYPE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/node/detail/bool_type.h	2;"	d
NODE_DETAIL_IMPL_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/node/detail/impl.h	2;"	d
NODE_DETAIL_NODE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/node/detail/node.h	2;"	d
NODE_EMIT_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/node/emit.h	2;"	d
NODE_IMPL_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/node/impl.h	2;"	d
NODE_NODEBUILDER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/nodebuilder.h	2;"	d
NODE_NODEEVENTS_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/nodeevents.h	2;"	d
NODE_NODE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/node/node.h	2;"	d
NOMINMAX	src/3rd_party/catch.hpp	6334;"	d
NOMINMAX	src/3rd_party/catch.hpp	6347;"	d
NOMINMAX	src/3rd_party/spdlog/details/format.cc	47;"	d	file:
NOMINMAX	src/3rd_party/spdlog/details/format.cc	49;"	d	file:
NOMINMAX	src/3rd_party/spdlog/details/os.h	17;"	d
NOMINMAX	src/3rd_party/spdlog/include/spdlog/details/os.h	24;"	d
NOMINMAX	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	47;"	d	file:
NOMINMAX	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	49;"	d	file:
NOMINMAX	src/3rd_party/spdlog/tests/catch.hpp	6279;"	d
NONCOPYABLE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/noncopyable.h	2;"	d
NONE	src/3rd_party/spdlog/details/format.h	/^        NONE, NAMED_ARG,$/;"	e	enum:fmt::internal::Value::Type
NONE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        NONE, NAMED_ARG,$/;"	e	enum:fmt::internal::Value::Type
NONE	src/3rd_party/yaml-cpp/scanner.h	/^    enum INDENT_TYPE { MAP, SEQ, NONE };$/;"	e	enum:YAML::Scanner::IndentMarker::INDENT_TYPE
NONE	src/3rd_party/yaml-cpp/scanscalar.h	/^enum ACTION { NONE, BREAK, THROW };$/;"	e	enum:YAML::ACTION
NON_PLAIN_SCALAR	src/3rd_party/yaml-cpp/token.h	/^    NON_PLAIN_SCALAR$/;"	e	enum:YAML::Token::TYPE
NON_SPECIFIC	src/3rd_party/yaml-cpp/tag.h	/^    NON_SPECIFIC$/;"	e	enum:YAML::Tag::TYPE
NULL_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/null.h	2;"	d
NUM_BLOCKS	src/translator/nth_element.h	/^  const int NUM_BLOCKS;$/;"	m	class:marian::NthElement
NUM_FEATURES	src/examples/iris/helper.cpp	/^const int NUM_FEATURES = 4;$/;"	v
NUM_LABELS	src/examples/iris/helper.cpp	/^const int NUM_LABELS = 3;$/;"	v
NameAndDesc	src/3rd_party/catch.hpp	/^    NameAndDesc( const char* _name = "", const char* _description= "" )$/;"	f	struct:Catch::NameAndDesc
NameAndDesc	src/3rd_party/catch.hpp	/^struct NameAndDesc {$/;"	s	namespace:Catch
NameAndDesc	src/3rd_party/spdlog/tests/catch.hpp	/^    NameAndDesc( const char* _name = "", const char* _description= "" )$/;"	f	struct:Catch::NameAndDesc
NameAndDesc	src/3rd_party/spdlog/tests/catch.hpp	/^struct NameAndDesc {$/;"	s	namespace:Catch
NamedArg	src/3rd_party/spdlog/details/format.h	/^    NamedArg(BasicStringRef<Char> argname, const T &value)$/;"	f	struct:fmt::internal::NamedArg
NamedArg	src/3rd_party/spdlog/details/format.h	/^struct NamedArg: Arg$/;"	s	namespace:fmt::internal
NamedArg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    NamedArg(BasicStringRef<Char> argname, const T &value)$/;"	f	struct:fmt::internal::NamedArg
NamedArg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct NamedArg : Arg$/;"	s	namespace:fmt::internal
NamedHandle	src/3rd_party/yaml-cpp/emittermanip.h	/^    enum value { Verbatim, PrimaryHandle, NamedHandle };$/;"	e	enum:YAML::_Tag::Type::value
NaryNodeOp	src/graph/node.h	/^  NaryNodeOp(const std::vector<Expr>& nodes, Args... args)$/;"	f	struct:marian::NaryNodeOp
NaryNodeOp	src/graph/node.h	/^struct NaryNodeOp : public Node {$/;"	s	namespace:marian
NegNodeOp	src/graph/node_operators_unary.h	/^  NegNodeOp(Args... args) : UnaryNodeOp(args...) {}$/;"	f	struct:marian::NegNodeOp
NegNodeOp	src/graph/node_operators_unary.h	/^struct NegNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
Nematus	src/models/nematus.h	/^  Nematus(Ptr<Options> options)$/;"	f	class:marian::Nematus
Nematus	src/models/nematus.h	/^class Nematus : public EncoderDecoder {$/;"	c	namespace:marian
New	src/common/definitions.h	/^Ptr<T> New(Args&&... args) {$/;"	f	namespace:marian
New	src/common/definitions.h	/^Ptr<T> New(Ptr<T> p) {$/;"	f	namespace:marian
NewMap	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void *NewMap(const Mark &mark, const std::string &tag,$/;"	f	class:YAML::GraphBuilder
NewNull	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void *NewNull(const Mark &mark, void *pParentNode) {$/;"	f	class:YAML::GraphBuilder
NewScalar	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void *NewScalar(const Mark &mark, const std::string &tag,$/;"	f	class:YAML::GraphBuilder
NewSequence	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void *NewSequence(const Mark &mark, const std::string &tag,$/;"	f	class:YAML::GraphBuilder
Newline	src/3rd_party/yaml-cpp/emittermanip.h	/^  Newline,$/;"	e	enum:YAML::EMITTER_MANIP
NextGroupType	src/3rd_party/yaml-cpp/emitterstate.cpp	/^EmitterNodeType::value EmitterState::NextGroupType($/;"	f	class:YAML::EmitterState
No	src/3rd_party/catch.hpp	/^        No$/;"	e	enum:Catch::CaseSensitive::Choice
No	src/3rd_party/spdlog/details/format.h	/^typedef char No[2];$/;"	t	namespace:fmt::internal
No	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef char No[2];$/;"	t	namespace:fmt::internal
NoCollection	src/3rd_party/yaml-cpp/collectionstack.h	/^  enum value { NoCollection, BlockMap, BlockSeq, FlowMap, FlowSeq, CompactMap };$/;"	e	enum:YAML::CollectionType::value
NoThousandsSep	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct NoThousandsSep$/;"	s	namespace:fmt::internal
NoType	src/3rd_party/yaml-cpp/emitterdef.h	/^  enum value { NoType, Property, Scalar, FlowSeq, BlockSeq, FlowMap, BlockMap };$/;"	e	enum:YAML::EmitterNodeType::value
NoType	src/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { NoType, Flow, Block };$/;"	e	enum:YAML::FlowType::value
NoType	src/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { NoType, Seq, Map };$/;"	e	enum:YAML::GroupType::value
Node	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  typedef typename Impl::Node Node;$/;"	t	class:YAML::GraphBuilder
Node	src/3rd_party/yaml-cpp/node/impl.h	/^inline Node::Node() : m_isValid(true), m_pNode(NULL) {}$/;"	f	class:YAML::Node
Node	src/3rd_party/yaml-cpp/node/impl.h	/^inline Node::Node(NodeType::value type)$/;"	f	class:YAML::Node
Node	src/3rd_party/yaml-cpp/node/impl.h	/^inline Node::Node(Zombie) : m_isValid(false), m_pNode(NULL) {}$/;"	f	class:YAML::Node
Node	src/3rd_party/yaml-cpp/node/impl.h	/^inline Node::Node(const Node& rhs)$/;"	f	class:YAML::Node
Node	src/3rd_party/yaml-cpp/node/impl.h	/^inline Node::Node(const T& rhs)$/;"	f	class:YAML::Node
Node	src/3rd_party/yaml-cpp/node/impl.h	/^inline Node::Node(const detail::iterator_value& rhs)$/;"	f	class:YAML::Node
Node	src/3rd_party/yaml-cpp/node/impl.h	/^inline Node::Node(detail::node& node, detail::shared_memory_holder pMemory)$/;"	f	class:YAML::Node
Node	src/3rd_party/yaml-cpp/node/node.h	/^class YAML_CPP_API Node {$/;"	c	namespace:YAML
Node	src/graph/node.h	/^  Node(Ptr<ExpressionGraph> graph, Args... args)$/;"	f	class:marian::Node
Node	src/graph/node.h	/^class Node : public Chainable<Tensor>,$/;"	c	namespace:marian
NodeBuilder	src/3rd_party/yaml-cpp/nodebuilder.cpp	/^NodeBuilder::NodeBuilder()$/;"	f	class:YAML::NodeBuilder
NodeBuilder	src/3rd_party/yaml-cpp/nodebuilder.h	/^class NodeBuilder : public EventHandler {$/;"	c	namespace:YAML
NodeEvents	src/3rd_party/yaml-cpp/nodeevents.cpp	/^NodeEvents::NodeEvents(const Node& node)$/;"	f	class:YAML::NodeEvents
NodeEvents	src/3rd_party/yaml-cpp/nodeevents.h	/^class NodeEvents {$/;"	c	namespace:YAML
NodeOp	src/common/definitions.h	12;"	d
NodeOp	src/graph/chainable.h	15;"	d
NodeOps	src/graph/chainable.h	/^typedef std::vector<std::function<void()>> NodeOps;$/;"	t	namespace:marian
NodeType	src/3rd_party/yaml-cpp/emitterstate.h	/^    EmitterNodeType::value NodeType() const {$/;"	f	struct:YAML::EmitterState::Group
NodeType	src/3rd_party/yaml-cpp/node/type.h	/^struct NodeType {$/;"	s	namespace:YAML
Nodes	src/3rd_party/yaml-cpp/node/detail/memory.h	/^  typedef std::set<shared_node> Nodes;$/;"	t	class:YAML::detail::memory
Nodes	src/3rd_party/yaml-cpp/nodebuilder.h	/^  typedef std::vector<detail::node*> Nodes;$/;"	t	class:YAML::NodeBuilder
NonCopyable	src/3rd_party/catch.hpp	/^        NonCopyable() {}$/;"	f	class:Catch::NonCopyable
NonCopyable	src/3rd_party/catch.hpp	/^    class NonCopyable {$/;"	c	namespace:Catch
NonCopyable	src/3rd_party/spdlog/tests/catch.hpp	/^        NonCopyable() {}$/;"	f	class:Catch::NonCopyable
NonCopyable	src/3rd_party/spdlog/tests/catch.hpp	/^    class NonCopyable {$/;"	c	namespace:Catch
None	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  enum value { None, Sequence, Map };$/;"	e	enum:YAML::detail::iterator_type::value
Norm	src/optimizers/clippers.h	/^  Norm(float c = 1.0) : c_(c) {}$/;"	f	class:marian::Norm
Norm	src/optimizers/clippers.h	/^class Norm : public ClipperBase {$/;"	c	namespace:marian
Normal	src/3rd_party/catch.hpp	/^        Normal = 0x01,$/;"	e	enum:Catch::ResultDisposition::Flags
Normal	src/3rd_party/spdlog/tests/catch.hpp	/^        Normal = 0x00,$/;"	e	enum:Catch::ResultDisposition::Flags
NormalizeTempPrefix	src/common/file_stream.h	/^  void NormalizeTempPrefix(std::string& base) {$/;"	f	class:TemporaryFile
Not	src/3rd_party/catch.hpp	/^    inline Impl::MatchNotOf<T> Not( Impl::MatcherBase<T> const& underlyingMatcher ) {$/;"	f	namespace:Catch::Matchers
Not	src/3rd_party/spdlog/details/format.h	/^struct Not$/;"	s	namespace:fmt::internal
Not	src/3rd_party/spdlog/details/format.h	/^struct Not<false>$/;"	s	namespace:fmt::internal
Not	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct Not$/;"	s	namespace:fmt::internal
Not	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct Not<false>$/;"	s	namespace:fmt::internal
NotImplementedException	src/3rd_party/catch.hpp	/^        NotImplementedException( NotImplementedException const& ) {}$/;"	f	class:Catch::NotImplementedException
NotImplementedException	src/3rd_party/catch.hpp	/^    class NotImplementedException : public std::exception$/;"	c	namespace:Catch
NotImplementedException	src/3rd_party/spdlog/tests/catch.hpp	/^        NotImplementedException( NotImplementedException const& ) {}$/;"	f	class:Catch::NotImplementedException
NotImplementedException	src/3rd_party/spdlog/tests/catch.hpp	/^    class NotImplementedException : public std::exception$/;"	c	namespace:Catch
NotPrintable	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& NotPrintable() {$/;"	f	namespace:YAML::Exp
NpyArray	src/3rd_party/cnpy/cnpy.h	/^    struct NpyArray {$/;"	s	namespace:cnpy
NpyMatrixWrapper	src/data/npz_converter.h	/^    NpyMatrixWrapper(const cnpy::NpyArray& npy) : npy_(npy) {}$/;"	f	class:NpzConverter::NpyMatrixWrapper
NpyMatrixWrapper	src/data/npz_converter.h	/^  class NpyMatrixWrapper {$/;"	c	class:NpzConverter
NpzConverter	src/data/npz_converter.cpp	/^NpzConverter::NpzConverter(const std::string& file)$/;"	f	class:NpzConverter
NpzConverter	src/data/npz_converter.h	/^  NpzConverter(const std::string& file)$/;"	f	class:NpzConverter
NpzConverter	src/data/npz_converter.h	/^class NpzConverter {$/;"	c
NthElement	src/translator/nth_element.h	/^class NthElement {$/;"	c	namespace:marian
Null	src/3rd_party/spdlog/details/format.h	/^struct Null$/;"	s	namespace:fmt::internal
Null	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct Null {};$/;"	s	namespace:fmt::internal
Null	src/3rd_party/yaml-cpp/node/type.h	/^  enum value { Undefined, Null, Scalar, Sequence, Map };$/;"	e	enum:YAML::NodeType::value
Null	src/3rd_party/yaml-cpp/null.cpp	/^_Null Null;$/;"	m	namespace:YAML	file:
NullAnchor	src/3rd_party/yaml-cpp/anchor.h	/^const anchor_t NullAnchor = 0;$/;"	m	namespace:YAML
OC_TEST_CASE	src/3rd_party/catch.hpp	3473;"	d
OC_TEST_CASE	src/3rd_party/spdlog/tests/catch.hpp	2784;"	d
OSTREAM_WRAPPER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/ostream_wrapper.h	2;"	d
O_CREAT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	27;"	d	file:
O_TRUNC	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	28;"	d	file:
Oct	src/3rd_party/yaml-cpp/emittermanip.h	/^  Oct,$/;"	e	enum:YAML::EMITTER_MANIP
OfType	src/3rd_party/catch.hpp	/^    struct ResultWas { enum OfType {$/;"	g	struct:Catch::ResultWas
OfType	src/3rd_party/spdlog/tests/catch.hpp	/^    struct ResultWas { enum OfType {$/;"	g	struct:Catch::ResultWas
Ok	src/3rd_party/catch.hpp	/^        Ok = 0,$/;"	e	enum:Catch::ResultWas::OfType
Ok	src/3rd_party/spdlog/tests/catch.hpp	/^        Ok = 0,$/;"	e	enum:Catch::ResultWas::OfType
OnAlias	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::OnAlias(const Mark &mark, anchor_t anchor) {$/;"	f	class:YAML::GraphBuilderAdapter
OnAlias	src/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnAlias(const Mark&, anchor_t anchor) {$/;"	f	class:YAML::EmitFromEvents
OnAlias	src/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnAlias(const Mark& \/* mark *\/, anchor_t anchor) {$/;"	f	class:YAML::NodeBuilder
OnDocumentEnd	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  virtual void OnDocumentEnd() {}$/;"	f	class:YAML::GraphBuilderAdapter
OnDocumentEnd	src/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnDocumentEnd() {}$/;"	f	class:YAML::EmitFromEvents
OnDocumentEnd	src/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnDocumentEnd() {}$/;"	f	class:YAML::NodeBuilder
OnDocumentStart	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  virtual void OnDocumentStart(const Mark& mark) { (void)mark; }$/;"	f	class:YAML::GraphBuilderAdapter
OnDocumentStart	src/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnDocumentStart(const Mark&) {}$/;"	f	class:YAML::EmitFromEvents
OnDocumentStart	src/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnDocumentStart(const Mark&) {}$/;"	f	class:YAML::NodeBuilder
OnMapEnd	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::OnMapEnd() {$/;"	f	class:YAML::GraphBuilderAdapter
OnMapEnd	src/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnMapEnd() {$/;"	f	class:YAML::EmitFromEvents
OnMapEnd	src/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnMapEnd() {$/;"	f	class:YAML::NodeBuilder
OnMapStart	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::OnMapStart(const Mark &mark, const std::string &tag,$/;"	f	class:YAML::GraphBuilderAdapter
OnMapStart	src/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnMapStart(const Mark&, const std::string& tag,$/;"	f	class:YAML::EmitFromEvents
OnMapStart	src/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnMapStart(const Mark& mark, const std::string& tag,$/;"	f	class:YAML::NodeBuilder
OnNull	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::OnNull(const Mark &mark, anchor_t anchor) {$/;"	f	class:YAML::GraphBuilderAdapter
OnNull	src/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnNull(const Mark&, anchor_t anchor) {$/;"	f	class:YAML::EmitFromEvents
OnNull	src/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnNull(const Mark& mark, anchor_t anchor) {$/;"	f	class:YAML::NodeBuilder
OnOffBool	src/3rd_party/yaml-cpp/emittermanip.h	/^  OnOffBool,      \/\/ on, off$/;"	e	enum:YAML::EMITTER_MANIP
OnScalar	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::OnScalar(const Mark &mark, const std::string &tag,$/;"	f	class:YAML::GraphBuilderAdapter
OnScalar	src/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnScalar(const Mark&, const std::string& tag,$/;"	f	class:YAML::EmitFromEvents
OnScalar	src/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnScalar(const Mark& mark, const std::string& tag,$/;"	f	class:YAML::NodeBuilder
OnSequenceEnd	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::OnSequenceEnd() {$/;"	f	class:YAML::GraphBuilderAdapter
OnSequenceEnd	src/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnSequenceEnd() {$/;"	f	class:YAML::EmitFromEvents
OnSequenceEnd	src/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnSequenceEnd() { Pop(); }$/;"	f	class:YAML::NodeBuilder
OnSequenceStart	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::OnSequenceStart(const Mark &mark,$/;"	f	class:YAML::GraphBuilderAdapter
OnSequenceStart	src/3rd_party/yaml-cpp/emitfromevents.cpp	/^void EmitFromEvents::OnSequenceStart(const Mark&, const std::string& tag,$/;"	f	class:YAML::EmitFromEvents
OnSequenceStart	src/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::OnSequenceStart(const Mark& mark, const std::string& tag,$/;"	f	class:YAML::NodeBuilder
Operator	src/3rd_party/catch.hpp	/^    enum Operator {$/;"	g	namespace:Catch::Internal
Operator	src/3rd_party/spdlog/tests/catch.hpp	/^    enum Operator {$/;"	g	namespace:Catch::Internal
OperatorTraits	src/3rd_party/catch.hpp	/^    template<> struct OperatorTraits<IsEqualTo>             { static const char* getName(){ return "=="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	src/3rd_party/catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThan>         { static const char* getName(){ return ">"; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	src/3rd_party/catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThanOrEqualTo>{ static const char* getName(){ return ">="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	src/3rd_party/catch.hpp	/^    template<> struct OperatorTraits<IsLessThan>            { static const char* getName(){ return "<"; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	src/3rd_party/catch.hpp	/^    template<> struct OperatorTraits<IsLessThanOrEqualTo>   { static const char* getName(){ return "<="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	src/3rd_party/catch.hpp	/^    template<> struct OperatorTraits<IsNotEqualTo>          { static const char* getName(){ return "!="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	src/3rd_party/catch.hpp	/^    template<Operator Op> struct OperatorTraits             { static const char* getName(){ return "*error*"; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	src/3rd_party/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsEqualTo>             { static const char* getName(){ return "=="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	src/3rd_party/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThan>         { static const char* getName(){ return ">"; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	src/3rd_party/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThanOrEqualTo>{ static const char* getName(){ return ">="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	src/3rd_party/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsLessThan>            { static const char* getName(){ return "<"; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	src/3rd_party/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsLessThanOrEqualTo>   { static const char* getName(){ return "<="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	src/3rd_party/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsNotEqualTo>          { static const char* getName(){ return "!="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op> struct OperatorTraits             { static const char* getName(){ return "*error*"; } };$/;"	s	namespace:Catch::Internal
Optimizer	src/optimizers/optimizers.h	/^Ptr<OptimizerBase> Optimizer(float eta,$/;"	f	namespace:marian
OptimizerBase	src/optimizers/optimizers.h	/^  OptimizerBase(float eta, Ptr<ClipperBase> clipper = nullptr)$/;"	f	class:marian::OptimizerBase
OptimizerBase	src/optimizers/optimizers.h	/^class OptimizerBase : public TrainingObserver {$/;"	c	namespace:marian
OptimizerBasePtr	src/common/definitions.h	/^typedef Ptr<OptimizerBase> OptimizerBasePtr;$/;"	t	namespace:marian
Options	src/common/options.h	/^class Options {$/;"	c	namespace:marian
OutputCollector	src/translator/output_collector.cpp	/^OutputCollector::OutputCollector()$/;"	f	class:marian::OutputCollector
OutputCollector	src/translator/output_collector.h	/^  OutputCollector(T&& arg) : nextId_(0), outStrm_(new OutputFileStream(arg)) {}$/;"	f	class:marian::OutputCollector
OutputCollector	src/translator/output_collector.h	/^class OutputCollector {$/;"	c	namespace:marian
OutputFileStream	src/common/file_stream.h	/^  OutputFileStream(TemporaryFile& tempfile)$/;"	f	class:OutputFileStream
OutputFileStream	src/common/file_stream.h	/^  OutputFileStream(const std::string& file) : file_(file), ofstream_(file_) {$/;"	f	class:OutputFileStream
OutputFileStream	src/common/file_stream.h	/^  OutputFileStream(std::ostream& strm) { ostream_.push(strm, 0); }$/;"	f	class:OutputFileStream
OutputFileStream	src/common/file_stream.h	/^class OutputFileStream {$/;"	c
OutputYaml	src/common/config_parser.cpp	/^void OutputYaml(const YAML::Node node, YAML::Emitter& out) {$/;"	f	namespace:marian
Outputs	src/rescorer/score_collector.h	/^  typedef std::map<long, float> Outputs;$/;"	t	class:marian::ScoreCollector
Outputs	src/translator/output_collector.h	/^  typedef std::map<long, std::pair<std::string, std::string>> Outputs;$/;"	t	class:marian::OutputCollector
Outputs	src/translator/output_collector.h	/^  typedef std::map<long, std::pair<std::string, std::string>> Outputs;$/;"	t	class:marian::StringCollector
OverflowException	src/3rd_party/exception.cpp	/^OverflowException::OverflowException() throw() {}$/;"	f	class:util::OverflowException
OverflowException	src/3rd_party/exception.h	/^class OverflowException : public Exception {$/;"	c	namespace:util
PARSER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/parser.h	2;"	d
PATHS	src/common/config_parser.cpp	/^const std::set<std::string> PATHS = {"model",$/;"	m	namespace:marian	file:
PLAIN_SCALAR	src/3rd_party/yaml-cpp/token.h	/^    PLAIN_SCALAR,$/;"	e	enum:YAML::Token::TYPE
PLUS_FLAG	src/3rd_party/spdlog/details/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon32
PLUS_FLAG	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon69
POINTER	src/3rd_party/spdlog/details/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
POINTER	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
POWERS_OF_10_32	src/3rd_party/spdlog/details/format.cc	/^const uint32_t fmt::internal::BasicData<T>::POWERS_OF_10_32[] = {$/;"	m	class:fmt::internal::BasicData	file:
POWERS_OF_10_32	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^const uint32_t fmt::internal::BasicData<T>::POWERS_OF_10_32[] = {$/;"	m	class:fmt::internal::BasicData	file:
POWERS_OF_10_64	src/3rd_party/spdlog/details/format.cc	/^const uint64_t fmt::internal::BasicData<T>::POWERS_OF_10_64[] = {$/;"	m	class:fmt::internal::BasicData	file:
POWERS_OF_10_64	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^const uint64_t fmt::internal::BasicData<T>::POWERS_OF_10_64[] = {$/;"	m	class:fmt::internal::BasicData	file:
PRECISION1	src/3rd_party/svd/defs_and_types.h	20;"	d
PRECISION2	src/3rd_party/svd/defs_and_types.h	21;"	d
PRIMARY_HANDLE	src/3rd_party/yaml-cpp/tag.h	/^    PRIMARY_HANDLE,$/;"	e	enum:YAML::Tag::TYPE
PROJECT_VERSION	src/common/version.h	11;"	d
PROJECT_VERSION_FULL	src/common/version.h	9;"	d
PROJECT_VERSION_MAJOR	src/common/version.h	12;"	d
PROJECT_VERSION_MINOR	src/common/version.h	13;"	d
PROJECT_VERSION_PATCH	src/common/version.h	14;"	d
PROJ_DIM	src/3rd_party/svd/defs_and_types.h	32;"	d
PReLU	src/layers/generic.h	/^enum struct act : int { linear, tanh, logit, ReLU, LeakyReLU, PReLU, swish };$/;"	m	struct:marian::mlp::act
PReLUNodeOp	src/graph/node_operators_unary.h	/^  PReLUNodeOp(float alpha, Args... args)$/;"	f	struct:marian::PReLUNodeOp
PReLUNodeOp	src/graph/node_operators_unary.h	/^struct PReLUNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
PTR_VECTOR_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/ptr_vector.h	2;"	d
PYTHAG	src/3rd_party/svd/svd.cpp	/^static double PYTHAG(double a, double b)$/;"	f	file:
Pair	src/3rd_party/spdlog/details/format.h	/^    typedef typename MapType::value_type Pair;$/;"	t	class:fmt::internal::ArgMap
Pair	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef typename MapType::value_type Pair;$/;"	t	class:fmt::internal::ArgMap
ParamNode	src/graph/node_operators.h	/^  ParamNode(Args... args)$/;"	f	struct:marian::ParamNode
ParamNode	src/graph/node_operators.h	/^struct ParamNode : public Node {$/;"	s	namespace:marian
Parameters	src/graph/parameters.h	/^class Parameters {$/;"	c	namespace:marian
ParseAnchor	src/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::ParseAnchor(anchor_t& anchor) {$/;"	f	class:YAML::SingleDocParser
ParseDirectives	src/3rd_party/yaml-cpp/parser.cpp	/^void Parser::ParseDirectives() {$/;"	f	class:YAML::Parser
ParseHex	src/3rd_party/yaml-cpp/exp.cpp	/^unsigned ParseHex(const std::string& str, const Mark& mark) {$/;"	f	namespace:YAML::Exp
ParseProperties	src/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::ParseProperties(std::string& tag, anchor_t& anchor) {$/;"	f	class:YAML::SingleDocParser
ParseTag	src/3rd_party/yaml-cpp/singledocparser.cpp	/^void SingleDocParser::ParseTag(std::string& tag) {$/;"	f	class:YAML::SingleDocParser
Parser	src/3rd_party/yaml-cpp/parser.cpp	/^Parser::Parser() {}$/;"	f	class:YAML::Parser
Parser	src/3rd_party/yaml-cpp/parser.cpp	/^Parser::Parser(std::istream& in) { Load(in); }$/;"	f	class:YAML::Parser
Parser	src/3rd_party/yaml-cpp/parser.h	/^class YAML_CPP_API Parser : private noncopyable {$/;"	c	namespace:YAML
ParserException	src/3rd_party/yaml-cpp/exceptions.h	/^  ParserException(const Mark& mark_, const std::string& msg_)$/;"	f	class:YAML::ParserException
ParserException	src/3rd_party/yaml-cpp/exceptions.h	/^class YAML_CPP_API ParserException : public Exception {$/;"	c	namespace:YAML
Percent	src/3rd_party/simple-websocket-server/utility.hpp	/^  class Percent {$/;"	c	namespace:SimpleWeb
Plain	src/3rd_party/yaml-cpp/emitterutils.h	/^  enum value { Plain, SingleQuoted, DoubleQuoted, Literal };$/;"	e	enum:YAML::StringFormat::value
PlainScalar	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& PlainScalar() {$/;"	f	namespace:YAML::Exp
PlainScalarInFlow	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& PlainScalarInFlow() {$/;"	f	namespace:YAML::Exp
PlusNodeOp	src/graph/node_operators_binary.h	/^  PlusNodeOp(Args... args) : ElementBinaryNodeOp(args...) {}$/;"	f	struct:marian::PlusNodeOp
PlusNodeOp	src/graph/node_operators_binary.h	/^struct PlusNodeOp : public ElementBinaryNodeOp {$/;"	s	namespace:marian
Point	src/data/corpus.h	/^  typedef std::pair<int, int> Point;$/;"	t	class:marian::data::WordAlignment
Point	src/tools/align2steps.cpp	/^typedef std::pair<int, int> Point;$/;"	t	file:
Pooling	src/models/experimental/pooling.h	/^typedef EncoderDecoder<EncoderPooling, DecoderS2S> Pooling;$/;"	t	namespace:marian
PoolingOp	src/graph/node_operators_unary.h	/^  PoolingOp(Expr x,$/;"	f	class:marian::PoolingOp
PoolingOp	src/graph/node_operators_unary.h	/^class PoolingOp : public UnaryNodeOp {$/;"	c	namespace:marian
PoolingWithMaskingOp	src/graph/node_operators_unary.h	/^    PoolingWithMaskingOp( Expr x, Expr mask, int width, bool isEven=false)$/;"	f	class:marian::PoolingWithMaskingOp
PoolingWithMaskingOp	src/graph/node_operators_unary.h	/^class PoolingWithMaskingOp : public UnaryNodeOp {$/;"	c	namespace:marian
PoolingWrapper	src/kernels/cudnn_wrappers.h	/^class PoolingWrapper : public CUDNNWrapper {$/;"	c	namespace:marian
Pop	src/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::Pop() {$/;"	f	class:YAML::NodeBuilder
PopAllIndents	src/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::PopAllIndents() {$/;"	f	class:YAML::Scanner
PopAllSimpleKeys	src/3rd_party/yaml-cpp/simplekey.cpp	/^void Scanner::PopAllSimpleKeys() {$/;"	f	class:YAML::Scanner
PopCollectionType	src/3rd_party/yaml-cpp/collectionstack.h	/^  void PopCollectionType(CollectionType::value type) {$/;"	f	class:YAML::CollectionStack
PopIndent	src/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::PopIndent() {$/;"	f	class:YAML::Scanner
PopIndentToHere	src/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::PopIndentToHere() {$/;"	f	class:YAML::Scanner
PostProcess	src/models/transformer.h	/^  Expr PostProcess(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::Transformer
PreProcess	src/models/transformer.h	/^  Expr PreProcess(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::Transformer
Precision	src/3rd_party/yaml-cpp/emittermanip.h	/^inline _Precision Precision(int n) { return _Precision(n, n); }$/;"	f	namespace:YAML
PrecisionHandler	src/3rd_party/spdlog/details/format.cc	/^		class PrecisionHandler:$/;"	c	namespace:fmt::__anon34	file:
PrecisionHandler	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^class PrecisionHandler : public ArgVisitor<PrecisionHandler, int> {$/;"	c	namespace:fmt::__anon71	file:
PrepareIntegralStream	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::PrepareIntegralStream(std::stringstream& stream) const {$/;"	f	class:YAML::Emitter
PrepareNode	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::PrepareNode(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
PrepareTopNode	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::PrepareTopNode(EmitterNodeType::value child) {$/;"	f	class:YAML::Emitter
PrimaryHandle	src/3rd_party/yaml-cpp/emittermanip.h	/^    enum value { Verbatim, PrimaryHandle, NamedHandle };$/;"	e	enum:YAML::_Tag::Type::value
PrintResults	src/3rd_party/spdlog/bench/latency/g3log-latency.cpp	/^void PrintResults(const std::map<size_t, std::vector<uint64_t>>& threads_result, size_t total_us)$/;"	f	namespace:__anon76
PrintResults	src/3rd_party/spdlog/bench/latency/spdlog-latency.cpp	/^void PrintResults(const std::map<size_t, std::vector<uint64_t>>& threads_result, size_t total_us)$/;"	f	namespace:__anon75
PrintTokens	src/3rd_party/yaml-cpp/parser.cpp	/^void Parser::PrintTokens(std::ostream& out) {$/;"	f	class:YAML::Parser
Printer	src/translator/printer.h	/^void Printer(Ptr<Config> options,$/;"	f	namespace:marian
PrintfArgFormatter	src/3rd_party/spdlog/details/format.cc	/^			PrintfArgFormatter(BasicWriter<Char> &w, FormatSpec &s)$/;"	f	class:fmt::internal::PrintfArgFormatter
PrintfArgFormatter	src/3rd_party/spdlog/details/format.cc	/^		class PrintfArgFormatter:$/;"	c	namespace:fmt::internal	file:
PrintfArgFormatter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  PrintfArgFormatter(BasicWriter<Char> &w, FormatSpec &s)$/;"	f	class:fmt::internal::PrintfArgFormatter
PrintfArgFormatter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^class PrintfArgFormatter :$/;"	c	namespace:fmt::internal	file:
PrintfFormatter	src/3rd_party/spdlog/details/format.h	/^    explicit PrintfFormatter(const ArgList &args): FormatterBase(args)$/;"	f	class:fmt::internal::PrintfFormatter
PrintfFormatter	src/3rd_party/spdlog/details/format.h	/^class PrintfFormatter: private FormatterBase$/;"	c	namespace:fmt::internal
PrintfFormatter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    explicit PrintfFormatter(const ArgList &args) : FormatterBase(args) {}$/;"	f	class:fmt::internal::PrintfFormatter
PrintfFormatter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class PrintfFormatter : private FormatterBase$/;"	c	namespace:fmt::internal
PrintingStrategy	src/translator/output_collector.h	/^class PrintingStrategy {$/;"	c	namespace:marian
ProcessPaths	src/common/config_parser.cpp	/^void ProcessPaths(YAML::Node& node,$/;"	f	namespace:marian
Property	src/3rd_party/yaml-cpp/emitterdef.h	/^  enum value { NoType, Property, Scalar, FlowSeq, BlockSeq, FlowMap, BlockMap };$/;"	e	enum:YAML::EmitterNodeType::value
Proxy	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    struct Proxy$/;"	s	class:fmt::BufferedFile
Proxy	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    struct Proxy$/;"	s	class:fmt::File
Ptr	src/3rd_party/catch.hpp	/^        Ptr( Ptr const& other ) : m_p( other.m_p ){$/;"	f	class:Catch::Ptr
Ptr	src/3rd_party/catch.hpp	/^        Ptr( T* p ) : m_p( p ){$/;"	f	class:Catch::Ptr
Ptr	src/3rd_party/catch.hpp	/^        Ptr() : m_p( CATCH_NULL ){}$/;"	f	class:Catch::Ptr
Ptr	src/3rd_party/catch.hpp	/^    class Ptr {$/;"	c	namespace:Catch
Ptr	src/3rd_party/spdlog/tests/catch.hpp	/^        Ptr( Ptr const& other ) : m_p( other.m_p ){$/;"	f	class:Catch::Ptr
Ptr	src/3rd_party/spdlog/tests/catch.hpp	/^        Ptr( T* p ) : m_p( p ){$/;"	f	class:Catch::Ptr
Ptr	src/3rd_party/spdlog/tests/catch.hpp	/^        Ptr() : m_p( NULL ){}$/;"	f	class:Catch::Ptr
Ptr	src/3rd_party/spdlog/tests/catch.hpp	/^    class Ptr {$/;"	c	namespace:Catch
Push	src/3rd_party/yaml-cpp/nodebuilder.cpp	/^detail::node& NodeBuilder::Push(const Mark& mark, anchor_t anchor) {$/;"	f	class:YAML::NodeBuilder
Push	src/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::Push(detail::node& node) {$/;"	f	class:YAML::NodeBuilder
PushCollectionType	src/3rd_party/yaml-cpp/collectionstack.h	/^  void PushCollectionType(CollectionType::value type) {$/;"	f	class:YAML::CollectionStack
PushIndentTo	src/3rd_party/yaml-cpp/scanner.cpp	/^Scanner::IndentMarker* Scanner::PushIndentTo(int column,$/;"	f	class:YAML::Scanner
PushToken	src/3rd_party/yaml-cpp/scanner.cpp	/^Token* Scanner::PushToken(Token::TYPE type) {$/;"	f	class:YAML::Scanner
PushedKey	src/3rd_party/yaml-cpp/nodebuilder.h	/^  typedef std::pair<detail::node*, bool> PushedKey;$/;"	t	class:YAML::NodeBuilder
QueryString	src/3rd_party/simple-websocket-server/utility.hpp	/^  class QueryString {$/;"	c	namespace:SimpleWeb
QueueUnicodeCodepoint	src/3rd_party/yaml-cpp/stream.cpp	/^inline void QueueUnicodeCodepoint(std::deque<char>& q, unsigned long ch) {$/;"	f	namespace:YAML
QuietPrinting	src/translator/output_collector.h	/^class QuietPrinting : public PrintingStrategy {$/;"	c	namespace:marian
RDONLY	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^        RDONLY = FMT_POSIX(O_RDONLY), \/\/ Open for reading only.$/;"	e	enum:fmt::File::__anon41
RDWR	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^        RDWR   = FMT_POSIX(O_RDWR)    \/\/ Open for reading and writing.$/;"	e	enum:fmt::File::__anon41
RED	src/3rd_party/spdlog/details/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
RED	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	e	enum:Color
RED	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    const WORD RED = FOREGROUND_RED;$/;"	m	class:spdlog::sinks::wincolor_sink
REGEXIMPL_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/regeximpl.h	2;"	d
REGEX_AND	src/3rd_party/yaml-cpp/regex_yaml.h	/^  REGEX_AND,$/;"	e	enum:YAML::REGEX_OP
REGEX_EMPTY	src/3rd_party/yaml-cpp/regex_yaml.h	/^  REGEX_EMPTY,$/;"	e	enum:YAML::REGEX_OP
REGEX_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/regex_yaml.h	2;"	d
REGEX_MATCH	src/3rd_party/yaml-cpp/regex_yaml.h	/^  REGEX_MATCH,$/;"	e	enum:YAML::REGEX_OP
REGEX_NOT	src/3rd_party/yaml-cpp/regex_yaml.h	/^  REGEX_NOT,$/;"	e	enum:YAML::REGEX_OP
REGEX_OP	src/3rd_party/yaml-cpp/regex_yaml.h	/^enum REGEX_OP {$/;"	g	namespace:YAML
REGEX_OR	src/3rd_party/yaml-cpp/regex_yaml.h	/^  REGEX_OR,$/;"	e	enum:YAML::REGEX_OP
REGEX_RANGE	src/3rd_party/yaml-cpp/regex_yaml.h	/^  REGEX_RANGE,$/;"	e	enum:YAML::REGEX_OP
REGEX_SEQ	src/3rd_party/yaml-cpp/regex_yaml.h	/^  REGEX_SEQ$/;"	e	enum:YAML::REGEX_OP
REPEATED_TAG_DIRECTIVE	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const REPEATED_TAG_DIRECTIVE = "repeated TAG directive";$/;"	m	namespace:YAML::ErrorMsg
REPEATED_YAML_DIRECTIVE	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const REPEATED_YAML_DIRECTIVE = "repeated YAML directive";$/;"	m	namespace:YAML::ErrorMsg
REPLACEMENT_CHARACTER	src/3rd_party/yaml-cpp/emitterutils.cpp	/^enum { REPLACEMENT_CHARACTER = 0xFFFD };$/;"	e	enum:YAML::Utils::__anon77::__anon78	file:
RESET_COLOR	src/3rd_party/spdlog/details/format.cc	/^		const char RESET_COLOR[] = "\\x1b[0m";$/;"	m	namespace:fmt::__anon34	file:
RESET_COLOR	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^const char RESET_COLOR[] = "\\x1b[0m";$/;"	m	namespace:fmt::__anon71	file:
RNN	src/rnn/rnn.h	/^  RNN(Ptr<ExpressionGraph> graph, Ptr<Options> options)$/;"	f	class:marian::rnn::RNN
RNN	src/rnn/rnn.h	/^class RNN : public BaseRNN, public std::enable_shared_from_this<RNN> {$/;"	c	namespace:marian::rnn
RNNFactory	src/rnn/constructors.h	/^  RNNFactory(Ptr<ExpressionGraph> graph) : Factory(graph) {}$/;"	f	class:marian::rnn::RNNFactory
RNNFactory	src/rnn/constructors.h	/^class RNNFactory : public Factory {$/;"	c	namespace:marian::rnn
RPL_ID	src/data/types.h	/^const Word RPL_ID = 5;$/;"	m	namespace:marian
RPL_STR	src/data/types.h	/^const std::string RPL_STR = "<r>";$/;"	m	namespace:marian
RWResult	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	/^typedef int RWResult;$/;"	t	namespace:__anon43	file:
R_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class R_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
ReLU	src/layers/generic.h	/^enum struct act : int { linear, tanh, logit, ReLU, LeakyReLU, PReLU, swish };$/;"	m	struct:marian::mlp::act
ReLUNodeOp	src/graph/node_operators_unary.h	/^  ReLUNodeOp(Args... args) : UnaryNodeOp(args...) {}$/;"	f	struct:marian::ReLUNodeOp
ReLUNodeOp	src/graph/node_operators_unary.h	/^struct ReLUNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
ReadAheadTo	src/3rd_party/yaml-cpp/stream.h	/^inline bool Stream::ReadAheadTo(size_t i) const {$/;"	f	class:YAML::Stream
ReadBuffer	src/3rd_party/yaml-cpp/stream.cpp	/^inline char* ReadBuffer(unsigned char* pBuffer) {$/;"	f	namespace:YAML
ReadImages	src/examples/mnist/dataset.h	/^  std::vector<Data> ReadImages(const std::string &full_path) {$/;"	f	class:marian::data::MNISTData
ReadLabels	src/examples/mnist/dataset.h	/^  std::vector<Data> ReadLabels(const std::string &full_path) {$/;"	f	class:marian::data::MNISTData
Reduce	src/kernels/tensor_operators.h	/^void Reduce(Functor functor,$/;"	f	namespace:marian
ReduceAll	src/3rd_party/reduce_all.h	/^void ReduceAll(Functor f, Tensor out, Tensor in)$/;"	f	namespace:marian
RefCount	src/3rd_party/yaml-cpp/nodeevents.h	/^  typedef std::map<const detail::node_ref*, int> RefCount;$/;"	t	class:YAML::NodeEvents
RegEx	src/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx::RegEx() : m_op(REGEX_EMPTY) {}$/;"	f	class:YAML::RegEx
RegEx	src/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx::RegEx(REGEX_OP op) : m_op(op) {}$/;"	f	class:YAML::RegEx
RegEx	src/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx::RegEx(char a, char z) : m_op(REGEX_RANGE), m_a(a), m_z(z) {}$/;"	f	class:YAML::RegEx
RegEx	src/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx::RegEx(char ch) : m_op(REGEX_MATCH), m_a(ch) {}$/;"	f	class:YAML::RegEx
RegEx	src/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx::RegEx(const std::string& str, REGEX_OP op) : m_op(op) {$/;"	f	class:YAML::RegEx
RegEx	src/3rd_party/yaml-cpp/regex_yaml.h	/^class YAML_CPP_API RegEx {$/;"	c	namespace:YAML
Register	src/3rd_party/yaml-cpp/contrib/anchordict.h	/^  void Register(anchor_t anchor, T value) {$/;"	f	class:YAML::AnchorDict
RegisterAnchor	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^void GraphBuilderAdapter::RegisterAnchor(anchor_t anchor, void *pNode) {$/;"	f	class:YAML::GraphBuilderAdapter
RegisterAnchor	src/3rd_party/yaml-cpp/nodebuilder.cpp	/^void NodeBuilder::RegisterAnchor(anchor_t anchor, detail::node& node) {$/;"	f	class:YAML::NodeBuilder
RegisterAnchor	src/3rd_party/yaml-cpp/singledocparser.cpp	/^anchor_t SingleDocParser::RegisterAnchor(const std::string& name) {$/;"	f	class:YAML::SingleDocParser
RegisterReference	src/3rd_party/yaml-cpp/nodeevents.cpp	/^void NodeEvents::AliasManager::RegisterReference(const detail::node& node) {$/;"	f	class:YAML::NodeEvents::AliasManager
RepresentationException	src/3rd_party/yaml-cpp/exceptions.h	/^  RepresentationException(const Mark& mark_, const std::string& msg_)$/;"	f	class:YAML::RepresentationException
RepresentationException	src/3rd_party/yaml-cpp/exceptions.h	/^class YAML_CPP_API RepresentationException : public Exception {$/;"	c	namespace:YAML
RequestMessage	src/3rd_party/simple-websocket-server/utility.hpp	/^  class RequestMessage {$/;"	c	namespace:SimpleWeb
Rescore	src/rescorer/rescorer.h	/^  Rescore(Ptr<Config> options)$/;"	f	class:marian::Rescore
Rescore	src/rescorer/rescorer.h	/^class Rescore : public ModelTask {$/;"	c	namespace:marian
Rescorer	src/rescorer/rescorer.h	/^  Rescorer(Ptr<Options> options) : builder_(models::from_options(options)) {}$/;"	f	class:marian::Rescorer
Rescorer	src/rescorer/rescorer.h	/^class Rescorer {$/;"	c	namespace:marian
ResetColumn	src/3rd_party/yaml-cpp/stream.h	/^  void ResetColumn() { m_mark.column = 0; }$/;"	f	class:YAML::Stream
ReshapeNodeOp	src/graph/node_operators_unary.h	/^  ReshapeNodeOp(Expr a, Shape shape, Args... args)$/;"	f	class:marian::ReshapeNodeOp
ReshapeNodeOp	src/graph/node_operators_unary.h	/^class ReshapeNodeOp : public UnaryNodeOp {$/;"	c	namespace:marian
ResponseMessage	src/3rd_party/simple-websocket-server/utility.hpp	/^  class ResponseMessage {$/;"	c	namespace:SimpleWeb
Result	src/translator/hypothesis.h	/^typedef std::tuple<Words, Ptr<Hypothesis>, float> Result;$/;"	t	namespace:marian
ResultBuilder	src/3rd_party/catch.hpp	/^    class ResultBuilder : public DecomposedExpression {$/;"	c	namespace:Catch
ResultBuilder	src/3rd_party/spdlog/tests/catch.hpp	/^    class ResultBuilder {$/;"	c	namespace:Catch
ResultDisposition	src/3rd_party/catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	s	namespace:Catch
ResultDisposition	src/3rd_party/spdlog/tests/catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	s	namespace:Catch
ResultWas	src/3rd_party/catch.hpp	/^    struct ResultWas { enum OfType {$/;"	s	namespace:Catch
ResultWas	src/3rd_party/spdlog/tests/catch.hpp	/^    struct ResultWas { enum OfType {$/;"	s	namespace:Catch
Root	src/3rd_party/yaml-cpp/nodebuilder.cpp	/^Node NodeBuilder::Root() {$/;"	f	class:YAML::NodeBuilder
RootNode	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  void* RootNode() const { return m_pRootNode; }$/;"	f	class:YAML::GraphBuilderAdapter
RowsNodeOp	src/graph/node_operators_unary.h	/^  RowsNodeOp(Expr a, const std::vector<size_t>& indeces, Args... args)$/;"	f	struct:marian::RowsNodeOp
RowsNodeOp	src/graph/node_operators_unary.h	/^struct RowsNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
RunBasePtr	src/common/definitions.h	/^typedef Ptr<RunBase> RunBasePtr;$/;"	t	namespace:marian
RuntimeError	src/3rd_party/spdlog/details/format.h	/^    RuntimeError(): std::runtime_error("")$/;"	f	class:fmt::internal::RuntimeError
RuntimeError	src/3rd_party/spdlog/details/format.h	/^class RuntimeError: public std::runtime_error$/;"	c	namespace:fmt::internal
RuntimeError	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    RuntimeError() : std::runtime_error("") {}$/;"	f	class:fmt::internal::RuntimeError
RuntimeError	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class RuntimeError : public std::runtime_error$/;"	c	namespace:fmt::internal
S2S_SPECIAL_NODE	scripts/contrib/inject_model_params.py	/^S2S_SPECIAL_NODE = "special:model.yml"$/;"	v
SCANNER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/scanner.h	2;"	d
SCANSCALAR_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/scanscalar.h	2;"	d
SCANTAG_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/scantag.h	2;"	d
SCENARIO	src/3rd_party/catch.hpp	11493;"	d
SCENARIO	src/3rd_party/spdlog/tests/catch.hpp	9398;"	d
SCENARIO_METHOD	src/3rd_party/catch.hpp	11494;"	d
SCENARIO_METHOD	src/3rd_party/spdlog/tests/catch.hpp	9399;"	d
SECONDARY_HANDLE	src/3rd_party/yaml-cpp/tag.h	/^    SECONDARY_HANDLE,$/;"	e	enum:YAML::Tag::TYPE
SEQ	src/3rd_party/yaml-cpp/scanner.h	/^    enum INDENT_TYPE { MAP, SEQ, NONE };$/;"	e	enum:YAML::Scanner::IndentMarker::INDENT_TYPE
SERVER_WS_HPP	src/3rd_party/simple-websocket-server/server_ws.hpp	26;"	d
SETTING_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/setting.h	2;"	d
SET_OPTION	src/common/config_parser.cpp	13;"	d	file:
SET_OPTION_NONDEFAULT	src/common/config_parser.cpp	20;"	d	file:
SIGN	src/3rd_party/svd/defs_and_types.h	25;"	d
SIGN_FLAG	src/3rd_party/spdlog/details/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon32
SIGN_FLAG	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8,$/;"	e	enum:fmt::__anon69
SIMPLE_WEB_CRYPTO_HPP	src/3rd_party/simple-websocket-server/crypto.hpp	26;"	d
SIMPLE_WEB_STATUS_CODE_HPP	src/3rd_party/simple-websocket-server/status_code.hpp	26;"	d
SIMPLE_WEB_UTILITY_HPP	src/3rd_party/simple-websocket-server/utility.hpp	26;"	d
SINGLEDOCPARSER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/singledocparser.h	2;"	d
SINGLE_QUOTED_CHAR	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const SINGLE_QUOTED_CHAR =$/;"	m	namespace:YAML::ErrorMsg
SOURCE_EXTENSIONS	contrib/vim/.ycm_extra_conf.py	/^SOURCE_EXTENSIONS = [ '.cpp', '.cu' ]$/;"	v
SPDLOG_ANDROID_RETRIES	src/3rd_party/spdlog/include/spdlog/sinks/android_sink.h	19;"	d
SPDLOG_CONSTEXPR	src/3rd_party/spdlog/include/spdlog/common.h	26;"	d
SPDLOG_CONSTEXPR	src/3rd_party/spdlog/include/spdlog/common.h	29;"	d
SPDLOG_DEBUG	src/3rd_party/spdlog/include/spdlog/spdlog.h	178;"	d
SPDLOG_DEBUG	src/3rd_party/spdlog/include/spdlog/spdlog.h	181;"	d
SPDLOG_DEBUG	src/3rd_party/spdlog/spdlog.h	130;"	d
SPDLOG_DEBUG	src/3rd_party/spdlog/spdlog.h	132;"	d
SPDLOG_DEBUG_IF	src/3rd_party/spdlog/include/spdlog/spdlog.h	179;"	d
SPDLOG_DEBUG_ON	src/3rd_party/spdlog/example/example.cpp	11;"	d	file:
SPDLOG_DEBUG_ON	src/3rd_party/spdlog/example/jni/example.cpp	11;"	d	file:
SPDLOG_DEPRECATED	src/3rd_party/spdlog/include/spdlog/common.h	38;"	d
SPDLOG_DEPRECATED	src/3rd_party/spdlog/include/spdlog/common.h	40;"	d
SPDLOG_DEPRECATED	src/3rd_party/spdlog/include/spdlog/common.h	42;"	d
SPDLOG_EOL	src/3rd_party/spdlog/include/spdlog/details/os.h	137;"	d
SPDLOG_EOL	src/3rd_party/spdlog/include/spdlog/details/os.h	139;"	d
SPDLOG_FILENAME_T	src/3rd_party/spdlog/common.h	113;"	d
SPDLOG_FILENAME_T	src/3rd_party/spdlog/common.h	121;"	d
SPDLOG_FILENAME_T	src/3rd_party/spdlog/include/spdlog/details/os.h	358;"	d
SPDLOG_FILENAME_T	src/3rd_party/spdlog/include/spdlog/details/os.h	365;"	d
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/async_logger.h	/^class async_logger SPDLOG_FINAL :public logger$/;"	c	namespace:spdlog
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/common.h	34;"	d
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class A_formatter SPDLOG_FINAL :public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class B_formatter SPDLOG_FINAL :public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class C_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class D_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class F_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class H_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class I_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class M_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class R_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class S_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class T_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class Y_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class aggregate_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class c_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class ch_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class d_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class e_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class f_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class full_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class i_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class m_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class p_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class pid_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class r_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class t_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class v_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class z_formatter SPDLOG_FINAL:public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/formatter.h	/^class pattern_formatter SPDLOG_FINAL : public formatter$/;"	c	namespace:spdlog
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^class daily_file_sink SPDLOG_FINAL :public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^class rotating_file_sink SPDLOG_FINAL : public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^class simple_file_sink SPDLOG_FINAL : public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/sinks/stdout_sinks.h	/^class stderr_sink SPDLOG_FINAL : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
SPDLOG_FINAL	src/3rd_party/spdlog/include/spdlog/sinks/stdout_sinks.h	/^class stdout_sink SPDLOG_FINAL : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
SPDLOG_NOEXCEPT	src/3rd_party/spdlog/common.h	24;"	d
SPDLOG_NOEXCEPT	src/3rd_party/spdlog/common.h	26;"	d
SPDLOG_NOEXCEPT	src/3rd_party/spdlog/details/async_log_helper.h	/^async_msg(async_msg&& other) SPDLOG_NOEXCEPT:$/;"	m	struct:spdlog::details::async_log_helper::async_msg
SPDLOG_NOEXCEPT	src/3rd_party/spdlog/include/spdlog/common.h	25;"	d
SPDLOG_NOEXCEPT	src/3rd_party/spdlog/include/spdlog/common.h	28;"	d
SPDLOG_NOEXCEPT	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^async_msg(async_msg&& other) SPDLOG_NOEXCEPT:$/;"	m	struct:spdlog::details::async_log_helper::async_msg
SPDLOG_STR_H	src/3rd_party/spdlog/include/spdlog/spdlog.h	169;"	d
SPDLOG_STR_HELPER	src/3rd_party/spdlog/include/spdlog/spdlog.h	170;"	d
SPDLOG_TRACE	src/3rd_party/spdlog/include/spdlog/spdlog.h	171;"	d
SPDLOG_TRACE	src/3rd_party/spdlog/include/spdlog/spdlog.h	174;"	d
SPDLOG_TRACE	src/3rd_party/spdlog/spdlog.h	124;"	d
SPDLOG_TRACE	src/3rd_party/spdlog/spdlog.h	126;"	d
SPDLOG_TRACE_IF	src/3rd_party/spdlog/include/spdlog/spdlog.h	172;"	d
SPDLOG_TRACE_ON	src/3rd_party/spdlog/example/example.cpp	10;"	d	file:
SPDLOG_TRACE_ON	src/3rd_party/spdlog/example/jni/example.cpp	10;"	d	file:
SPDLOG_VERSION	src/3rd_party/spdlog/include/spdlog/spdlog.h	10;"	d
SPEC2SYM	src/data/types.h	/^const std::unordered_map<std::string, Word> SPEC2SYM = {$/;"	m	namespace:marian
STATUS	src/3rd_party/yaml-cpp/scanner.h	/^    enum STATUS { VALID, INVALID, UNKNOWN };$/;"	g	struct:YAML::Scanner::IndentMarker
STATUS	src/3rd_party/yaml-cpp/token.h	/^  enum STATUS { VALID, INVALID, UNVERIFIED };$/;"	g	struct:YAML::Token
STEP0	src/3rd_party/svd/defs_and_types.h	29;"	d
STITCH_CLARA_CLOSE_NAMESPACE	src/3rd_party/catch.hpp	4086;"	d
STITCH_CLARA_CLOSE_NAMESPACE	src/3rd_party/catch.hpp	5093;"	d
STITCH_CLARA_CLOSE_NAMESPACE	src/3rd_party/spdlog/tests/catch.hpp	3287;"	d
STITCH_CLARA_CLOSE_NAMESPACE	src/3rd_party/spdlog/tests/catch.hpp	4124;"	d
STITCH_CLARA_OPEN_NAMESPACE	src/3rd_party/catch.hpp	4075;"	d
STITCH_CLARA_OPEN_NAMESPACE	src/3rd_party/catch.hpp	4085;"	d
STITCH_CLARA_OPEN_NAMESPACE	src/3rd_party/catch.hpp	5092;"	d
STITCH_CLARA_OPEN_NAMESPACE	src/3rd_party/catch.hpp	5096;"	d
STITCH_CLARA_OPEN_NAMESPACE	src/3rd_party/spdlog/tests/catch.hpp	3278;"	d
STITCH_CLARA_OPEN_NAMESPACE	src/3rd_party/spdlog/tests/catch.hpp	3286;"	d
STITCH_CLARA_OPEN_NAMESPACE	src/3rd_party/spdlog/tests/catch.hpp	4123;"	d
STITCH_CLARA_OPEN_NAMESPACE	src/3rd_party/spdlog/tests/catch.hpp	4127;"	d
STITCH_TBC_TEXT_FORMAT_OPEN_NAMESPACE	src/3rd_party/catch.hpp	4091;"	d
STITCH_TBC_TEXT_FORMAT_OPEN_NAMESPACE	src/3rd_party/catch.hpp	4242;"	d
STITCH_TBC_TEXT_FORMAT_OPEN_NAMESPACE	src/3rd_party/spdlog/tests/catch.hpp	3292;"	d
STITCH_TBC_TEXT_FORMAT_OPEN_NAMESPACE	src/3rd_party/spdlog/tests/catch.hpp	3441;"	d
STLEMITTER_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/stlemitter.h	2;"	d
STP_ID	src/data/types.h	/^const Word STP_ID = 2;$/;"	m	namespace:marian
STP_STR	src/data/types.h	/^const std::string STP_STR = "<step>";$/;"	m	namespace:marian
STREAMCHARSOURCE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/streamcharsource.h	2;"	d
STREAM_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/stream.h	2;"	d
STRING	src/3rd_party/spdlog/details/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
STRING	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
STRINGSOURCE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/stringsource.h	2;"	d
STRIP	src/3rd_party/yaml-cpp/scanscalar.h	/^enum CHOMP { STRIP = -1, CLIP, KEEP };$/;"	e	enum:YAML::CHOMP
SYM2SPEC	src/data/types.h	/^const std::unordered_map<Word, std::string> SYM2SPEC = {$/;"	m	namespace:marian
S_ARRAY_END	src/3rd_party/yaml-cpp/stream.cpp	10;"	d	file:
S_ARRAY_SIZE	src/3rd_party/yaml-cpp/stream.cpp	9;"	d	file:
S_IRUSR	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	31;"	d	file:
S_IWUSR	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	35;"	d	file:
S_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class S_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
SafeBool	src/3rd_party/catch.hpp	/^    class SafeBool {$/;"	c	namespace:Catch
SafeBool	src/3rd_party/spdlog/tests/catch.hpp	/^    class SafeBool {$/;"	c	namespace:Catch
Scalar	src/3rd_party/yaml-cpp/emitterdef.h	/^  enum value { NoType, Property, Scalar, FlowSeq, BlockSeq, FlowMap, BlockMap };$/;"	e	enum:YAML::EmitterNodeType::value
Scalar	src/3rd_party/yaml-cpp/node/impl.h	/^inline const std::string& Node::Scalar() const {$/;"	f	class:YAML::Node
Scalar	src/3rd_party/yaml-cpp/node/type.h	/^  enum value { Undefined, Null, Scalar, Sequence, Map };$/;"	e	enum:YAML::NodeType::value
ScalarAddNodeOp	src/graph/node_operators_unary.h	/^  ScalarAddNodeOp(Expr a, float scalar, Args... args)$/;"	f	struct:marian::ScalarAddNodeOp
ScalarAddNodeOp	src/graph/node_operators_unary.h	/^struct ScalarAddNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
ScalarMultNodeOp	src/graph/node_operators_unary.h	/^  ScalarMultNodeOp(Expr a, float scalar, Args... args)$/;"	f	struct:marian::ScalarMultNodeOp
ScalarMultNodeOp	src/graph/node_operators_unary.h	/^struct ScalarMultNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
ScalarProductNodeOp	src/graph/node_operators_binary.h	/^  ScalarProductNodeOp(Expr a, Expr b, Args... args)$/;"	f	struct:marian::ScalarProductNodeOp
ScalarProductNodeOp	src/graph/node_operators_binary.h	/^struct ScalarProductNodeOp : public NaryNodeOp {$/;"	s	namespace:marian
ScanAnchorOrAlias	src/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanAnchorOrAlias() {$/;"	f	class:YAML::Scanner
ScanBlockEntry	src/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanBlockEntry() {$/;"	f	class:YAML::Scanner
ScanBlockScalar	src/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanBlockScalar() {$/;"	f	class:YAML::Scanner
ScanDirective	src/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanDirective() {$/;"	f	class:YAML::Scanner
ScanDocEnd	src/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanDocEnd() {$/;"	f	class:YAML::Scanner
ScanDocStart	src/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanDocStart() {$/;"	f	class:YAML::Scanner
ScanFlowEnd	src/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanFlowEnd() {$/;"	f	class:YAML::Scanner
ScanFlowEntry	src/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanFlowEntry() {$/;"	f	class:YAML::Scanner
ScanFlowStart	src/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanFlowStart() {$/;"	f	class:YAML::Scanner
ScanKey	src/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanKey() {$/;"	f	class:YAML::Scanner
ScanNextToken	src/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::ScanNextToken() {$/;"	f	class:YAML::Scanner
ScanPlainScalar	src/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanPlainScalar() {$/;"	f	class:YAML::Scanner
ScanQuotedScalar	src/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanQuotedScalar() {$/;"	f	class:YAML::Scanner
ScanScalar	src/3rd_party/yaml-cpp/scanscalar.cpp	/^std::string ScanScalar(Stream& INPUT, ScanScalarParams& params) {$/;"	f	namespace:YAML
ScanScalarEnd	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& ScanScalarEnd() {$/;"	f	namespace:YAML::Exp
ScanScalarEndInFlow	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& ScanScalarEndInFlow() {$/;"	f	namespace:YAML::Exp
ScanScalarParams	src/3rd_party/yaml-cpp/scanscalar.h	/^  ScanScalarParams()$/;"	f	struct:YAML::ScanScalarParams
ScanScalarParams	src/3rd_party/yaml-cpp/scanscalar.h	/^struct ScanScalarParams {$/;"	s	namespace:YAML
ScanTag	src/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanTag() {$/;"	f	class:YAML::Scanner
ScanTagHandle	src/3rd_party/yaml-cpp/scantag.cpp	/^const std::string ScanTagHandle(Stream& INPUT, bool& canBeHandle) {$/;"	f	namespace:YAML
ScanTagSuffix	src/3rd_party/yaml-cpp/scantag.cpp	/^const std::string ScanTagSuffix(Stream& INPUT) {$/;"	f	namespace:YAML
ScanToNextToken	src/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::ScanToNextToken() {$/;"	f	class:YAML::Scanner
ScanValue	src/3rd_party/yaml-cpp/scantoken.cpp	/^void Scanner::ScanValue() {$/;"	f	class:YAML::Scanner
ScanVerbatimTag	src/3rd_party/yaml-cpp/scantag.cpp	/^const std::string ScanVerbatimTag(Stream& INPUT) {$/;"	f	namespace:YAML
Scanner	src/3rd_party/yaml-cpp/scanner.cpp	/^Scanner::Scanner(std::istream& in)$/;"	f	class:YAML::Scanner
Scanner	src/3rd_party/yaml-cpp/scanner.h	/^class Scanner {$/;"	c	namespace:YAML
Scheduler	src/training/scheduler.h	/^  Scheduler(Ptr<Config> options, Ptr<TrainingState> state)$/;"	f	class:marian::Scheduler
Scheduler	src/training/scheduler.h	/^class Scheduler : public TrainingObserver {$/;"	c	namespace:marian
ScopeRunner	src/3rd_party/simple-websocket-server/utility.hpp	/^  class ScopeRunner {$/;"	c	namespace:SimpleWeb
ScoreCollector	src/rescorer/score_collector.cpp	/^ScoreCollector::ScoreCollector()$/;"	f	class:marian::ScoreCollector
ScoreCollector	src/rescorer/score_collector.h	/^class ScoreCollector {$/;"	c	namespace:marian
Scorer	src/translator/scorers.h	/^  Scorer(const std::string& name, float weight)$/;"	f	class:marian::Scorer
Scorer	src/translator/scorers.h	/^class Scorer {$/;"	c	namespace:marian
ScorerState	src/translator/scorers.h	/^class ScorerState {$/;"	c	namespace:marian
ScorerWrapper	src/translator/scorers.h	/^  ScorerWrapper(Ptr<models::ModelBase> encdec,$/;"	f	class:marian::ScorerWrapper
ScorerWrapper	src/translator/scorers.h	/^class ScorerWrapper : public Scorer {$/;"	c	namespace:marian
ScorerWrapperState	src/translator/scorers.h	/^  ScorerWrapperState(Ptr<DecoderState> state) : state_(state) {}$/;"	f	class:marian::ScorerWrapperState
ScorerWrapperState	src/translator/scorers.h	/^class ScorerWrapperState : public ScorerState {$/;"	c	namespace:marian
ScriptValidator	src/training/validator.h	/^  ScriptValidator(std::vector<Ptr<Vocab>> vocabs, Ptr<Config> options)$/;"	f	class:marian::ScriptValidator
ScriptValidator	src/training/validator.h	/^class ScriptValidator : public Validator<data::Corpus> {$/;"	c	namespace:marian
SecondaryTag	src/3rd_party/yaml-cpp/emittermanip.h	/^inline _Tag SecondaryTag(const std::string content) {$/;"	f	namespace:YAML
Select	src/functional/operands.h	/^    struct Select {$/;"	s	namespace:marian::functional
Select	src/functional/operands.h	/^    struct Select<0> {$/;"	s	namespace:marian::functional
SelectNodeOp	src/graph/node_operators_unary.h	/^  SelectNodeOp(Expr a, int axis, const std::vector<size_t>& indeces)$/;"	f	struct:marian::SelectNodeOp
SelectNodeOp	src/graph/node_operators_unary.h	/^struct SelectNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
SendData	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      class SendData {$/;"	c	class:SimpleWeb::SocketServerBase::Connection
SendStream	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    class SendStream : public std::ostream {$/;"	c	class:SimpleWeb::SocketServerBase
SentBatch	src/data/corpus.cpp	/^typedef std::vector<WordMask> SentBatch;$/;"	t	namespace:marian::data	file:
SentenceTuple	src/data/corpus.h	/^  SentenceTuple(size_t id) : id_(id) {}$/;"	f	class:marian::data::SentenceTuple
SentenceTuple	src/data/corpus.h	/^class SentenceTuple {$/;"	c	namespace:marian::data
Seq	src/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { NoType, Seq, Map };$/;"	e	enum:YAML::GroupType::value
SeqIter	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typedef typename node_iterator_type<V>::seq SeqIter;$/;"	t	class:YAML::detail::node_iterator_base
Sequence	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  typedef typename Impl::Sequence Sequence;$/;"	t	class:YAML::GraphBuilder
Sequence	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  enum value { None, Sequence, Map };$/;"	e	enum:YAML::detail::iterator_type::value
Sequence	src/3rd_party/yaml-cpp/node/type.h	/^  enum value { Undefined, Null, Scalar, Sequence, Map };$/;"	e	enum:YAML::NodeType::value
SequenceComplete	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void SequenceComplete(void *pSequence) { (void)pSequence; }$/;"	f	class:YAML::GraphBuilderInterface
SequenceComplete	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  virtual void SequenceComplete(void *pSequence) {$/;"	f	class:YAML::GraphBuilder
SetAnchor	src/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::SetAnchor() { m_hasAnchor = true; }$/;"	f	class:YAML::EmitterState
SetBoolCaseFormat	src/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetBoolCaseFormat(EMITTER_MANIP value,$/;"	f	class:YAML::EmitterState
SetBoolFormat	src/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetBoolFormat(EMITTER_MANIP value) {$/;"	f	class:YAML::Emitter
SetBoolFormat	src/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetBoolFormat(EMITTER_MANIP value, FmtScope::value scope) {$/;"	f	class:YAML::EmitterState
SetBoolLengthFormat	src/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetBoolLengthFormat(EMITTER_MANIP value,$/;"	f	class:YAML::EmitterState
SetDoublePrecision	src/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetDoublePrecision(std::size_t n) {$/;"	f	class:YAML::Emitter
SetDoublePrecision	src/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetDoublePrecision(std::size_t value,$/;"	f	class:YAML::EmitterState
SetError	src/3rd_party/yaml-cpp/emitterstate.h	/^  void SetError(const std::string& error) {$/;"	f	class:YAML::EmitterState
SetFloatPrecision	src/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetFloatPrecision(std::size_t n) {$/;"	f	class:YAML::Emitter
SetFloatPrecision	src/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetFloatPrecision(std::size_t value, FmtScope::value scope) {$/;"	f	class:YAML::EmitterState
SetFlowType	src/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetFlowType(GroupType::value groupType, EMITTER_MANIP value,$/;"	f	class:YAML::EmitterState
SetIndent	src/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetIndent(std::size_t n) {$/;"	f	class:YAML::Emitter
SetIndent	src/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetIndent(std::size_t value, FmtScope::value scope) {$/;"	f	class:YAML::EmitterState
SetIntBase	src/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetIntBase(EMITTER_MANIP value) {$/;"	f	class:YAML::Emitter
SetIntFormat	src/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetIntFormat(EMITTER_MANIP value, FmtScope::value scope) {$/;"	f	class:YAML::EmitterState
SetLocalIndent	src/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::SetLocalIndent(const _Indent& indent) {$/;"	f	class:YAML::Emitter
SetLocalPrecision	src/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::SetLocalPrecision(const _Precision& precision) {$/;"	f	class:YAML::Emitter
SetLocalValue	src/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::SetLocalValue(EMITTER_MANIP value) {$/;"	f	class:YAML::Emitter
SetLocalValue	src/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::SetLocalValue(EMITTER_MANIP value) {$/;"	f	class:YAML::EmitterState
SetLocation	src/3rd_party/exception.cpp	/^void Exception::SetLocation(const char *file, unsigned int line, const char *func, const char *child_name, const char *condition) {$/;"	f	class:util::Exception
SetLongKey	src/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::SetLongKey() {$/;"	f	class:YAML::EmitterState
SetMapFormat	src/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetMapFormat(EMITTER_MANIP value) {$/;"	f	class:YAML::Emitter
SetMapKeyFormat	src/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetMapKeyFormat(EMITTER_MANIP value, FmtScope::value scope) {$/;"	f	class:YAML::EmitterState
SetNonContent	src/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::SetNonContent() { m_hasNonContent = true; }$/;"	f	class:YAML::EmitterState
SetOutputCharset	src/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetOutputCharset(EMITTER_MANIP value) {$/;"	f	class:YAML::Emitter
SetOutputCharset	src/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetOutputCharset(EMITTER_MANIP value,$/;"	f	class:YAML::EmitterState
SetPostCommentIndent	src/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetPostCommentIndent(std::size_t n) {$/;"	f	class:YAML::Emitter
SetPostCommentIndent	src/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetPostCommentIndent(std::size_t value,$/;"	f	class:YAML::EmitterState
SetPreCommentIndent	src/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetPreCommentIndent(std::size_t n) {$/;"	f	class:YAML::Emitter
SetPreCommentIndent	src/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetPreCommentIndent(std::size_t value,$/;"	f	class:YAML::EmitterState
SetSeqFormat	src/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetSeqFormat(EMITTER_MANIP value) {$/;"	f	class:YAML::Emitter
SetStreamablePrecision	src/3rd_party/yaml-cpp/emitter.h	/^  void SetStreamablePrecision(std::stringstream&) {}$/;"	f	class:YAML::Emitter
SetStreamablePrecision	src/3rd_party/yaml-cpp/emitter.h	/^inline void Emitter::SetStreamablePrecision<double>(std::stringstream& stream) {$/;"	f	class:YAML::Emitter
SetStreamablePrecision	src/3rd_party/yaml-cpp/emitter.h	/^inline void Emitter::SetStreamablePrecision<float>(std::stringstream& stream) {$/;"	f	class:YAML::Emitter
SetStringFormat	src/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::SetStringFormat(EMITTER_MANIP value) {$/;"	f	class:YAML::Emitter
SetStringFormat	src/3rd_party/yaml-cpp/emitterstate.cpp	/^bool EmitterState::SetStringFormat(EMITTER_MANIP value, FmtScope::value scope) {$/;"	f	class:YAML::EmitterState
SetStyle	src/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::SetStyle(EmitterStyle::value style) {$/;"	f	class:YAML::Node
SetTag	src/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::SetTag() { m_hasTag = true; }$/;"	f	class:YAML::EmitterState
SetTag	src/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::SetTag(const std::string& tag) {$/;"	f	class:YAML::Node
Setting	src/3rd_party/yaml-cpp/setting.h	/^  Setting() : m_value() {}$/;"	f	class:YAML::Setting
Setting	src/3rd_party/yaml-cpp/setting.h	/^class Setting {$/;"	c	namespace:YAML
SettingChange	src/3rd_party/yaml-cpp/setting.h	/^  SettingChange(Setting<T>* pSetting) : m_pCurSetting(pSetting) {$/;"	f	class:YAML::SettingChange
SettingChange	src/3rd_party/yaml-cpp/setting.h	/^class SettingChange : public SettingChangeBase {$/;"	c	namespace:YAML
SettingChangeBase	src/3rd_party/yaml-cpp/setting.h	/^class SettingChangeBase {$/;"	c	namespace:YAML
SettingChanges	src/3rd_party/yaml-cpp/setting.h	/^  SettingChanges() {}$/;"	f	class:YAML::SettingChanges
SettingChanges	src/3rd_party/yaml-cpp/setting.h	/^class SettingChanges : private noncopyable {$/;"	c	namespace:YAML
Setup	src/3rd_party/yaml-cpp/nodeevents.cpp	/^void NodeEvents::Setup(const detail::node& node) {$/;"	f	class:YAML::NodeEvents
Sgd	src/optimizers/optimizers.h	/^  Sgd(float eta, Ptr<ClipperBase> clipper = nullptr)$/;"	f	class:marian::Sgd
Sgd	src/optimizers/optimizers.h	/^class Sgd : public OptimizerBase {$/;"	c	namespace:marian
Shape	src/common/shape.h	/^    Shape() : shape_{1} {}$/;"	f	struct:marian::Shape
Shape	src/common/shape.h	/^    Shape(const Shape& shape) : Shape() {$/;"	f	struct:marian::Shape
Shape	src/common/shape.h	/^    Shape(std::initializer_list<int> il) : Shape() {$/;"	f	struct:marian::Shape
Shape	src/common/shape.h	/^struct Shape {$/;"	s	namespace:marian
Shape	src/gpu/shape.h	/^typedef ConstantShape<GPU_SHAPE_DIMS> Shape;$/;"	t	namespace:marian::gpu
SharedImpl	src/3rd_party/catch.hpp	/^        SharedImpl() : m_rc( 0 ){}$/;"	f	struct:Catch::SharedImpl
SharedImpl	src/3rd_party/catch.hpp	/^    struct SharedImpl : T {$/;"	s	namespace:Catch
SharedImpl	src/3rd_party/spdlog/tests/catch.hpp	/^        SharedImpl() : m_rc( 0 ){}$/;"	f	struct:Catch::SharedImpl
SharedImpl	src/3rd_party/spdlog/tests/catch.hpp	/^    struct SharedImpl : T {$/;"	s	namespace:Catch
SharedLock	src/3rd_party/simple-websocket-server/utility.hpp	/^    class SharedLock {$/;"	c	class:SimpleWeb::ScopeRunner
ShiftNodeOp	src/graph/node_operators_unary.h	/^  ShiftNodeOp(Expr a, Shape shift, Args... args)$/;"	f	struct:marian::ShiftNodeOp
ShiftNodeOp	src/graph/node_operators_unary.h	/^struct ShiftNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
ShortBool	src/3rd_party/yaml-cpp/emittermanip.h	/^  ShortBool,      \/\/ y, t$/;"	e	enum:YAML::EMITTER_MANIP
SignChecker	src/3rd_party/spdlog/details/format.h	/^struct SignChecker$/;"	s	namespace:fmt::internal
SignChecker	src/3rd_party/spdlog/details/format.h	/^struct SignChecker<false>$/;"	s	namespace:fmt::internal
SignChecker	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct SignChecker$/;"	s	namespace:fmt::internal
SignChecker	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct SignChecker<false>$/;"	s	namespace:fmt::internal
SimpleKey	src/3rd_party/yaml-cpp/scanner.h	/^  struct SimpleKey {$/;"	s	class:YAML::Scanner
SimpleKey	src/3rd_party/yaml-cpp/simplekey.cpp	/^Scanner::SimpleKey::SimpleKey(const Mark& mark_, std::size_t flowLevel_)$/;"	f	class:YAML::Scanner::SimpleKey
SimpleWeb	src/3rd_party/simple-websocket-server/crypto.hpp	/^namespace SimpleWeb {$/;"	n
SimpleWeb	src/3rd_party/simple-websocket-server/server_ws.hpp	/^namespace SimpleWeb {$/;"	n
SimpleWeb	src/3rd_party/simple-websocket-server/status_code.hpp	/^namespace SimpleWeb {$/;"	n
SimpleWeb	src/3rd_party/simple-websocket-server/utility.hpp	/^namespace SimpleWeb {$/;"	n
SingleDocParser	src/3rd_party/yaml-cpp/singledocparser.cpp	/^SingleDocParser::SingleDocParser(Scanner& scanner, const Directives& directives)$/;"	f	class:YAML::SingleDocParser
SingleDocParser	src/3rd_party/yaml-cpp/singledocparser.h	/^class SingleDocParser : private noncopyable {$/;"	c	namespace:YAML
SingleLayerRNN	src/rnn/rnn.h	/^  SingleLayerRNN(Ptr<ExpressionGraph> graph, Ptr<Options> options)$/;"	f	class:marian::rnn::SingleLayerRNN
SingleLayerRNN	src/rnn/rnn.h	/^class SingleLayerRNN : public BaseRNN {$/;"	c	namespace:marian::rnn
SingleQuoted	src/3rd_party/yaml-cpp/emittermanip.h	/^  SingleQuoted,$/;"	e	enum:YAML::EMITTER_MANIP
SingleQuoted	src/3rd_party/yaml-cpp/emitterutils.h	/^  enum value { Plain, SingleQuoted, DoubleQuoted, Literal };$/;"	e	enum:YAML::StringFormat::value
SingletonGraph	src/training/graph_group_singleton.h	/^  SingletonGraph(Ptr<Config> options)$/;"	f	class:marian::SingletonGraph
SingletonGraph	src/training/graph_group_singleton.h	/^class SingletonGraph : public GraphGroup {$/;"	c	namespace:marian
SizedIf	src/3rd_party/spdlog/tests/catch.hpp	/^    template<> struct SizedIf<sizeof(FalseType)> : FalseType {};$/;"	s	namespace:Catch
SizedIf	src/3rd_party/spdlog/tests/catch.hpp	/^    template<> struct SizedIf<sizeof(TrueType)> : TrueType {};$/;"	s	namespace:Catch
SlowLSTM	src/rnn/cells.h	/^  SlowLSTM(Ptr<ExpressionGraph> graph, Ptr<Options> options) : Cell(options) {$/;"	f	class:marian::rnn::SlowLSTM
SlowLSTM	src/rnn/cells.h	/^class SlowLSTM : public Cell {$/;"	c	namespace:marian::rnn
SocketServer	src/3rd_party/simple-websocket-server/server_ws.hpp	/^  class SocketServer : public SocketServerBase<socket_type> {};$/;"	c	namespace:SimpleWeb
SocketServer	src/3rd_party/simple-websocket-server/server_ws.hpp	/^  class SocketServer<WS> : public SocketServerBase<WS> {$/;"	c	namespace:SimpleWeb
SocketServerBase	src/3rd_party/simple-websocket-server/server_ws.hpp	/^  class SocketServerBase {$/;"	c	namespace:SimpleWeb
SoftmaxNodeOp	src/graph/node_operators_unary.h	/^  SoftmaxNodeOp(Expr a, Args... args)$/;"	f	struct:marian::SoftmaxNodeOp
SoftmaxNodeOp	src/graph/node_operators_unary.h	/^  SoftmaxNodeOp(Expr a, Expr mask, Args... args)$/;"	f	struct:marian::SoftmaxNodeOp
SoftmaxNodeOp	src/graph/node_operators_unary.h	/^struct SoftmaxNodeOp : public NaryNodeOp {$/;"	s	namespace:marian
SourceLineInfo	src/3rd_party/catch.hpp	/^    struct SourceLineInfo {$/;"	s	namespace:Catch
SourceLineInfo	src/3rd_party/spdlog/tests/catch.hpp	/^    struct SourceLineInfo {$/;"	s	namespace:Catch
Space	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Space() {$/;"	f	namespace:YAML::Exp
SpaceOrIndentTo	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::SpaceOrIndentTo(bool requireSpace, std::size_t indent) {$/;"	f	class:YAML::Emitter
SparseTensor	src/training/sparse_tensor.h	/^typedef std::shared_ptr<SparseTensorBase> SparseTensor;$/;"	t	namespace:marian
SparseTensorBase	src/training/sparse_tensor.h	/^  SparseTensorBase(float* data, int* indices, int size, size_t device) {$/;"	f	class:marian::SparseTensorBase
SparseTensorBase	src/training/sparse_tensor.h	/^  SparseTensorBase(int capacity, size_t device) {$/;"	f	class:marian::SparseTensorBase
SparseTensorBase	src/training/sparse_tensor.h	/^class SparseTensorBase : public std::enable_shared_from_this<SparseTensorBase> {$/;"	c	namespace:marian
Split	src/common/utils.cpp	/^void Split(const std::string& line,$/;"	f
SplitHeads	src/models/transformer.h	/^  Expr SplitHeads(Expr input, int dimHeads) {$/;"	f	class:marian::Transformer
SqrtNodeOp	src/graph/node_operators_unary.h	/^  SqrtNodeOp(Expr a, float epsilon, Args... args)$/;"	f	struct:marian::SqrtNodeOp
SqrtNodeOp	src/graph/node_operators_unary.h	/^struct SqrtNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
SquareNodeOp	src/graph/node_operators_unary.h	/^  SquareNodeOp(Args... args) : UnaryNodeOp(args...) {}$/;"	f	struct:marian::SquareNodeOp
SquareNodeOp	src/graph/node_operators_unary.h	/^struct SquareNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
Stackable	src/rnn/types.h	/^  Stackable(Ptr<Options> options) : options_(options) {}$/;"	f	class:marian::rnn::Stackable
Stackable	src/rnn/types.h	/^class Stackable : public std::enable_shared_from_this<Stackable> {$/;"	c	namespace:marian::rnn
StackableFactory	src/rnn/constructors.h	/^  StackableFactory(Ptr<ExpressionGraph> graph) : Factory(graph) {}$/;"	f	struct:marian::rnn::StackableFactory
StackableFactory	src/rnn/constructors.h	/^struct StackableFactory : public Factory {$/;"	s	namespace:marian::rnn
StackedCell	src/rnn/types.h	/^  StackedCell(Ptr<ExpressionGraph>, Ptr<Options> options) : Cell(options) {}$/;"	f	class:marian::rnn::StackedCell
StackedCell	src/rnn/types.h	/^  StackedCell(Ptr<ExpressionGraph>,$/;"	f	class:marian::rnn::StackedCell
StackedCell	src/rnn/types.h	/^class StackedCell : public Cell {$/;"	c	namespace:marian::rnn
StackedCellFactory	src/rnn/constructors.h	/^  StackedCellFactory(Ptr<ExpressionGraph> graph) : CellFactory(graph) {}$/;"	f	class:marian::rnn::StackedCellFactory
StackedCellFactory	src/rnn/constructors.h	/^class StackedCellFactory : public CellFactory {$/;"	c	namespace:marian::rnn
StartStream	src/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::StartStream() {$/;"	f	class:YAML::Scanner
StartedDoc	src/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::StartedDoc() {$/;"	f	class:YAML::EmitterState
StartedGroup	src/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::StartedGroup(GroupType::value type) {$/;"	f	class:YAML::EmitterState
StartedNode	src/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::StartedNode() {$/;"	f	class:YAML::EmitterState
StartedScalar	src/3rd_party/yaml-cpp/emitter.cpp	/^void Emitter::StartedScalar() { m_pState->StartedScalar(); }$/;"	f	class:YAML::Emitter
StartedScalar	src/3rd_party/yaml-cpp/emitterstate.cpp	/^void EmitterState::StartedScalar() {$/;"	f	class:YAML::EmitterState
State	src/3rd_party/yaml-cpp/emitfromevents.h	/^  struct State {$/;"	s	class:YAML::EmitFromEvents
State	src/rnn/types.h	/^struct State {$/;"	s	namespace:marian::rnn
States	src/rnn/types.h	/^  States() {}$/;"	f	class:marian::rnn::States
States	src/rnn/types.h	/^  States(const std::vector<State>& states) : states_(states) {}$/;"	f	class:marian::rnn::States
States	src/rnn/types.h	/^  States(size_t num, State state) : states_(num, state) {}$/;"	f	class:marian::rnn::States
States	src/rnn/types.h	/^class States {$/;"	c	namespace:marian::rnn
StatusCode	src/3rd_party/simple-websocket-server/status_code.hpp	/^  enum class StatusCode {$/;"	c	namespace:SimpleWeb
StepNodeOp	src/graph/node_operators_unary.h	/^  StepNodeOp(Expr a, int step, int axis)$/;"	f	class:marian::StepNodeOp
StepNodeOp	src/graph/node_operators_unary.h	/^class StepNodeOp : public UnaryNodeOp {$/;"	c	namespace:marian
Str	src/3rd_party/yaml-cpp/exp.cpp	/^std::string Str(unsigned ch) { return std::string(1, static_cast<char>(ch)); }$/;"	f	namespace:YAML::Exp
Str2Id	src/data/vocab.h	/^  typedef std::map<std::string, size_t> Str2Id;$/;"	t	class:marian::Vocab
StrFormatSpec	src/3rd_party/spdlog/details/format.h	/^    StrFormatSpec(const Char *str, unsigned width, FillChar fill)$/;"	f	class:fmt::StrFormatSpec
StrFormatSpec	src/3rd_party/spdlog/details/format.h	/^class StrFormatSpec: public AlignSpec$/;"	c	namespace:fmt
StrFormatSpec	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    StrFormatSpec(const Char *str, unsigned width, FillChar fill)$/;"	f	class:fmt::StrFormatSpec
StrFormatSpec	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class StrFormatSpec : public AlignSpec$/;"	c	namespace:fmt
Stream	src/3rd_party/yaml-cpp/stream.cpp	/^Stream::Stream(std::istream& input)$/;"	f	class:YAML::Stream
Stream	src/3rd_party/yaml-cpp/stream.h	/^class Stream : private noncopyable {$/;"	c	namespace:YAML
StreamCharSource	src/3rd_party/yaml-cpp/streamcharsource.h	/^  StreamCharSource(const Stream& stream) : m_offset(0), m_stream(stream) {}$/;"	f	class:YAML::StreamCharSource
StreamCharSource	src/3rd_party/yaml-cpp/streamcharsource.h	/^  StreamCharSource(const StreamCharSource& source)$/;"	f	class:YAML::StreamCharSource
StreamCharSource	src/3rd_party/yaml-cpp/streamcharsource.h	/^class StreamCharSource {$/;"	c	namespace:YAML
StreamEndStop	src/3rd_party/catch.hpp	/^    struct StreamEndStop {$/;"	s	namespace:Catch
StreamEndStop	src/3rd_party/spdlog/tests/catch.hpp	/^    struct StreamEndStop {$/;"	s	namespace:Catch
StreamInUtf16	src/3rd_party/yaml-cpp/stream.cpp	/^void Stream::StreamInUtf16() const {$/;"	f	class:YAML::Stream
StreamInUtf32	src/3rd_party/yaml-cpp/stream.cpp	/^void Stream::StreamInUtf32() const {$/;"	f	class:YAML::Stream
StreamInUtf8	src/3rd_party/yaml-cpp/stream.cpp	/^void Stream::StreamInUtf8() const {$/;"	f	class:YAML::Stream
StringCharSource	src/3rd_party/yaml-cpp/stringsource.h	/^  StringCharSource(const char* str, std::size_t size)$/;"	f	class:YAML::StringCharSource
StringCharSource	src/3rd_party/yaml-cpp/stringsource.h	/^class StringCharSource {$/;"	c	namespace:YAML
StringCollector	src/translator/output_collector.cpp	/^StringCollector::StringCollector() : maxId_(-1) {}$/;"	f	class:marian::StringCollector
StringCollector	src/translator/output_collector.h	/^class StringCollector {$/;"	c	namespace:marian
StringFormat	src/3rd_party/yaml-cpp/emitterutils.h	/^struct StringFormat {$/;"	s	namespace:YAML
StringMaker	src/3rd_party/catch.hpp	/^struct StringMaker :$/;"	s	namespace:Catch
StringMaker	src/3rd_party/catch.hpp	/^struct StringMaker<R C::*> {$/;"	s	namespace:Catch
StringMaker	src/3rd_party/catch.hpp	/^struct StringMaker<T*> {$/;"	s	namespace:Catch
StringMakerBase	src/3rd_party/catch.hpp	/^    struct StringMakerBase {$/;"	s	namespace:Catch::Detail
StringMakerBase	src/3rd_party/catch.hpp	/^    struct StringMakerBase<true> {$/;"	s	namespace:Catch::Detail
StringRef	src/3rd_party/spdlog/details/format.h	/^typedef BasicStringRef<char> StringRef;$/;"	t	namespace:fmt
StringRef	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef BasicStringRef<char> StringRef;$/;"	t	namespace:fmt
StringValue	src/3rd_party/spdlog/details/format.h	/^    struct StringValue$/;"	s	struct:fmt::internal::Value
StringValue	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    struct StringValue$/;"	s	struct:fmt::internal::Value
Style	src/3rd_party/yaml-cpp/node/impl.h	/^inline EmitterStyle::value Node::Style() const {$/;"	f	class:YAML::Node
SubBatch	src/data/corpus.h	/^  SubBatch(int size, int width)$/;"	f	class:marian::data::SubBatch
SubBatch	src/data/corpus.h	/^class SubBatch {$/;"	c	namespace:marian::data
SumNodeOp	src/graph/node_operators_unary.h	/^  SumNodeOp(Expr a, Args... args)$/;"	f	struct:marian::SumNodeOp
SumNodeOp	src/graph/node_operators_unary.h	/^struct SumNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
Supported	src/3rd_party/spdlog/details/format.h	/^    typedef Null<T> Supported;$/;"	t	struct:fmt::internal::WCharHelper
Supported	src/3rd_party/spdlog/details/format.h	/^    typedef T Supported;$/;"	t	struct:fmt::internal::WCharHelper
Supported	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef Null<T> Supported;$/;"	t	struct:fmt::internal::WCharHelper
Supported	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef T Supported;$/;"	t	struct:fmt::internal::WCharHelper
SuppressFail	src/3rd_party/catch.hpp	/^        SuppressFail = 0x08         \/\/ Failures are reported but do not fail the test$/;"	e	enum:Catch::ResultDisposition::Flags
SuppressFail	src/3rd_party/spdlog/tests/catch.hpp	/^        SuppressFail = 0x04         \/\/ Failures are reported but do not fail the test$/;"	e	enum:Catch::ResultDisposition::Flags
SwishNodeOp	src/graph/node_operators_unary.h	/^  SwishNodeOp(Args... args) : UnaryNodeOp(args...) {}$/;"	f	struct:marian::SwishNodeOp
SwishNodeOp	src/graph/node_operators_unary.h	/^struct SwishNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
SymmetricS2S	src/models/experimental/s2s_symmetric.h	/^typedef EncoderDecoderSymmetric<S2S> SymmetricS2S;$/;"	t	namespace:marian
SyncGraphGroup	src/training/graph_group_sync.h	/^  SyncGraphGroup(Ptr<Config> options)$/;"	f	class:marian::SyncGraphGroup
SyncGraphGroup	src/training/graph_group_sync.h	/^class SyncGraphGroup : public GraphGroup {$/;"	c	namespace:marian
SystemError	src/3rd_party/spdlog/details/format.h	/^    SystemError()$/;"	f	class:SystemError
SystemError	src/3rd_party/spdlog/details/format.h	/^    SystemError(int error_code, CStringRef message)$/;"	f	class:SystemError
SystemError	src/3rd_party/spdlog/details/format.h	/^class SystemError: public internal::RuntimeError$/;"	c
SystemError	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    SystemError() {}$/;"	f	class:SystemError
SystemError	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    SystemError(int error_code, CStringRef message)$/;"	f	class:SystemError
SystemError	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class SystemError : public internal::RuntimeError$/;"	c
TAB_IN_INDENTATION	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const TAB_IN_INDENTATION =$/;"	m	namespace:YAML::ErrorMsg
TAG	src/3rd_party/yaml-cpp/token.h	/^    TAG,$/;"	e	enum:YAML::Token::TYPE
TAG_DIRECTIVE_ARGS	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const TAG_DIRECTIVE_ARGS =$/;"	m	namespace:YAML::ErrorMsg
TAG_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/tag.h	2;"	d
TAG_WITH_NO_SUFFIX	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const TAG_WITH_NO_SUFFIX = "tag handle with no suffix";$/;"	m	namespace:YAML::ErrorMsg
TBC_TEXT_FORMAT_CONSOLE_WIDTH	src/3rd_party/catch.hpp	5310;"	d
TBC_TEXT_FORMAT_CONSOLE_WIDTH	src/3rd_party/spdlog/tests/catch.hpp	4308;"	d
TBC_TEXT_FORMAT_H_INCLUDED	src/3rd_party/catch.hpp	4098;"	d
TBC_TEXT_FORMAT_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	3299;"	d
TERNARY	src/functional/predicates.h	141;"	d
THEN	src/3rd_party/catch.hpp	11502;"	d
THEN	src/3rd_party/spdlog/tests/catch.hpp	9407;"	d
THREAD_GUARD	src/common/definitions.h	11;"	d
THROW	src/3rd_party/yaml-cpp/scanscalar.h	/^enum ACTION { NONE, BREAK, THROW };$/;"	e	enum:YAML::ACTION
TOKEN_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/token.h	2;"	d
TRAIN_SET	src/examples/mnist/mnist_ffnn.cpp	/^const std::vector<std::string> TRAIN_SET$/;"	v
TRAITS_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/traits.h	2;"	d
TWOBLUECUBES_CATCH_APPROX_HPP_INCLUDED	src/3rd_party/catch.hpp	2751;"	d
TWOBLUECUBES_CATCH_APPROX_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	2115;"	d
TWOBLUECUBES_CATCH_ASSERTIONRESULT_HPP_INCLUDED	src/3rd_party/catch.hpp	8007;"	d
TWOBLUECUBES_CATCH_ASSERTIONRESULT_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	6489;"	d
TWOBLUECUBES_CATCH_ASSERTIONRESULT_H_INCLUDED	src/3rd_party/catch.hpp	904;"	d
TWOBLUECUBES_CATCH_ASSERTIONRESULT_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	658;"	d
TWOBLUECUBES_CATCH_CAPTURE_HPP_INCLUDED	src/3rd_party/catch.hpp	846;"	d
TWOBLUECUBES_CATCH_CAPTURE_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	600;"	d
TWOBLUECUBES_CATCH_CLARA_H_INCLUDED	src/3rd_party/catch.hpp	4065;"	d
TWOBLUECUBES_CATCH_CLARA_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	3268;"	d
TWOBLUECUBES_CATCH_COMMANDLINE_HPP_INCLUDED	src/3rd_party/catch.hpp	3525;"	d
TWOBLUECUBES_CATCH_COMMANDLINE_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	2813;"	d
TWOBLUECUBES_CATCH_COMMON_HPP_INCLUDED	src/3rd_party/catch.hpp	8536;"	d
TWOBLUECUBES_CATCH_COMMON_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	6971;"	d
TWOBLUECUBES_CATCH_COMMON_H_INCLUDED	src/3rd_party/catch.hpp	63;"	d
TWOBLUECUBES_CATCH_COMMON_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	56;"	d
TWOBLUECUBES_CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED	src/3rd_party/catch.hpp	66;"	d
TWOBLUECUBES_CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	70;"	d
TWOBLUECUBES_CATCH_CONFIG_HPP_INCLUDED	src/3rd_party/catch.hpp	3528;"	d
TWOBLUECUBES_CATCH_CONFIG_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	2816;"	d
TWOBLUECUBES_CATCH_CONSOLE_COLOUR_HPP_INCLUDED	src/3rd_party/catch.hpp	5479;"	d
TWOBLUECUBES_CATCH_CONSOLE_COLOUR_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	4466;"	d
TWOBLUECUBES_CATCH_CONSOLE_COLOUR_IMPL_HPP_INCLUDED	src/3rd_party/catch.hpp	7738;"	d
TWOBLUECUBES_CATCH_CONSOLE_COLOUR_IMPL_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	6246;"	d
TWOBLUECUBES_CATCH_CONTEXT_H_INCLUDED	src/3rd_party/catch.hpp	521;"	d
TWOBLUECUBES_CATCH_CONTEXT_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	316;"	d
TWOBLUECUBES_CATCH_CONTEXT_IMPL_HPP_INCLUDED	src/3rd_party/catch.hpp	7546;"	d
TWOBLUECUBES_CATCH_CONTEXT_IMPL_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	6054;"	d
TWOBLUECUBES_CATCH_DEBUGGER_HPP_INCLUDED	src/3rd_party/catch.hpp	8682;"	d
TWOBLUECUBES_CATCH_DEBUGGER_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	7096;"	d
TWOBLUECUBES_CATCH_DEBUGGER_H_INCLUDED	src/3rd_party/catch.hpp	2066;"	d
TWOBLUECUBES_CATCH_DEBUGGER_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	1510;"	d
TWOBLUECUBES_CATCH_DEFAULT_MAIN_HPP_INCLUDED	src/3rd_party/catch.hpp	11294;"	d
TWOBLUECUBES_CATCH_DEFAULT_MAIN_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	9239;"	d
TWOBLUECUBES_CATCH_ERRNO_GUARD_HPP_INCLUDED	src/3rd_party/catch.hpp	7741;"	d
TWOBLUECUBES_CATCH_EVALUATE_HPP_INCLUDED	src/3rd_party/catch.hpp	1267;"	d
TWOBLUECUBES_CATCH_EVALUATE_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	799;"	d
TWOBLUECUBES_CATCH_EXCEPTION_TRANSLATOR_REGISTRY_HPP_INCLUDED	src/3rd_party/catch.hpp	7368;"	d
TWOBLUECUBES_CATCH_EXCEPTION_TRANSLATOR_REGISTRY_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	5901;"	d
TWOBLUECUBES_CATCH_EXPRESSION_LHS_HPP_INCLUDED	src/3rd_party/catch.hpp	1264;"	d
TWOBLUECUBES_CATCH_EXPRESSION_LHS_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	796;"	d
TWOBLUECUBES_CATCH_FATAL_CONDITION_H_INCLUDED	src/3rd_party/catch.hpp	6315;"	d
TWOBLUECUBES_CATCH_FATAL_CONDITION_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	5071;"	d
TWOBLUECUBES_CATCH_GENERATORS_HPP_INCLUDED	src/3rd_party/catch.hpp	2465;"	d
TWOBLUECUBES_CATCH_GENERATORS_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	1842;"	d
TWOBLUECUBES_CATCH_GENERATORS_IMPL_HPP_INCLUDED	src/3rd_party/catch.hpp	7933;"	d
TWOBLUECUBES_CATCH_GENERATORS_IMPL_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	6415;"	d
TWOBLUECUBES_CATCH_HPP_INCLUDED	src/3rd_party/catch.hpp	14;"	d
TWOBLUECUBES_CATCH_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	14;"	d
TWOBLUECUBES_CATCH_IMPL_HPP_INCLUDED	src/3rd_party/catch.hpp	3511;"	d
TWOBLUECUBES_CATCH_IMPL_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	2799;"	d
TWOBLUECUBES_CATCH_INTERFACES_CAPTURE_H_INCLUDED	src/3rd_party/catch.hpp	2027;"	d
TWOBLUECUBES_CATCH_INTERFACES_CAPTURE_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	1475;"	d
TWOBLUECUBES_CATCH_INTERFACES_CONFIG_H_INCLUDED	src/3rd_party/catch.hpp	3802;"	d
TWOBLUECUBES_CATCH_INTERFACES_CONFIG_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	3041;"	d
TWOBLUECUBES_CATCH_INTERFACES_EXCEPTION_H_INCLUDED	src/3rd_party/catch.hpp	2644;"	d
TWOBLUECUBES_CATCH_INTERFACES_EXCEPTION_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	2022;"	d
TWOBLUECUBES_CATCH_INTERFACES_GENERATORS_H_INCLUDED	src/3rd_party/catch.hpp	524;"	d
TWOBLUECUBES_CATCH_INTERFACES_GENERATORS_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	319;"	d
TWOBLUECUBES_CATCH_INTERFACES_REGISTRY_HUB_H_INCLUDED	src/3rd_party/catch.hpp	2650;"	d
TWOBLUECUBES_CATCH_INTERFACES_REGISTRY_HUB_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	2026;"	d
TWOBLUECUBES_CATCH_INTERFACES_REPORTER_H_INCLUDED	src/3rd_party/catch.hpp	5536;"	d
TWOBLUECUBES_CATCH_INTERFACES_REPORTER_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	4523;"	d
TWOBLUECUBES_CATCH_INTERFACES_RUNNER_H_INCLUDED	src/3rd_party/catch.hpp	2132;"	d
TWOBLUECUBES_CATCH_INTERFACES_RUNNER_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	1559;"	d
TWOBLUECUBES_CATCH_INTERFACES_TAG_ALIAS_REGISTRY_H_INCLUDED	src/3rd_party/catch.hpp	3094;"	d
TWOBLUECUBES_CATCH_INTERFACES_TAG_ALIAS_REGISTRY_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	2421;"	d
TWOBLUECUBES_CATCH_INTERFACES_TESTCASE_H_INCLUDED	src/3rd_party/catch.hpp	669;"	d
TWOBLUECUBES_CATCH_INTERFACES_TESTCASE_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	469;"	d
TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_HPP_INCLUDED	src/3rd_party/catch.hpp	8356;"	d
TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	6793;"	d
TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_H_INCLUDED	src/3rd_party/catch.hpp	8359;"	d
TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	6796;"	d
TWOBLUECUBES_CATCH_LIST_HPP_INCLUDED	src/3rd_party/catch.hpp	5305;"	d
TWOBLUECUBES_CATCH_LIST_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	4303;"	d
TWOBLUECUBES_CATCH_MATCHERS_HPP_INCLUDED	src/3rd_party/catch.hpp	1022;"	d
TWOBLUECUBES_CATCH_MATCHERS_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	2196;"	d
TWOBLUECUBES_CATCH_MATCHERS_STRING_H_INCLUDED	src/3rd_party/catch.hpp	2947;"	d
TWOBLUECUBES_CATCH_MATCHERS_VECTOR_H_INCLUDED	src/3rd_party/catch.hpp	3003;"	d
TWOBLUECUBES_CATCH_MESSAGE_HPP_INCLUDED	src/3rd_party/catch.hpp	8319;"	d
TWOBLUECUBES_CATCH_MESSAGE_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	6758;"	d
TWOBLUECUBES_CATCH_MESSAGE_H_INCLUDED	src/3rd_party/catch.hpp	1971;"	d
TWOBLUECUBES_CATCH_MESSAGE_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	1419;"	d
TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_HPP_INCLUDED	src/3rd_party/catch.hpp	7525;"	d
TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	6033;"	d
TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_H_INCLUDED	src/3rd_party/catch.hpp	60;"	d
TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	53;"	d
TWOBLUECUBES_CATCH_OBJC_ARC_HPP_INCLUDED	src/3rd_party/catch.hpp	1487;"	d
TWOBLUECUBES_CATCH_OBJC_ARC_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	1014;"	d
TWOBLUECUBES_CATCH_OBJC_HPP_INCLUDED	src/3rd_party/catch.hpp	3291;"	d
TWOBLUECUBES_CATCH_OBJC_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	2605;"	d
TWOBLUECUBES_CATCH_OPTION_HPP_INCLUDED	src/3rd_party/catch.hpp	3118;"	d
TWOBLUECUBES_CATCH_OPTION_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	2445;"	d
TWOBLUECUBES_CATCH_PLATFORM_H_INCLUDED	src/3rd_party/catch.hpp	2069;"	d
TWOBLUECUBES_CATCH_PLATFORM_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	1513;"	d
TWOBLUECUBES_CATCH_PTR_HPP_INCLUDED	src/3rd_party/catch.hpp	548;"	d
TWOBLUECUBES_CATCH_PTR_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	343;"	d
TWOBLUECUBES_CATCH_REENABLE_WARNINGS_H_INCLUDED	src/3rd_party/catch.hpp	10033;"	d
TWOBLUECUBES_CATCH_REENABLE_WARNINGS_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	9414;"	d
TWOBLUECUBES_CATCH_REGISTRY_HUB_HPP_INCLUDED	src/3rd_party/catch.hpp	7133;"	d
TWOBLUECUBES_CATCH_REGISTRY_HUB_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	5713;"	d
TWOBLUECUBES_CATCH_REPORTER_BASES_HPP_INCLUDED	src/3rd_party/catch.hpp	9436;"	d
TWOBLUECUBES_CATCH_REPORTER_BASES_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	7568;"	d
TWOBLUECUBES_CATCH_REPORTER_COMPACT_HPP_INCLUDED	src/3rd_party/catch.hpp	10935;"	d
TWOBLUECUBES_CATCH_REPORTER_COMPACT_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	8895;"	d
TWOBLUECUBES_CATCH_REPORTER_CONSOLE_HPP_INCLUDED	src/3rd_party/catch.hpp	10502;"	d
TWOBLUECUBES_CATCH_REPORTER_CONSOLE_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	8453;"	d
TWOBLUECUBES_CATCH_REPORTER_JUNIT_HPP_INCLUDED	src/3rd_party/catch.hpp	10259;"	d
TWOBLUECUBES_CATCH_REPORTER_JUNIT_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	8240;"	d
TWOBLUECUBES_CATCH_REPORTER_MULTI_HPP_INCLUDED	src/3rd_party/catch.hpp	9297;"	d
TWOBLUECUBES_CATCH_REPORTER_REGISTRARS_HPP_INCLUDED	src/3rd_party/catch.hpp	9709;"	d
TWOBLUECUBES_CATCH_REPORTER_REGISTRARS_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	7778;"	d
TWOBLUECUBES_CATCH_REPORTER_REGISTRY_HPP_INCLUDED	src/3rd_party/catch.hpp	7328;"	d
TWOBLUECUBES_CATCH_REPORTER_REGISTRY_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	5866;"	d
TWOBLUECUBES_CATCH_REPORTER_XML_HPP_INCLUDED	src/3rd_party/catch.hpp	9433;"	d
TWOBLUECUBES_CATCH_REPORTER_XML_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	7565;"	d
TWOBLUECUBES_CATCH_RESULT_BUILDER_HPP_INCLUDED	src/3rd_party/catch.hpp	9001;"	d
TWOBLUECUBES_CATCH_RESULT_BUILDER_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	7360;"	d
TWOBLUECUBES_CATCH_RESULT_BUILDER_H_INCLUDED	src/3rd_party/catch.hpp	849;"	d
TWOBLUECUBES_CATCH_RESULT_BUILDER_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	603;"	d
TWOBLUECUBES_CATCH_RESULT_TYPE_H_INCLUDED	src/3rd_party/catch.hpp	852;"	d
TWOBLUECUBES_CATCH_RESULT_TYPE_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	606;"	d
TWOBLUECUBES_CATCH_RUNNER_HPP_INCLUDED	src/3rd_party/catch.hpp	3522;"	d
TWOBLUECUBES_CATCH_RUNNER_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	2810;"	d
TWOBLUECUBES_CATCH_RUNNER_IMPL_HPP_INCLUDED	src/3rd_party/catch.hpp	5954;"	d
TWOBLUECUBES_CATCH_RUNNER_IMPL_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	4933;"	d
TWOBLUECUBES_CATCH_SECTION_HPP_INCLUDED	src/3rd_party/catch.hpp	8644;"	d
TWOBLUECUBES_CATCH_SECTION_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	7063;"	d
TWOBLUECUBES_CATCH_SECTION_H_INCLUDED	src/3rd_party/catch.hpp	2301;"	d
TWOBLUECUBES_CATCH_SECTION_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	1695;"	d
TWOBLUECUBES_CATCH_SECTION_INFO_H_INCLUDED	src/3rd_party/catch.hpp	2304;"	d
TWOBLUECUBES_CATCH_SECTION_INFO_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	1698;"	d
TWOBLUECUBES_CATCH_SFINAE_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	973;"	d
TWOBLUECUBES_CATCH_STREAMBUF_H_INCLUDED	src/3rd_party/catch.hpp	3865;"	d
TWOBLUECUBES_CATCH_STREAMBUF_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	6060;"	d
TWOBLUECUBES_CATCH_STREAM_HPP_INCLUDED	src/3rd_party/catch.hpp	7549;"	d
TWOBLUECUBES_CATCH_STREAM_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	6057;"	d
TWOBLUECUBES_CATCH_STREAM_H_INCLUDED	src/3rd_party/catch.hpp	3862;"	d
TWOBLUECUBES_CATCH_STREAM_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	3094;"	d
TWOBLUECUBES_CATCH_SUPPRESS_WARNINGS_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	18;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_H_INCLUDED	src/3rd_party/catch.hpp	3097;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	2424;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_HPP_INCLUDED	src/3rd_party/catch.hpp	9153;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	7473;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_H_INCLUDED	src/3rd_party/catch.hpp	7430;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	7476;"	d
TWOBLUECUBES_CATCH_TEST_CASE_INFO_HPP_INCLUDED	src/3rd_party/catch.hpp	8095;"	d
TWOBLUECUBES_CATCH_TEST_CASE_INFO_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	6569;"	d
TWOBLUECUBES_CATCH_TEST_CASE_INFO_H_INCLUDED	src/3rd_party/catch.hpp	3207;"	d
TWOBLUECUBES_CATCH_TEST_CASE_INFO_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	2524;"	d
TWOBLUECUBES_CATCH_TEST_CASE_REGISTRY_IMPL_HPP_INCLUDED	src/3rd_party/catch.hpp	7136;"	d
TWOBLUECUBES_CATCH_TEST_CASE_REGISTRY_IMPL_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	5716;"	d
TWOBLUECUBES_CATCH_TEST_CASE_TRACKER_HPP_INCLUDED	src/3rd_party/catch.hpp	5957;"	d
TWOBLUECUBES_CATCH_TEST_CASE_TRACKER_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	4936;"	d
TWOBLUECUBES_CATCH_TEST_REGISTRY_HPP_INCLUDED	src/3rd_party/catch.hpp	666;"	d
TWOBLUECUBES_CATCH_TEST_REGISTRY_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	466;"	d
TWOBLUECUBES_CATCH_TEST_SPEC_HPP_INCLUDED	src/3rd_party/catch.hpp	3539;"	d
TWOBLUECUBES_CATCH_TEST_SPEC_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	2827;"	d
TWOBLUECUBES_CATCH_TEST_SPEC_PARSER_HPP_INCLUDED	src/3rd_party/catch.hpp	3531;"	d
TWOBLUECUBES_CATCH_TEST_SPEC_PARSER_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	2819;"	d
TWOBLUECUBES_CATCH_TEXT_H_INCLUDED	src/3rd_party/catch.hpp	5308;"	d
TWOBLUECUBES_CATCH_TEXT_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	4306;"	d
TWOBLUECUBES_CATCH_TIMER_H_INCLUDED	src/3rd_party/catch.hpp	2404;"	d
TWOBLUECUBES_CATCH_TIMER_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	1786;"	d
TWOBLUECUBES_CATCH_TOSTRING_HPP_INCLUDED	src/3rd_party/catch.hpp	8799;"	d
TWOBLUECUBES_CATCH_TOSTRING_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	7185;"	d
TWOBLUECUBES_CATCH_TOSTRING_H_INCLUDED	src/3rd_party/catch.hpp	1477;"	d
TWOBLUECUBES_CATCH_TOSTRING_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	970;"	d
TWOBLUECUBES_CATCH_TOTALS_HPP_INCLUDED	src/3rd_party/catch.hpp	2307;"	d
TWOBLUECUBES_CATCH_TOTALS_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	1716;"	d
TWOBLUECUBES_CATCH_VERSION_HPP_INCLUDED	src/3rd_party/catch.hpp	8282;"	d
TWOBLUECUBES_CATCH_VERSION_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	6749;"	d
TWOBLUECUBES_CATCH_VERSION_H_INCLUDED	src/3rd_party/catch.hpp	6877;"	d
TWOBLUECUBES_CATCH_VERSION_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	5478;"	d
TWOBLUECUBES_CATCH_WILDCARD_PATTERN_HPP_INCLUDED	src/3rd_party/catch.hpp	3547;"	d
TWOBLUECUBES_CATCH_WINDOWS_H_PROXY_H_INCLUDED	src/3rd_party/catch.hpp	6331;"	d
TWOBLUECUBES_CATCH_XMLWRITER_HPP_INCLUDED	src/3rd_party/catch.hpp	9800;"	d
TWOBLUECUBES_CATCH_XMLWRITER_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	7841;"	d
TWOBLUECUBES_CLARA_COMPILERS_H_INCLUDED	src/3rd_party/catch.hpp	4247;"	d
TWOBLUECUBES_CLARA_H_INCLUDED	src/3rd_party/catch.hpp	4084;"	d
TWOBLUECUBES_CLARA_H_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	3285;"	d
TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED	src/3rd_party/catch.hpp	12;"	d
TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	12;"	d
TWOBLUECUBES_TEXT_FORMAT_H_ALREADY_INCLUDED	src/3rd_party/catch.hpp	5318;"	d
TWOBLUECUBES_TEXT_FORMAT_H_ALREADY_INCLUDED	src/3rd_party/spdlog/tests/catch.hpp	4316;"	d
TYPE	src/3rd_party/yaml-cpp/tag.h	/^  enum TYPE {$/;"	g	struct:YAML::Tag
TYPE	src/3rd_party/yaml-cpp/token.h	/^  enum TYPE {$/;"	g	struct:YAML::Token
T_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class T_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
Tab	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Tab() {$/;"	f	namespace:YAML::Exp
Tag	src/3rd_party/yaml-cpp/exp.h	/^const char Tag = '!';$/;"	m	namespace:YAML::Keys
Tag	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Tag() {$/;"	f	namespace:YAML::Exp
Tag	src/3rd_party/yaml-cpp/node/impl.h	/^inline const std::string& Node::Tag() const {$/;"	f	class:YAML::Node
Tag	src/3rd_party/yaml-cpp/tag.cpp	/^Tag::Tag(const Token& token) : type(static_cast<TYPE>(token.data)) {$/;"	f	class:YAML::Tag
Tag	src/3rd_party/yaml-cpp/tag.h	/^struct Tag {$/;"	s	namespace:YAML
TagByKind	src/3rd_party/yaml-cpp/emittermanip.h	/^  TagByKind,$/;"	e	enum:YAML::EMITTER_MANIP
Tanh	src/rnn/cells.h	/^  Tanh(Ptr<ExpressionGraph> graph, Ptr<Options> options) : Cell(options) {$/;"	f	class:marian::rnn::Tanh
Tanh	src/rnn/cells.h	/^class Tanh : public Cell {$/;"	c	namespace:marian::rnn
TanhNodeOp	src/graph/node_operators_unary.h	/^  TanhNodeOp(const std::vector<Expr>& nodes)$/;"	f	struct:marian::TanhNodeOp
TanhNodeOp	src/graph/node_operators_unary.h	/^struct TanhNodeOp : public NaryNodeOp {$/;"	s	namespace:marian
TemporaryFile	src/common/file_stream.h	/^  TemporaryFile(const std::string base = "\/tmp\/", bool earlyUnlink = true)$/;"	f	class:TemporaryFile
TemporaryFile	src/common/file_stream.h	/^class TemporaryFile {$/;"	c
Tensor	src/common/definitions.h	/^typedef Ptr<TensorBase> Tensor;$/;"	t	namespace:marian
Tensor	src/gpu/tensor.h	/^  __HD__ Tensor() {}$/;"	f	struct:marian::gpu::Tensor
Tensor	src/gpu/tensor.h	/^  __HD__ Tensor(T* ptr, const gpu::Shape& shape)$/;"	f	struct:marian::gpu::Tensor
Tensor	src/gpu/tensor.h	/^  __H__ Tensor(marian::Tensor t)$/;"	f	struct:marian::gpu::Tensor
Tensor	src/gpu/tensor.h	/^struct Tensor {$/;"	s	namespace:marian::gpu
Tensor	src/tensors/tensor.h	/^typedef std::shared_ptr<TensorBase> Tensor;$/;"	t	namespace:marian
TensorAllocator	src/tensors/tensor_allocator.h	/^  TensorAllocator(size_t device)$/;"	f	class:marian::TensorAllocator
TensorAllocator	src/tensors/tensor_allocator.h	/^class TensorAllocator {$/;"	c	namespace:marian
TensorBase	src/tensors/tensor.h	/^  TensorBase(Ptr<MemoryPiece> memory, Shape shape, size_t device)$/;"	f	class:marian::TensorBase
TensorBase	src/tensors/tensor.h	/^class TensorBase : public std::enable_shared_from_this<TensorBase> {$/;"	c	namespace:marian
TensorCPU	src/tensors/tensor_cpu.h	/^  TensorCPU(float* data, Shape shape) : TensorBase(data, shape) {}$/;"	f	class:marian::TensorCPU
TensorCPU	src/tensors/tensor_cpu.h	/^class TensorCPU : public TensorBase {$/;"	c	namespace:marian
TernaryFunctor	src/functional/predicates.h	/^      TernaryFunctor(Arg1 arg1, Arg2 arg2, Arg3 arg3)$/;"	f	struct:marian::functional::TernaryFunctor
TernaryFunctor	src/functional/predicates.h	/^    struct TernaryFunctor {$/;"	s	namespace:marian::functional
TestFailureException	src/3rd_party/catch.hpp	/^    struct TestFailureException{};$/;"	s	namespace:Catch
TestFailureException	src/3rd_party/spdlog/tests/catch.hpp	/^    struct TestFailureException{};$/;"	s	namespace:Catch
TestFunction	src/3rd_party/catch.hpp	/^typedef void(*TestFunction)();$/;"	t	namespace:Catch
TestFunction	src/3rd_party/spdlog/tests/catch.hpp	/^typedef void(*TestFunction)();$/;"	t	namespace:Catch
TestLSTM	src/rnn/cells.h	/^  TestLSTM(Ptr<ExpressionGraph> graph, Ptr<Options> options) : Cell(options) {$/;"	f	class:marian::rnn::TestLSTM
TestLSTM	src/rnn/cells.h	/^class TestLSTM : public Cell {$/;"	c	namespace:marian::rnn
TextInput	src/data/text_input.cpp	/^TextInput::TextInput(std::vector<std::string> paths,$/;"	f	class:marian::data::TextInput
TextInput	src/data/text_input.h	/^class TextInput : public DatasetBase<SentenceTuple, TextIterator, CorpusBatch> {$/;"	c	namespace:marian::data
TextIterator	src/data/text_input.cpp	/^TextIterator::TextIterator() : pos_(-1), tup_(0) {}$/;"	f	class:marian::data::TextIterator
TextIterator	src/data/text_input.cpp	/^TextIterator::TextIterator(TextInput& corpus)$/;"	f	class:marian::data::TextIterator
TextIterator	src/data/text_input.h	/^class TextIterator$/;"	c	namespace:marian::data
ThousandsSep	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    explicit ThousandsSep(fmt::StringRef sep) : sep_(sep), digit_index_(0) {}$/;"	f	class:fmt::internal::ThousandsSep
ThousandsSep	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class ThousandsSep$/;"	c	namespace:fmt::internal
ThreadPool	src/3rd_party/threadpool.h	/^class ThreadPool {$/;"	c	namespace:marian
ThreadPool	src/3rd_party/threadpool.h	/^inline ThreadPool::ThreadPool(size_t threads, size_t in_bound)$/;"	f	class:marian::ThreadPool
ThreadPool2	src/3rd_party/threadpool2.h	/^class ThreadPool2 {$/;"	c	namespace:marian
ThreadPool2	src/3rd_party/threadpool2.h	/^inline ThreadPool2::ThreadPool2(size_t threads, size_t in_bound)$/;"	f	class:marian::ThreadPool2
ThrewException	src/3rd_party/catch.hpp	/^        ThrewException = Exception | 1,$/;"	e	enum:Catch::ResultWas::OfType
ThrewException	src/3rd_party/spdlog/tests/catch.hpp	/^        ThrewException = Exception | 1,$/;"	e	enum:Catch::ResultWas::OfType
ThrowParserException	src/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::ThrowParserException(const std::string& msg) const {$/;"	f	class:YAML::Scanner
ToLower	src/3rd_party/yaml-cpp/convert.cpp	/^char ToLower(char ch) { return IsUpper(ch) ? ch + 'a' - 'A' : ch; }$/;"	f	namespace:__anon95
ToString	src/3rd_party/yaml-cpp/emitfromevents.cpp	/^std::string ToString(YAML::anchor_t anchor) {$/;"	f	namespace:__anon96
Token	src/3rd_party/yaml-cpp/token.h	/^  Token(TYPE type_, const Mark& mark_)$/;"	f	struct:YAML::Token
Token	src/3rd_party/yaml-cpp/token.h	/^struct Token {$/;"	s	namespace:YAML
TokenNames	src/3rd_party/yaml-cpp/token.h	/^const std::string TokenNames[] = {$/;"	m	namespace:YAML
Top	src/translator/history.h	/^  Result Top() const { return NBest(1)[0]; }$/;"	f	class:marian::History
Train	src/training/training.h	/^  Train(Ptr<Config> options) : options_(options) {}$/;"	f	class:marian::Train
Train	src/training/training.h	/^class Train : public ModelTask {$/;"	c	namespace:marian
TrainMNIST	src/examples/mnist/training.h	/^  TrainMNIST(Ptr<Config> options) : options_(options) {}$/;"	f	class:marian::TrainMNIST
TrainMNIST	src/examples/mnist/training.h	/^class TrainMNIST : public ModelTask {$/;"	c	namespace:marian
TrainingObserver	src/training/training_state.h	/^class TrainingObserver {$/;"	c	namespace:marian
TrainingState	src/training/training_state.h	/^  TrainingState(float learnRate) : eta(learnRate) {}$/;"	f	class:marian::TrainingState
TrainingState	src/training/training_state.h	/^class TrainingState {$/;"	c	namespace:marian
Transformer	src/models/transformer.h	/^class Transformer {$/;"	c	namespace:marian
TransformerState	src/models/transformer.h	/^  TransformerState(const rnn::States &states,$/;"	f	class:marian::TransformerState
TransformerState	src/models/transformer.h	/^class TransformerState : public DecoderState {$/;"	c	namespace:marian
Translate	src/3rd_party/yaml-cpp/tag.cpp	/^const std::string Tag::Translate(const Directives& directives) {$/;"	f	class:YAML::Tag
TranslateMultiGPU	src/translator/translator.h	/^  TranslateMultiGPU(Ptr<Config> options)$/;"	f	class:marian::TranslateMultiGPU
TranslateMultiGPU	src/translator/translator.h	/^class TranslateMultiGPU : public ModelTask {$/;"	c	namespace:marian
TranslateServiceMultiGPU	src/translator/translator.h	/^  TranslateServiceMultiGPU(Ptr<Config> options)$/;"	f	class:marian::TranslateServiceMultiGPU
TranslateServiceMultiGPU	src/translator/translator.h	/^class TranslateServiceMultiGPU : public ModelServiceTask {$/;"	c	namespace:marian
TranslateTagHandle	src/3rd_party/yaml-cpp/directives.cpp	/^const std::string Directives::TranslateTagHandle($/;"	f	class:YAML::Directives
TranslationValidator	src/training/validator.h	/^  TranslationValidator(std::vector<Ptr<Vocab>> vocabs, Ptr<Config> options)$/;"	f	class:marian::TranslationValidator
TranslationValidator	src/training/validator.h	/^class TranslationValidator : public Validator<data::Corpus> {$/;"	c	namespace:marian
TransposeNodeOp	src/graph/node_operators_unary.h	/^  TransposeNodeOp(Expr a, const std::vector<int>& axes)$/;"	f	struct:marian::TransposeNodeOp
TransposeNodeOp	src/graph/node_operators_unary.h	/^struct TransposeNodeOp : public UnaryNodeOp {$/;"	s	namespace:marian
TransposeTimeBatch	src/models/transformer.h	/^  Expr TransposeTimeBatch(Expr input) { return transpose(input, {0, 2, 1, 3}); }$/;"	f	class:marian::Transformer
TriangleMask	src/models/transformer.h	/^  Expr TriangleMask(Ptr<ExpressionGraph> graph, int length) {$/;"	f	class:marian::Transformer
Trim	src/common/utils.cpp	/^void Trim(std::string& s) {$/;"	f
True	src/3rd_party/svd/defs_and_types.h	33;"	d
True	src/common/keywords.h	/^struct True {};$/;"	s	namespace:marian::keywords
TrueFalseBool	src/3rd_party/yaml-cpp/emittermanip.h	/^  TrueFalseBool,  \/\/ true, false$/;"	e	enum:YAML::EMITTER_MANIP
TrueIfSizeable	src/3rd_party/spdlog/tests/catch.hpp	/^        template<int N> struct TrueIfSizeable : TrueType {};$/;"	s	class:Catch::Detail::IsStreamInsertableHelper
TrueType	src/3rd_party/catch.hpp	/^    struct TrueType { char sizer[1]; };$/;"	s	namespace:Catch::Detail
TrueType	src/3rd_party/spdlog/tests/catch.hpp	/^    struct TrueType {$/;"	s	namespace:Catch
TupleDetail	src/3rd_party/catch.hpp	/^namespace TupleDetail {$/;"	n	namespace:Catch
Type	src/3rd_party/spdlog/details/format.h	/^    enum Type$/;"	g	struct:fmt::internal::Value
Type	src/3rd_party/spdlog/details/format.h	/^    typedef Arg Type[N + 1]; \/\/ +1 for the list end Arg::NONE$/;"	t	struct:fmt::ArgArray
Type	src/3rd_party/spdlog/details/format.h	/^    typedef T Type;$/;"	t	struct:fmt::internal::MakeUnsigned
Type	src/3rd_party/spdlog/details/format.h	/^    typedef uint32_t Type;$/;"	t	struct:fmt::internal::TypeSelector
Type	src/3rd_party/spdlog/details/format.h	/^    typedef uint64_t Type;$/;"	t	struct:fmt::internal::TypeSelector
Type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    enum Type$/;"	g	struct:fmt::internal::Value
Type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef Arg Type[N + 1]; \/\/ +1 for the list end Arg::NONE$/;"	t	struct:fmt::ArgArray
Type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef T Type;$/;"	t	struct:fmt::internal::MakeUnsigned
Type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef uint32_t Type;$/;"	t	struct:fmt::internal::TypeSelector
Type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef uint64_t Type;$/;"	t	struct:fmt::internal::TypeSelector
Type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    typedef locale_t Type;$/;"	t	class:fmt::Locale
Type	src/3rd_party/yaml-cpp/emittermanip.h	/^  struct Type {$/;"	s	struct:YAML::_Tag
Type	src/3rd_party/yaml-cpp/node/impl.h	/^inline NodeType::value Node::Type() const {$/;"	f	class:YAML::Node
TypeSelector	src/3rd_party/spdlog/details/format.h	/^    TypeSelector<std::numeric_limits<T>::digits <= 32>::Type MainType;$/;"	t	struct:fmt::internal::IntTraits
TypeSelector	src/3rd_party/spdlog/details/format.h	/^struct TypeSelector$/;"	s	namespace:fmt::internal
TypeSelector	src/3rd_party/spdlog/details/format.h	/^struct TypeSelector<false>$/;"	s	namespace:fmt::internal
TypeSelector	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    TypeSelector<std::numeric_limits<T>::digits <= 32>::Type MainType;$/;"	t	struct:fmt::internal::IntTraits
TypeSelector	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct TypeSelector$/;"	s	namespace:fmt::internal
TypeSelector	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct TypeSelector<false>$/;"	s	namespace:fmt::internal
TypeSpec	src/3rd_party/spdlog/details/format.h	/^struct TypeSpec: EmptySpec$/;"	s	namespace:fmt
TypeSpec	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct TypeSpec : EmptySpec$/;"	s	namespace:fmt
TypedBadConversion	src/3rd_party/yaml-cpp/exceptions.h	/^  explicit TypedBadConversion(const Mark& mark_) : BadConversion(mark_) {}$/;"	f	class:YAML::TypedBadConversion
TypedBadConversion	src/3rd_party/yaml-cpp/exceptions.h	/^class TypedBadConversion : public BadConversion {$/;"	c	namespace:YAML
TypedKeyNotFound	src/3rd_party/yaml-cpp/exceptions.h	/^  TypedKeyNotFound(const Mark& mark_, const T& key_)$/;"	f	class:YAML::TypedKeyNotFound
TypedKeyNotFound	src/3rd_party/yaml-cpp/exceptions.h	/^class YAML_CPP_API TypedKeyNotFound : public KeyNotFound {$/;"	c	namespace:YAML
UINT	src/3rd_party/spdlog/details/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
UINT	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
ULONG_LONG	src/3rd_party/spdlog/details/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
ULONG_LONG	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        INT, UINT, LONG_LONG, ULONG_LONG, BOOL, CHAR, LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
ULongLong	src/3rd_party/spdlog/details/format.h	/^FMT_GCC_EXTENSION typedef unsigned long long ULongLong;$/;"	t	namespace:fmt
ULongLong	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^FMT_GCC_EXTENSION typedef unsigned long long ULongLong;$/;"	t	namespace:fmt
UNARY	src/functional/predicates.h	46;"	d
UNEXPECTED_END_MAP	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const UNEXPECTED_END_MAP = "unexpected end map token";$/;"	m	namespace:YAML::ErrorMsg
UNEXPECTED_END_SEQ	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const UNEXPECTED_END_SEQ = "unexpected end sequence token";$/;"	m	namespace:YAML::ErrorMsg
UNK	scripts/embeddings/prepare_corpus.py	/^UNK = '<unk>'$/;"	v
UNK	scripts/embeddings/process_word2vec.py	/^UNK = '<unk>'$/;"	v
UNKNOWN	src/3rd_party/yaml-cpp/scanner.h	/^    enum STATUS { VALID, INVALID, UNKNOWN };$/;"	e	enum:YAML::Scanner::IndentMarker::STATUS
UNKNOWN_ANCHOR	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const UNKNOWN_ANCHOR = "the referenced anchor is not defined";$/;"	m	namespace:YAML::ErrorMsg
UNKNOWN_TOKEN	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const UNKNOWN_TOKEN = "unknown token";$/;"	m	namespace:YAML::ErrorMsg
UNK_ID	src/data/types.h	/^const Word UNK_ID = 1;$/;"	m	namespace:marian
UNK_STR	src/data/types.h	/^const std::string UNK_STR = "<unk>";$/;"	m	namespace:marian
UNMATCHED_GROUP_TAG	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const UNMATCHED_GROUP_TAG = "unmatched group tag";$/;"	m	namespace:YAML::ErrorMsg
UNVERIFIED	src/3rd_party/yaml-cpp/token.h	/^  enum STATUS { VALID, INVALID, UNVERIFIED };$/;"	e	enum:YAML::Token::STATUS
URI	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& URI() {$/;"	f	namespace:YAML::Exp
UTF16ToUTF8	src/3rd_party/spdlog/details/format.cc	/^FMT_FUNC fmt::internal::UTF16ToUTF8::UTF16ToUTF8(fmt::WStringRef s)$/;"	f	class:fmt::internal::UTF16ToUTF8
UTF16ToUTF8	src/3rd_party/spdlog/details/format.h	/^    UTF16ToUTF8()$/;"	f	class:fmt::internal::UTF16ToUTF8
UTF16ToUTF8	src/3rd_party/spdlog/details/format.h	/^class UTF16ToUTF8$/;"	c	namespace:fmt::internal
UTF16ToUTF8	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^FMT_FUNC fmt::internal::UTF16ToUTF8::UTF16ToUTF8(fmt::WStringRef s) {$/;"	f	class:fmt::internal::UTF16ToUTF8
UTF16ToUTF8	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    UTF16ToUTF8() {}$/;"	f	class:fmt::internal::UTF16ToUTF8
UTF16ToUTF8	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class UTF16ToUTF8$/;"	c	namespace:fmt::internal
UTF8ToUTF16	src/3rd_party/spdlog/details/format.cc	/^FMT_FUNC fmt::internal::UTF8ToUTF16::UTF8ToUTF16(fmt::StringRef s)$/;"	f	class:fmt::internal::UTF8ToUTF16
UTF8ToUTF16	src/3rd_party/spdlog/details/format.h	/^class UTF8ToUTF16$/;"	c	namespace:fmt::internal
UTF8ToUTF16	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^FMT_FUNC fmt::internal::UTF8ToUTF16::UTF8ToUTF16(fmt::StringRef s) {$/;"	f	class:fmt::internal::UTF8ToUTF16
UTF8ToUTF16	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class UTF8ToUTF16$/;"	c	namespace:fmt::internal
UTIL_FUNC_NAME	src/3rd_party/exception.h	66;"	d
UTIL_FUNC_NAME	src/3rd_party/exception.h	69;"	d
UTIL_FUNC_NAME	src/3rd_party/exception.h	71;"	d
UTIL_LIKELY	src/3rd_party/exception.h	106;"	d
UTIL_LIKELY	src/3rd_party/exception.h	108;"	d
UTIL_THROW	src/3rd_party/exception.h	93;"	d
UTIL_THROW2	src/3rd_party/exception.h	96;"	d
UTIL_THROW_ARG	src/3rd_party/exception.h	90;"	d
UTIL_THROW_BACKEND	src/3rd_party/exception.h	83;"	d
UTIL_THROW_IF	src/3rd_party/exception.h	117;"	d
UTIL_THROW_IF2	src/3rd_party/exception.h	120;"	d
UTIL_THROW_IF_ARG	src/3rd_party/exception.h	111;"	d
UTIL_UNLIKELY	src/3rd_party/exception.h	100;"	d
UTIL_UNLIKELY	src/3rd_party/exception.h	102;"	d
UUx_	src/rnn/cells.h	/^  Expr UUx_, WWx_, bbx_;$/;"	m	class:marian::rnn::GRUNematus
U_	src/rnn/cells.h	/^  Expr U_, W_, b_;$/;"	m	class:marian::rnn::FastLSTM
U_	src/rnn/cells.h	/^  Expr U_, W_, b_;$/;"	m	class:marian::rnn::GRU
U_	src/rnn/cells.h	/^  Expr U_, W_, b_;$/;"	m	class:marian::rnn::GRUNematus
U_	src/rnn/cells.h	/^  Expr U_, W_, b_;$/;"	m	class:marian::rnn::Tanh
U_	src/rnn/cells.h	/^  Expr U_, W_, b_;$/;"	m	class:marian::rnn::TestLSTM
U_lnb_	src/rnn/cells.h	/^  Expr U_lns_, U_lnb_;$/;"	m	class:marian::rnn::GRUNematus
U_lns_	src/rnn/cells.h	/^  Expr U_lns_, U_lnb_;$/;"	m	class:marian::rnn::GRUNematus
Ua_	src/rnn/attention.h	/^  Expr Wa_, ba_, Ua_, va_;$/;"	m	class:marian::rnn::GlobalAttention
Uc_	src/rnn/cells.h	/^  Expr Uc_, Wc_, bc_;$/;"	m	class:marian::rnn::SlowLSTM
Uf_	src/rnn/cells.h	/^  Expr Uf_, Wf_, bf_;$/;"	m	class:marian::rnn::SlowLSTM
Ui_	src/rnn/cells.h	/^  Expr Ui_, Wi_, bi_;$/;"	m	class:marian::rnn::SlowLSTM
Um_	src/rnn/cells.h	/^  Expr Um_, Wm_, bm_;$/;"	m	class:marian::rnn::Multiplicative
UnaryFunctor	src/functional/predicates.h	/^      UnaryFunctor(Arg a) : x(a) {}$/;"	f	struct:marian::functional::UnaryFunctor
UnaryFunctor	src/functional/predicates.h	/^    struct UnaryFunctor {$/;"	s	namespace:marian::functional
UnaryNodeOp	src/graph/node_operators_unary.h	/^  UnaryNodeOp(Expr a, Args... args)$/;"	f	struct:marian::UnaryNodeOp
UnaryNodeOp	src/graph/node_operators_unary.h	/^struct UnaryNodeOp : public NaryNodeOp {$/;"	s	namespace:marian
Undefined	src/3rd_party/yaml-cpp/node/type.h	/^  enum value { Undefined, Null, Scalar, Sequence, Map };$/;"	e	enum:YAML::NodeType::value
Unknown	src/3rd_party/catch.hpp	/^        Unknown = -1,$/;"	e	enum:Catch::ResultWas::OfType
Unknown	src/3rd_party/spdlog/tests/catch.hpp	/^        Unknown = -1,$/;"	e	enum:Catch::ResultWas::OfType
UnseenWordPenalty	src/translator/scorers.h	/^  UnseenWordPenalty(const std::string& name,$/;"	f	class:marian::UnseenWordPenalty
UnseenWordPenalty	src/translator/scorers.h	/^class UnseenWordPenalty : public Scorer {$/;"	c	namespace:marian
Unsupported	src/3rd_party/spdlog/details/format.h	/^    typedef Null<T> Unsupported;$/;"	t	struct:fmt::internal::WCharHelper
Unsupported	src/3rd_party/spdlog/details/format.h	/^    typedef T Unsupported;$/;"	t	struct:fmt::internal::WCharHelper
Unsupported	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef Null<T> Unsupported;$/;"	t	struct:fmt::internal::WCharHelper
Unsupported	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef T Unsupported;$/;"	t	struct:fmt::internal::WCharHelper
Uo_	src/rnn/cells.h	/^  Expr Uo_, Wo_, bo_;$/;"	m	class:marian::rnn::SlowLSTM
UpperCase	src/3rd_party/yaml-cpp/emittermanip.h	/^  UpperCase,      \/\/ TRUE, N$/;"	e	enum:YAML::EMITTER_MANIP
Utf8Adjust	src/3rd_party/yaml-cpp/stream.cpp	/^inline char Utf8Adjust(unsigned long ch, unsigned char lead_bits,$/;"	f	namespace:YAML
Utf8BytesIndicated	src/3rd_party/yaml-cpp/emitterutils.cpp	/^int Utf8BytesIndicated(char ch) {$/;"	f	namespace:YAML::Utils::__anon77
Utf8_ByteOrderMark	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Utf8_ByteOrderMark() {$/;"	f	namespace:YAML::Exp
UtfIntroCharType	src/3rd_party/yaml-cpp/stream.cpp	/^enum UtfIntroCharType {$/;"	g	namespace:YAML	file:
UtfIntroState	src/3rd_party/yaml-cpp/stream.cpp	/^enum UtfIntroState {$/;"	g	namespace:YAML	file:
Utils	src/3rd_party/yaml-cpp/emitterutils.cpp	/^namespace Utils {$/;"	n	namespace:YAML	file:
Utils	src/3rd_party/yaml-cpp/emitterutils.h	/^namespace Utils {$/;"	n	namespace:YAML
Ux_	src/rnn/cells.h	/^  Expr Ux_, Wx_, bx_;$/;"	m	class:marian::rnn::GRUNematus
Ux_lnb_	src/rnn/cells.h	/^  Expr Ux_lns_, Ux_lnb_;$/;"	m	class:marian::rnn::GRUNematus
Ux_lns_	src/rnn/cells.h	/^  Expr Ux_lns_, Ux_lnb_;$/;"	m	class:marian::rnn::GRUNematus
VALID	src/3rd_party/yaml-cpp/scanner.h	/^    enum STATUS { VALID, INVALID, UNKNOWN };$/;"	e	enum:YAML::Scanner::IndentMarker::STATUS
VALID	src/3rd_party/yaml-cpp/token.h	/^  enum STATUS { VALID, INVALID, UNVERIFIED };$/;"	e	enum:YAML::Token::STATUS
VALID_SET	src/examples/mnist/mnist_ffnn.cpp	/^const std::vector<std::string> VALID_SET$/;"	v
VALUE	src/3rd_party/yaml-cpp/token.h	/^    VALUE,$/;"	e	enum:YAML::Token::TYPE
VALUE_DETAIL_ITERATOR_FWD_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/node/detail/iterator_fwd.h	2;"	d
VALUE_DETAIL_ITERATOR_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/node/detail/iterator.h	2;"	d
VALUE_DETAIL_MEMORY_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/node/detail/memory.h	2;"	d
VALUE_DETAIL_NODE_DATA_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/node/detail/node_data.h	2;"	d
VALUE_DETAIL_NODE_ITERATOR_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	2;"	d
VALUE_DETAIL_NODE_REF_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/node/detail/node_ref.h	2;"	d
VALUE_ITERATOR_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/node/iterator.h	2;"	d
VALUE_PARSE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/node/parse.h	2;"	d
VALUE_PTR_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/node/ptr.h	2;"	d
VALUE_TYPE_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/node/type.h	2;"	d
VERBATIM	src/3rd_party/yaml-cpp/tag.h	/^    VERBATIM,$/;"	e	enum:YAML::Tag::TYPE
Validate	src/3rd_party/yaml-cpp/simplekey.cpp	/^void Scanner::SimpleKey::Validate() {$/;"	f	class:YAML::Scanner::SimpleKey
Validator	src/training/validator.h	/^  Validator(std::vector<Ptr<Vocab>> vocabs,$/;"	f	class:marian::Validator
Validator	src/training/validator.h	/^class Validator : public ValidatorBase {$/;"	c	namespace:marian
ValidatorBase	src/training/validator.h	/^  ValidatorBase(bool lowerIsBetter)$/;"	f	class:marian::ValidatorBase
ValidatorBase	src/training/validator.h	/^class ValidatorBase {$/;"	c	namespace:marian
Validators	src/training/validator.cpp	/^std::vector<Ptr<Validator<data::Corpus>>> Validators($/;"	f	namespace:marian
Value	src/3rd_party/spdlog/details/format.h	/^struct Value$/;"	s	namespace:fmt::internal
Value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct Value$/;"	s	namespace:fmt::internal
Value	src/3rd_party/yaml-cpp/emittermanip.h	/^  Value,$/;"	e	enum:YAML::EMITTER_MANIP
Value	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Value() {$/;"	f	namespace:YAML::Exp
ValueInFlow	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& ValueInFlow() {$/;"	f	namespace:YAML::Exp
ValueInJSONFlow	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& ValueInJSONFlow() {$/;"	f	namespace:YAML::Exp
Var	src/functional/operands.h	/^    struct Var {$/;"	s	namespace:marian::functional
Verbatim	src/3rd_party/yaml-cpp/emittermanip.h	/^    enum value { Verbatim, PrimaryHandle, NamedHandle };$/;"	e	enum:YAML::_Tag::Type::value
VerbatimTag	src/3rd_party/yaml-cpp/emittermanip.h	/^inline _Tag VerbatimTag(const std::string content) {$/;"	f	namespace:YAML
VerbatimTagEnd	src/3rd_party/yaml-cpp/exp.h	/^const char VerbatimTagEnd = '>';$/;"	m	namespace:YAML::Keys
VerbatimTagStart	src/3rd_party/yaml-cpp/exp.h	/^const char VerbatimTagStart = '<';$/;"	m	namespace:YAML::Keys
VerifySimpleKey	src/3rd_party/yaml-cpp/simplekey.cpp	/^bool Scanner::VerifySimpleKey() {$/;"	f	class:YAML::Scanner
Version	src/3rd_party/yaml-cpp/directives.h	/^struct Version {$/;"	s	namespace:YAML
Vocab	src/data/vocab.cpp	/^Vocab::Vocab() {}$/;"	f	class:marian::Vocab
Vocab	src/data/vocab.h	/^class Vocab {$/;"	c	namespace:marian
VocabFreqOrderer	src/data/vocab.cpp	/^  VocabFreqOrderer(std::unordered_map<std::string, size_t>& counter)$/;"	f	class:marian::Vocab::VocabFreqOrderer
VocabFreqOrderer	src/data/vocab.cpp	/^class Vocab::VocabFreqOrderer {$/;"	c	class:marian::Vocab	file:
WArrayWriter	src/3rd_party/spdlog/details/format.h	/^typedef BasicArrayWriter<wchar_t> WArrayWriter;$/;"	t
WArrayWriter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef BasicArrayWriter<wchar_t> WArrayWriter;$/;"	t
WCStringRef	src/3rd_party/spdlog/details/format.h	/^typedef BasicCStringRef<wchar_t> WCStringRef;$/;"	t	namespace:fmt
WCStringRef	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef BasicCStringRef<wchar_t> WCStringRef;$/;"	t	namespace:fmt
WCharHelper	src/3rd_party/spdlog/details/format.h	/^struct WCharHelper$/;"	s	namespace:fmt::internal
WCharHelper	src/3rd_party/spdlog/details/format.h	/^struct WCharHelper<T, wchar_t>$/;"	s	namespace:fmt::internal
WCharHelper	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct WCharHelper$/;"	s	namespace:fmt::internal
WCharHelper	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct WCharHelper<T, wchar_t>$/;"	s	namespace:fmt::internal
WExpr	src/graph/chainable.h	/^typedef Weak<Chainable<Tensor>> WExpr;$/;"	t	namespace:marian
WHEN	src/3rd_party/catch.hpp	11500;"	d
WHEN	src/3rd_party/spdlog/tests/catch.hpp	9405;"	d
WHITE	src/3rd_party/spdlog/details/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
WHITE	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	e	enum:Color
WHITE	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    const WORD WHITE = FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE;$/;"	m	class:spdlog::sinks::wincolor_sink
WIN32_LEAN_AND_MEAN	src/3rd_party/catch.hpp	6337;"	d
WIN32_LEAN_AND_MEAN	src/3rd_party/catch.hpp	6350;"	d
WIN32_LEAN_AND_MEAN	src/3rd_party/spdlog/details/os.h	21;"	d
WIN32_LEAN_AND_MEAN	src/3rd_party/spdlog/include/spdlog/details/os.h	28;"	d
WMemoryWriter	src/3rd_party/spdlog/details/format.h	/^typedef BasicMemoryWriter<wchar_t> WMemoryWriter;$/;"	t
WMemoryWriter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef BasicMemoryWriter<wchar_t> WMemoryWriter;$/;"	t
WORD2VEC_OPTIONS	scripts/embeddings/process_word2vec.py	/^WORD2VEC_OPTIONS = '-cbow 0 -window 5 -negative -hs 1 -sample 1e-3 -binary 0'$/;"	v
WRONLY	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^        WRONLY = FMT_POSIX(O_WRONLY), \/\/ Open for writing only.$/;"	e	enum:fmt::File::__anon41
WS	src/3rd_party/simple-websocket-server/server_ws.hpp	/^  typedef asio::ip::tcp::socket WS;$/;"	t	namespace:SimpleWeb
WSGIServer	scripts/python/mariannmt_server.py	/^    from gevent.pywsgi import WSGIServer$/;"	i
WSTRING	src/3rd_party/spdlog/details/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
WSTRING	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        CSTRING, STRING, WSTRING, POINTER, CUSTOM$/;"	e	enum:fmt::internal::Value::Type
WStringRef	src/3rd_party/spdlog/details/format.h	/^typedef BasicStringRef<wchar_t> WStringRef;$/;"	t	namespace:fmt
WStringRef	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef BasicStringRef<wchar_t> WStringRef;$/;"	t	namespace:fmt
WWriter	src/3rd_party/spdlog/details/format.h	/^typedef BasicWriter<wchar_t> WWriter;$/;"	t	namespace:fmt
WWriter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef BasicWriter<wchar_t> WWriter;$/;"	t	namespace:fmt
WWx_	src/rnn/cells.h	/^  Expr UUx_, WWx_, bbx_;$/;"	m	class:marian::rnn::GRUNematus
W_	src/rnn/cells.h	/^  Expr U_, W_, b_;$/;"	m	class:marian::rnn::FastLSTM
W_	src/rnn/cells.h	/^  Expr U_, W_, b_;$/;"	m	class:marian::rnn::GRU
W_	src/rnn/cells.h	/^  Expr U_, W_, b_;$/;"	m	class:marian::rnn::GRUNematus
W_	src/rnn/cells.h	/^  Expr U_, W_, b_;$/;"	m	class:marian::rnn::Tanh
W_	src/rnn/cells.h	/^  Expr U_, W_, b_;$/;"	m	class:marian::rnn::TestLSTM
W_comb_att_lnb_	src/rnn/attention.h	/^  Expr W_comb_att_lns_, W_comb_att_lnb_;$/;"	m	class:marian::rnn::GlobalAttention
W_comb_att_lns_	src/rnn/attention.h	/^  Expr W_comb_att_lns_, W_comb_att_lnb_;$/;"	m	class:marian::rnn::GlobalAttention
W_lnb_	src/rnn/cells.h	/^  Expr W_lns_, W_lnb_;$/;"	m	class:marian::rnn::GRUNematus
W_lns_	src/rnn/cells.h	/^  Expr W_lns_, W_lnb_;$/;"	m	class:marian::rnn::GRUNematus
Wa_	src/rnn/attention.h	/^  Expr Wa_, ba_, Ua_, va_;$/;"	m	class:marian::rnn::GlobalAttention
WaitingForKey	src/3rd_party/yaml-cpp/emitfromevents.h	/^    enum value { WaitingForSequenceEntry, WaitingForKey, WaitingForValue };$/;"	e	enum:YAML::EmitFromEvents::State::value
WaitingForSequenceEntry	src/3rd_party/yaml-cpp/emitfromevents.h	/^    enum value { WaitingForSequenceEntry, WaitingForKey, WaitingForValue };$/;"	e	enum:YAML::EmitFromEvents::State::value
WaitingForValue	src/3rd_party/yaml-cpp/emitfromevents.h	/^    enum value { WaitingForSequenceEntry, WaitingForKey, WaitingForValue };$/;"	e	enum:YAML::EmitFromEvents::State::value
Warning	src/3rd_party/catch.hpp	/^        Warning = 2,$/;"	e	enum:Catch::ResultWas::OfType
Warning	src/3rd_party/spdlog/tests/catch.hpp	/^        Warning = 2,$/;"	e	enum:Catch::ResultWas::OfType
Wc_	src/rnn/cells.h	/^  Expr Uc_, Wc_, bc_;$/;"	m	class:marian::rnn::SlowLSTM
Wc_att_lnb_	src/rnn/attention.h	/^  Expr Wc_att_lns_, Wc_att_lnb_;$/;"	m	class:marian::rnn::GlobalAttention
Wc_att_lns_	src/rnn/attention.h	/^  Expr Wc_att_lns_, Wc_att_lnb_;$/;"	m	class:marian::rnn::GlobalAttention
WebSocketError	scripts/python/mariannmt_server.py	/^    from geventwebsocket import WebSocketError$/;"	i
WebSocketHandler	scripts/python/mariannmt_server.py	/^    from geventwebsocket.handler import WebSocketHandler$/;"	i
Wf_	src/rnn/cells.h	/^  Expr Uf_, Wf_, bf_;$/;"	m	class:marian::rnn::SlowLSTM
Wi_	src/rnn/cells.h	/^  Expr Ui_, Wi_, bi_;$/;"	m	class:marian::rnn::SlowLSTM
WidthHandler	src/3rd_party/spdlog/details/format.cc	/^			explicit WidthHandler(fmt::FormatSpec &spec): spec_(spec)$/;"	f	class:fmt::__anon34::WidthHandler
WidthHandler	src/3rd_party/spdlog/details/format.cc	/^		class WidthHandler: public fmt::internal::ArgVisitor<WidthHandler, unsigned>$/;"	c	namespace:fmt::__anon34	file:
WidthHandler	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  explicit WidthHandler(FormatSpec &spec) : spec_(spec) {}$/;"	f	class:fmt::__anon71::WidthHandler
WidthHandler	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^class WidthHandler : public ArgVisitor<WidthHandler, unsigned> {$/;"	c	namespace:fmt::__anon71	file:
WidthSpec	src/3rd_party/spdlog/details/format.h	/^    WidthSpec(unsigned width, wchar_t fill): width_(width), fill_(fill)$/;"	f	struct:fmt::WidthSpec
WidthSpec	src/3rd_party/spdlog/details/format.h	/^struct WidthSpec$/;"	s	namespace:fmt
WidthSpec	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    WidthSpec(unsigned width, wchar_t fill) : width_(width), fill_(fill) {}$/;"	f	struct:fmt::WidthSpec
WidthSpec	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^struct WidthSpec$/;"	s	namespace:fmt
WindowsError	src/3rd_party/spdlog/details/format.h	/^    WindowsError(int error_code, CStringRef message)$/;"	f	class:WindowsError
WindowsError	src/3rd_party/spdlog/details/format.h	/^class WindowsError: public SystemError$/;"	c
WindowsError	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    WindowsError(int error_code, CStringRef message)$/;"	f	class:WindowsError
WindowsError	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class WindowsError : public SystemError$/;"	c
WindowsException	src/3rd_party/exception.cpp	/^WindowsException::WindowsException() throw() {$/;"	f	class:util::WindowsException
WindowsException	src/3rd_party/exception.h	/^class WindowsException : public Exception {$/;"	c	namespace:util
Wm_	src/rnn/cells.h	/^  Expr Um_, Wm_, bm_;$/;"	m	class:marian::rnn::Multiplicative
Wo_	src/rnn/cells.h	/^  Expr Uo_, Wo_, bo_;$/;"	m	class:marian::rnn::SlowLSTM
Word	src/3rd_party/yaml-cpp/exp.h	/^inline const RegEx& Word() {$/;"	f	namespace:YAML::Exp
Word	src/data/types.h	/^typedef size_t Word;$/;"	t	namespace:marian
Word2VecReader	src/layers/word2vec_reader.h	/^  Word2VecReader() {}$/;"	f	class:marian::Word2VecReader
Word2VecReader	src/layers/word2vec_reader.h	/^class Word2VecReader {$/;"	c	namespace:marian
WordAlignment	src/data/corpus.h	/^  WordAlignment(const std::string& fname) {$/;"	f	class:marian::data::WordAlignment
WordAlignment	src/data/corpus.h	/^class WordAlignment {$/;"	c	namespace:marian::data
WordBatch	src/data/corpus.cpp	/^typedef std::vector<size_t> WordBatch;$/;"	t	namespace:marian::data	file:
WordEmbeddings	src/models/transformer.h	/^  Expr WordEmbeddings(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::EncoderTransformer
WordMask	src/data/corpus.cpp	/^typedef std::pair<WordBatch, MaskBatch> WordMask;$/;"	t	namespace:marian::data	file:
WordPenalty	src/translator/scorers.h	/^  WordPenalty(const std::string& name, float weight, int dimVocab)$/;"	f	class:marian::WordPenalty
WordPenalty	src/translator/scorers.h	/^class WordPenalty : public Scorer {$/;"	c	namespace:marian
WordPenaltyState	src/translator/scorers.h	/^  WordPenaltyState(int dimVocab, Expr penalties)$/;"	f	class:marian::WordPenaltyState
WordPenaltyState	src/translator/scorers.h	/^class WordPenaltyState : public ScorerState {$/;"	c	namespace:marian
Words	src/data/types.h	/^typedef std::vector<Word> Words;$/;"	t	namespace:marian
Words	src/translator/hypothesis.h	/^typedef std::vector<size_t> Words;$/;"	t	namespace:marian
Write	src/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(bool b) {$/;"	f	class:YAML::Emitter
Write	src/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(char ch) {$/;"	f	class:YAML::Emitter
Write	src/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(const Binary& binary) {$/;"	f	class:YAML::Emitter
Write	src/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(const _Alias& alias) {$/;"	f	class:YAML::Emitter
Write	src/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(const _Anchor& anchor) {$/;"	f	class:YAML::Emitter
Write	src/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(const _Comment& comment) {$/;"	f	class:YAML::Emitter
Write	src/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(const _Null& \/*null*\/) {$/;"	f	class:YAML::Emitter
Write	src/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(const _Tag& tag) {$/;"	f	class:YAML::Emitter
Write	src/3rd_party/yaml-cpp/emitter.cpp	/^Emitter& Emitter::Write(const std::string& str) {$/;"	f	class:YAML::Emitter
Write	src/rescorer/score_collector.cpp	/^void ScoreCollector::Write(long id, float score) {$/;"	f	class:marian::ScoreCollector
Write	src/translator/output_collector.cpp	/^void OutputCollector::Write(long sourceId,$/;"	f	class:marian::OutputCollector
WriteAlias	src/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteAlias(ostream_wrapper& out, const std::string& str) {$/;"	f	namespace:YAML::Utils
WriteAliasName	src/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteAliasName(ostream_wrapper& out, const std::string& str) {$/;"	f	namespace:YAML::Utils::__anon77
WriteAnchor	src/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteAnchor(ostream_wrapper& out, const std::string& str) {$/;"	f	namespace:YAML::Utils
WriteBinary	src/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteBinary(ostream_wrapper& out, const Binary& binary) {$/;"	f	namespace:YAML::Utils
WriteChar	src/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteChar(ostream_wrapper& out, char ch) {$/;"	f	namespace:YAML::Utils
WriteCodePoint	src/3rd_party/yaml-cpp/emitterutils.cpp	/^void WriteCodePoint(ostream_wrapper& out, int codePoint) {$/;"	f	namespace:YAML::Utils::__anon77
WriteComment	src/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteComment(ostream_wrapper& out, const std::string& str,$/;"	f	namespace:YAML::Utils
WriteDoubleQuoteEscapeSequence	src/3rd_party/yaml-cpp/emitterutils.cpp	/^void WriteDoubleQuoteEscapeSequence(ostream_wrapper& out, int codePoint) {$/;"	f	namespace:YAML::Utils::__anon77
WriteDoubleQuotedString	src/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteDoubleQuotedString(ostream_wrapper& out, const std::string& str,$/;"	f	namespace:YAML::Utils
WriteIntegralType	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& Emitter::WriteIntegralType(T value) {$/;"	f	class:YAML::Emitter
WriteLiteralString	src/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteLiteralString(ostream_wrapper& out, const std::string& str,$/;"	f	namespace:YAML::Utils
WriteSingleQuotedString	src/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteSingleQuotedString(ostream_wrapper& out, const std::string& str) {$/;"	f	namespace:YAML::Utils
WriteStreamable	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& Emitter::WriteStreamable(T value) {$/;"	f	class:YAML::Emitter
WriteTag	src/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteTag(ostream_wrapper& out, const std::string& str, bool verbatim) {$/;"	f	namespace:YAML::Utils
WriteTagWithPrefix	src/3rd_party/yaml-cpp/emitterutils.cpp	/^bool WriteTagWithPrefix(ostream_wrapper& out, const std::string& prefix,$/;"	f	namespace:YAML::Utils
Writer	src/3rd_party/spdlog/details/format.h	/^typedef BasicWriter<char> Writer;$/;"	t	namespace:fmt
Writer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef BasicWriter<char> Writer;$/;"	t	namespace:fmt
WsServer	src/command/marian_server.cpp	/^typedef SimpleWeb::SocketServer<SimpleWeb::WS> WsServer;$/;"	t	file:
Wx_	src/rnn/cells.h	/^  Expr Ux_, Wx_, bx_;$/;"	m	class:marian::rnn::GRUNematus
Wx_lnb_	src/rnn/cells.h	/^  Expr Wx_lns_, Wx_lnb_;$/;"	m	class:marian::rnn::GRUNematus
Wx_lns_	src/rnn/cells.h	/^  Expr Wx_lns_, Wx_lnb_;$/;"	m	class:marian::rnn::GRUNematus
YAML	src/3rd_party/yaml-cpp/anchor.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/binary.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/binary.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/collectionstack.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/contrib/anchordict.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/contrib/graphbuilder.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/convert.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/directives.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/directives.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/emit.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/emitfromevents.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/emitfromevents.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/emitter.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/emitter.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/emitterdef.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/emittermanip.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/emitterstate.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/emitterstate.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/emitterstyle.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/emitterutils.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/emitterutils.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/eventhandler.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/exceptions.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/exceptions.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/exp.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/exp.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/indentation.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/mark.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/memory.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/node.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/node/convert.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/node/detail/bool_type.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/node/detail/impl.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/node/detail/iterator_fwd.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/node/detail/memory.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/node/detail/node.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/node/emit.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/node/impl.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/node/iterator.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/node/node.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/node/parse.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/node/ptr.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/node/type.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/node_data.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/nodebuilder.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/nodebuilder.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/nodeevents.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/nodeevents.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/noncopyable.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/null.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/null.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/ostream_wrapper.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/ostream_wrapper.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/parse.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/parser.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/parser.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/ptr_vector.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/regex_yaml.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/regex_yaml.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/regeximpl.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/scanner.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/scanner.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/scanscalar.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/scanscalar.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/scantag.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/scantag.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/scantoken.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/setting.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/simplekey.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/singledocparser.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/singledocparser.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/stlemitter.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/stream.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/stream.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/streamcharsource.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/stringsource.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/tag.cpp	/^namespace YAML {$/;"	n	file:
YAML	src/3rd_party/yaml-cpp/tag.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/token.h	/^namespace YAML {$/;"	n
YAML	src/3rd_party/yaml-cpp/traits.h	/^namespace YAML {$/;"	n
YAML_CPP_API	src/3rd_party/yaml-cpp/dll.h	17;"	d
YAML_CPP_API	src/3rd_party/yaml-cpp/dll.h	24;"	d
YAML_CPP_API	src/3rd_party/yaml-cpp/dll.h	27;"	d
YAML_CPP_API	src/3rd_party/yaml-cpp/dll.h	30;"	d
YAML_CPP_OPERATOR_BOOL	src/3rd_party/yaml-cpp/node/detail/bool_type.h	20;"	d
YAML_DEFINE_CONVERT_STREAMABLE	src/3rd_party/yaml-cpp/node/convert.h	154;"	d
YAML_DEFINE_CONVERT_STREAMABLE	src/3rd_party/yaml-cpp/node/convert.h	91;"	d
YAML_DEFINE_CONVERT_STREAMABLE_SIGNED	src/3rd_party/yaml-cpp/node/convert.h	129;"	d
YAML_DEFINE_CONVERT_STREAMABLE_SIGNED	src/3rd_party/yaml-cpp/node/convert.h	152;"	d
YAML_DEFINE_CONVERT_STREAMABLE_UNSIGNED	src/3rd_party/yaml-cpp/node/convert.h	132;"	d
YAML_DEFINE_CONVERT_STREAMABLE_UNSIGNED	src/3rd_party/yaml-cpp/node/convert.h	153;"	d
YAML_DIRECTIVE_ARGS	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const YAML_DIRECTIVE_ARGS =$/;"	m	namespace:YAML::ErrorMsg
YAML_H_62B23520_7C8E_11DE_8A39_0800200C9A66	src/3rd_party/yaml-cpp/yaml.h	2;"	d
YAML_MAJOR_VERSION	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const YAML_MAJOR_VERSION = "YAML major version too large";$/;"	m	namespace:YAML::ErrorMsg
YAML_PREFETCH_SIZE	src/3rd_party/yaml-cpp/stream.cpp	6;"	d	file:
YAML_REGISTER_TYPE	src/common/options.h	11;"	d
YAML_VERSION	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const YAML_VERSION = "bad YAML version: ";$/;"	m	namespace:YAML::ErrorMsg
YELLOW	src/3rd_party/spdlog/details/format.h	/^    BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE$/;"	e	enum:Color
YELLOW	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^enum Color { BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE };$/;"	e	enum:Color
YELLOW	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    const WORD YELLOW = FOREGROUND_RED | FOREGROUND_GREEN;$/;"	m	class:spdlog::sinks::wincolor_sink
Y_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class Y_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
Yes	src/3rd_party/catch.hpp	/^        Yes,$/;"	e	enum:Catch::CaseSensitive::Choice
Yes	src/3rd_party/spdlog/details/format.h	/^typedef char Yes[1];$/;"	t	namespace:fmt::internal
Yes	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef char Yes[1];$/;"	t	namespace:fmt::internal
YesNoBool	src/3rd_party/yaml-cpp/emittermanip.h	/^  YesNoBool,      \/\/ yes, no$/;"	e	enum:YAML::EMITTER_MANIP
ZERO_INDENT_IN_BLOCK	src/3rd_party/yaml-cpp/exceptions.h	/^const char* const ZERO_INDENT_IN_BLOCK =$/;"	m	namespace:YAML::ErrorMsg
Zombie	src/3rd_party/yaml-cpp/node/node.h	/^  enum Zombie { ZombieNode };$/;"	g	class:YAML::Node
ZombieNode	src/3rd_party/yaml-cpp/node/node.h	/^  enum Zombie { ZombieNode };$/;"	e	enum:YAML::Node::Zombie
_0c	src/functional/functional.h	/^    static C<0> _0c;$/;"	m	namespace:marian::functional
_1	src/functional/functional.h	/^    static ref<1> _1;$/;"	m	namespace:marian::functional
_1c	src/functional/functional.h	/^    static C<1> _1c;$/;"	m	namespace:marian::functional
_1cneg	src/functional/functional.h	/^    static C<-1> _1cneg;$/;"	m	namespace:marian::functional
_2	src/functional/functional.h	/^    static ref<2> _2;$/;"	m	namespace:marian::functional
_2c	src/functional/functional.h	/^    static C<2> _2c;$/;"	m	namespace:marian::functional
_2cneg	src/functional/functional.h	/^    static C<-2> _2cneg;$/;"	m	namespace:marian::functional
_3	src/functional/functional.h	/^    static ref<3> _3;$/;"	m	namespace:marian::functional
_4	src/functional/functional.h	/^    static ref<4> _4;$/;"	m	namespace:marian::functional
_5	src/functional/functional.h	/^    static ref<5> _5;$/;"	m	namespace:marian::functional
_6	src/functional/functional.h	/^    static ref<6> _6;$/;"	m	namespace:marian::functional
_7	src/functional/functional.h	/^    static ref<7> _7;$/;"	m	namespace:marian::functional
_8	src/functional/functional.h	/^    static ref<8> _8;$/;"	m	namespace:marian::functional
_9	src/functional/functional.h	/^    static ref<9> _9;$/;"	m	namespace:marian::functional
_Alias	src/3rd_party/yaml-cpp/emittermanip.h	/^  _Alias(const std::string& content_) : content(content_) {}$/;"	f	struct:YAML::_Alias
_Alias	src/3rd_party/yaml-cpp/emittermanip.h	/^struct _Alias {$/;"	s	namespace:YAML
_Anchor	src/3rd_party/yaml-cpp/emittermanip.h	/^  _Anchor(const std::string& content_) : content(content_) {}$/;"	f	struct:YAML::_Anchor
_Anchor	src/3rd_party/yaml-cpp/emittermanip.h	/^struct _Anchor {$/;"	s	namespace:YAML
_BSD_SOURCE	src/3rd_party/catch.hpp	154;"	d
_CRT_SECURE_NO_WARNINGS	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	12;"	d	file:
_Comment	src/3rd_party/yaml-cpp/emittermanip.h	/^  _Comment(const std::string& content_) : content(content_) {}$/;"	f	struct:YAML::_Comment
_Comment	src/3rd_party/yaml-cpp/emittermanip.h	/^struct _Comment {$/;"	s	namespace:YAML
_CreateNewAnchor	src/3rd_party/yaml-cpp/nodeevents.h	/^    anchor_t _CreateNewAnchor() { return ++m_curAnchor; }$/;"	f	class:YAML::NodeEvents::AliasManager
_ELPP_THREAD_SAFE	src/3rd_party/spdlog/bench/easylogging-bench-mt.cpp	10;"	d	file:
_Indent	src/3rd_party/yaml-cpp/emittermanip.h	/^  _Indent(int value_) : value(value_) {}$/;"	f	struct:YAML::_Indent
_Indent	src/3rd_party/yaml-cpp/emittermanip.h	/^struct _Indent {$/;"	s	namespace:YAML
_Null	src/3rd_party/yaml-cpp/null.h	/^struct YAML_CPP_API _Null {};$/;"	s	namespace:YAML
_Precision	src/3rd_party/yaml-cpp/emittermanip.h	/^  _Precision(int floatPrecision_, int doublePrecision_)$/;"	f	struct:YAML::_Precision
_Precision	src/3rd_party/yaml-cpp/emittermanip.h	/^struct _Precision {$/;"	s	namespace:YAML
_ReadAheadTo	src/3rd_party/yaml-cpp/stream.cpp	/^bool Stream::_ReadAheadTo(size_t i) const {$/;"	f	class:YAML::Stream
_SH_DENYNO	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	39;"	d	file:
_Set	src/3rd_party/yaml-cpp/emitterstate.h	/^void EmitterState::_Set(Setting<T>& fmt, T value, FmtScope::value scope) {$/;"	f	class:YAML::EmitterState
_Tag	src/3rd_party/yaml-cpp/emittermanip.h	/^  explicit _Tag(const std::string& prefix_, const std::string& content_,$/;"	f	struct:YAML::_Tag
_Tag	src/3rd_party/yaml-cpp/emittermanip.h	/^struct _Tag {$/;"	s	namespace:YAML
__DI__	src/gpu/defs.h	11;"	d
__DI__	src/gpu/defs.h	20;"	d
__D__	src/gpu/defs.h	18;"	d
__D__	src/gpu/defs.h	9;"	d
__HDI__	src/gpu/defs.h	13;"	d
__HDI__	src/gpu/defs.h	22;"	d
__HD__	src/gpu/defs.h	12;"	d
__HD__	src/gpu/defs.h	21;"	d
__HI__	src/gpu/defs.h	10;"	d
__HI__	src/gpu/defs.h	19;"	d
__H__	src/gpu/defs.h	17;"	d
__H__	src/gpu/defs.h	8;"	d
__STRICT_ANSI__	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	15;"	d
__has_feature	src/3rd_party/spdlog/include/spdlog/details/os.h	53;"	d
_async_log_helper	src/3rd_party/spdlog/async_logger.h	/^    std::unique_ptr<details::async_log_helper> _async_log_helper;$/;"	m	class:spdlog::async_logger
_async_log_helper	src/3rd_party/spdlog/include/spdlog/async_logger.h	/^    std::unique_ptr<details::async_log_helper> _async_log_helper;$/;"	m	class:spdlog::SPDLOG_FINAL
_async_mode	src/3rd_party/spdlog/details/registry.h	/^    bool _async_mode = false;$/;"	m	class:spdlog::details::registry_t
_async_mode	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    bool _async_mode = false;$/;"	m	class:spdlog::details::registry_t
_async_q_size	src/3rd_party/spdlog/details/registry.h	/^    size_t _async_q_size = 0;$/;"	m	class:spdlog::details::registry_t
_async_q_size	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    size_t _async_q_size = 0;$/;"	m	class:spdlog::details::registry_t
_base_filename	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    filename_t _base_filename;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL
_base_filename	src/3rd_party/spdlog/sinks/file_sinks.h	/^    filename_t _base_filename;$/;"	m	class:spdlog::sinks::daily_file_sink
_base_filename	src/3rd_party/spdlog/sinks/file_sinks.h	/^    filename_t _base_filename;$/;"	m	class:spdlog::sinks::rotating_file_sink
_callback_logger	src/3rd_party/spdlog/details/line_logger_fwd.h	/^    logger* _callback_logger;$/;"	m	class:spdlog::details::line_logger
_ch	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    char _ch;$/;"	m	class:spdlog::details::ch_formatter
_ch	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^    char _ch;$/;"	m	class:spdlog::details::SPDLOG_FINAL
_current_size	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    std::size_t _current_size;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL
_current_size	src/3rd_party/spdlog/sinks/file_sinks.h	/^    std::size_t _current_size;$/;"	m	class:spdlog::sinks::rotating_file_sink
_default_err_handler	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::_default_err_handler(const std::string &msg)$/;"	f	class:spdlog::logger
_device	src/training/dropper.h	/^  int _device;$/;"	m	class:marian::GradientDropBase
_ecvt_s	src/3rd_party/spdlog/details/format.h	/^inline DummyInt _ecvt_s(...)$/;"	f	namespace:fmt::internal
_ecvt_s	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline DummyInt _ecvt_s(...)$/;"	f	namespace:fmt::internal
_enabled	src/3rd_party/spdlog/details/line_logger_fwd.h	/^    bool _enabled;$/;"	m	class:spdlog::details::line_logger
_err_handler	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^    log_err_handler _err_handler;$/;"	m	class:spdlog::details::async_log_helper
_err_handler	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    log_err_handler _err_handler;$/;"	m	class:spdlog::details::registry_t
_err_handler	src/3rd_party/spdlog/include/spdlog/logger.h	/^    log_err_handler _err_handler;$/;"	m	class:spdlog::logger
_extension	src/3rd_party/spdlog/sinks/file_sinks.h	/^    filename_t _extension;$/;"	m	class:spdlog::sinks::daily_file_sink
_extension	src/3rd_party/spdlog/sinks/file_sinks.h	/^    filename_t _extension;$/;"	m	class:spdlog::sinks::rotating_file_sink
_fd	src/3rd_party/spdlog/details/file_helper.h	/^    FILE* _fd;$/;"	m	class:spdlog::details::file_helper
_fd	src/3rd_party/spdlog/include/spdlog/details/file_helper.h	/^    FILE* _fd;$/;"	m	class:spdlog::details::file_helper
_file_helper	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    details::file_helper _file_helper;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL
_file_helper	src/3rd_party/spdlog/sinks/file_sinks.h	/^    details::file_helper _file_helper;$/;"	m	class:spdlog::sinks::daily_file_sink
_file_helper	src/3rd_party/spdlog/sinks/file_sinks.h	/^    details::file_helper _file_helper;$/;"	m	class:spdlog::sinks::rotating_file_sink
_file_helper	src/3rd_party/spdlog/sinks/file_sinks.h	/^    details::file_helper _file_helper;$/;"	m	class:spdlog::sinks::simple_file_sink
_filename	src/3rd_party/spdlog/details/file_helper.h	/^    filename_t _filename;$/;"	m	class:spdlog::details::file_helper
_filename	src/3rd_party/spdlog/include/spdlog/details/file_helper.h	/^    filename_t _filename;$/;"	m	class:spdlog::details::file_helper
_finite	src/3rd_party/spdlog/details/format.h	/^inline DummyInt _finite(...)$/;"	f	namespace:fmt::internal
_finite	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline DummyInt _finite(...)$/;"	f	namespace:fmt::internal
_flush_interval_ms	src/3rd_party/spdlog/details/async_log_helper.h	/^    const std::chrono::milliseconds _flush_interval_ms;$/;"	m	class:spdlog::details::async_log_helper
_flush_interval_ms	src/3rd_party/spdlog/details/registry.h	/^    std::chrono::milliseconds _flush_interval_ms;$/;"	m	class:spdlog::details::registry_t
_flush_interval_ms	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^    const std::chrono::milliseconds _flush_interval_ms;$/;"	m	class:spdlog::details::async_log_helper
_flush_interval_ms	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    std::chrono::milliseconds _flush_interval_ms;$/;"	m	class:spdlog::details::registry_t
_flush_level	src/3rd_party/spdlog/include/spdlog/logger.h	/^    spdlog::level_t _flush_level;$/;"	m	class:spdlog::logger
_flush_requested	src/3rd_party/spdlog/details/async_log_helper.h	/^    bool _flush_requested;$/;"	m	class:spdlog::details::async_log_helper
_flush_requested	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^    bool _flush_requested;$/;"	m	class:spdlog::details::async_log_helper
_force_flush	src/3rd_party/spdlog/details/file_helper.h	/^    bool _force_flush;$/;"	m	class:spdlog::details::file_helper
_force_flush	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    bool _force_flush;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL
_force_flush	src/3rd_party/spdlog/include/spdlog/sinks/ostream_sink.h	/^    bool _force_flush;$/;"	m	class:spdlog::sinks::ostream_sink
_force_flush	src/3rd_party/spdlog/sinks/ostream_sink.h	/^    bool _force_flush;$/;"	m	class:spdlog::sinks::ostream_sink
_formatter	src/3rd_party/spdlog/details/async_log_helper.h	/^    formatter_ptr _formatter;$/;"	m	class:spdlog::details::async_log_helper
_formatter	src/3rd_party/spdlog/details/registry.h	/^    formatter_ptr _formatter;$/;"	m	class:spdlog::details::registry_t
_formatter	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^    formatter_ptr _formatter;$/;"	m	class:spdlog::details::async_log_helper
_formatter	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    formatter_ptr _formatter;$/;"	m	class:spdlog::details::registry_t
_formatter	src/3rd_party/spdlog/include/spdlog/logger.h	/^    formatter_ptr _formatter;$/;"	m	class:spdlog::logger
_formatter	src/3rd_party/spdlog/logger.h	/^    formatter_ptr _formatter;$/;"	m	class:spdlog::logger
_formatters	src/3rd_party/spdlog/formatter.h	/^    std::vector<std::unique_ptr<details::flag_formatter>> _formatters;$/;"	m	class:spdlog::pattern_formatter
_formatters	src/3rd_party/spdlog/include/spdlog/formatter.h	/^    std::vector<std::unique_ptr<details::flag_formatter>> _formatters;$/;"	m	class:spdlog::SPDLOG_FINAL
_ident	src/3rd_party/spdlog/include/spdlog/sinks/syslog_sink.h	/^    const std::string _ident;$/;"	m	class:spdlog::sinks::syslog_sink
_ident	src/3rd_party/spdlog/sinks/syslog_sink.h	/^    const std::string _ident;$/;"	m	class:spdlog::sinks::syslog_sink
_isnan	src/3rd_party/spdlog/details/format.h	/^inline DummyInt _isnan(...)$/;"	f	namespace:fmt::internal
_isnan	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline DummyInt _isnan(...)$/;"	f	namespace:fmt::internal
_last_err_time	src/3rd_party/spdlog/include/spdlog/logger.h	/^    std::atomic<time_t> _last_err_time;$/;"	m	class:spdlog::logger
_last_update	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    log_clock::time_point _last_update;$/;"	m	class:spdlog::details::z_formatter
_last_update	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^    log_clock::time_point _last_update;$/;"	m	class:spdlog::details::SPDLOG_FINAL
_last_workerthread_ex	src/3rd_party/spdlog/details/async_log_helper.h	/^    std::shared_ptr<spdlog_ex> _last_workerthread_ex;$/;"	m	class:spdlog::details::async_log_helper
_level	src/3rd_party/spdlog/details/registry.h	/^    level::level_enum _level = level::info;$/;"	m	class:spdlog::details::registry_t
_level	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    level::level_enum _level = level::info;$/;"	m	class:spdlog::details::registry_t
_level	src/3rd_party/spdlog/include/spdlog/logger.h	/^    spdlog::level_t _level;$/;"	m	class:spdlog::logger
_level	src/3rd_party/spdlog/include/spdlog/sinks/sink.h	/^    level_t _level;$/;"	m	class:spdlog::sinks::sink
_level	src/3rd_party/spdlog/logger.h	/^    spdlog::level_t _level;$/;"	m	class:spdlog::logger
_log_if_enabled	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::_log_if_enabled(level::level_enum lvl)$/;"	f	class:spdlog::logger
_log_if_enabled	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::_log_if_enabled(level::level_enum lvl, const T& msg)$/;"	f	class:spdlog::logger
_log_if_enabled	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::_log_if_enabled(level::level_enum lvl, const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
_log_msg	src/3rd_party/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::_log_msg(details::log_msg& msg)$/;"	f	class:spdlog::async_logger
_log_msg	src/3rd_party/spdlog/details/line_logger_fwd.h	/^    log_msg _log_msg;$/;"	m	class:spdlog::details::line_logger
_log_msg	src/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::_log_msg(details::log_msg& msg)$/;"	f	class:spdlog::logger
_loggers	src/3rd_party/spdlog/details/registry.h	/^    std::unordered_map <std::string, std::shared_ptr<logger>> _loggers;$/;"	m	class:spdlog::details::registry_t
_loggers	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    std::unordered_map <std::string, std::shared_ptr<logger>> _loggers;$/;"	m	class:spdlog::details::registry_t
_max_files	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    std::size_t _max_files;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL
_max_files	src/3rd_party/spdlog/sinks/file_sinks.h	/^    std::size_t _max_files;$/;"	m	class:spdlog::sinks::rotating_file_sink
_max_size	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    std::size_t _max_size;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL
_max_size	src/3rd_party/spdlog/sinks/file_sinks.h	/^    std::size_t _max_size;$/;"	m	class:spdlog::sinks::rotating_file_sink
_msg	src/3rd_party/spdlog/common.h	/^    std::string _msg;$/;"	m	class:spdlog::spdlog_ex
_msg	src/3rd_party/spdlog/include/spdlog/common.h	/^    std::string _msg;$/;"	m	class:spdlog::spdlog_ex
_msg_counter	src/3rd_party/spdlog/include/spdlog/logger.h	/^    std::atomic<size_t> _msg_counter;$/;"	m	class:spdlog::logger
_mutex	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    std::mutex _mutex;$/;"	m	class:spdlog::details::z_formatter
_mutex	src/3rd_party/spdlog/details/registry.h	/^    Mutex _mutex;$/;"	m	class:spdlog::details::registry_t
_mutex	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^    std::mutex _mutex;$/;"	m	class:spdlog::details::SPDLOG_FINAL
_mutex	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    Mutex _mutex;$/;"	m	class:spdlog::details::registry_t
_mutex	src/3rd_party/spdlog/include/spdlog/sinks/base_sink.h	/^    Mutex _mutex;$/;"	m	class:spdlog::sinks::base_sink
_mutex	src/3rd_party/spdlog/sinks/base_sink.h	/^    Mutex _mutex;$/;"	m	class:spdlog::sinks::base_sink
_name	src/3rd_party/spdlog/include/spdlog/logger.h	/^    const std::string _name;$/;"	m	class:spdlog::logger
_name	src/3rd_party/spdlog/logger.h	/^    std::string _name;$/;"	m	class:spdlog::logger
_next_rotation_tp	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    std::chrono::system_clock::time_point _next_rotation_tp()$/;"	f	class:spdlog::sinks::SPDLOG_FINAL
_next_rotation_tp	src/3rd_party/spdlog/sinks/file_sinks.h	/^    std::chrono::system_clock::time_point _next_rotation_tp()$/;"	f	class:spdlog::sinks::daily_file_sink
_offset_minutes	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    int _offset_minutes;$/;"	m	class:spdlog::details::z_formatter
_offset_minutes	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^    int _offset_minutes;$/;"	m	class:spdlog::details::SPDLOG_FINAL
_ostream	src/3rd_party/spdlog/include/spdlog/sinks/ostream_sink.h	/^    std::ostream& _ostream;$/;"	m	class:spdlog::sinks::ostream_sink
_ostream	src/3rd_party/spdlog/sinks/ostream_sink.h	/^    std::ostream& _ostream;$/;"	m	class:spdlog::sinks::ostream_sink
_overflow_policy	src/3rd_party/spdlog/details/async_log_helper.h	/^    const async_overflow_policy _overflow_policy;$/;"	m	class:spdlog::details::async_log_helper
_overflow_policy	src/3rd_party/spdlog/details/registry.h	/^    async_overflow_policy _overflow_policy = async_overflow_policy::block_retry;$/;"	m	class:spdlog::details::registry_t
_overflow_policy	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^    const async_overflow_policy _overflow_policy;$/;"	m	class:spdlog::details::async_log_helper
_overflow_policy	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    async_overflow_policy _overflow_policy = async_overflow_policy::block_retry;$/;"	m	class:spdlog::details::registry_t
_pattern	src/3rd_party/spdlog/formatter.h	/^    const std::string _pattern;$/;"	m	class:spdlog::pattern_formatter
_pattern	src/3rd_party/spdlog/include/spdlog/formatter.h	/^    const std::string _pattern;$/;"	m	class:spdlog::SPDLOG_FINAL
_pattern_time	src/3rd_party/spdlog/include/spdlog/formatter.h	/^    const pattern_time_type _pattern_time;$/;"	m	class:spdlog::SPDLOG_FINAL
_priorities	src/3rd_party/spdlog/include/spdlog/sinks/syslog_sink.h	/^    std::array<int, 7> _priorities;$/;"	m	class:spdlog::sinks::syslog_sink
_priorities	src/3rd_party/spdlog/sinks/syslog_sink.h	/^    std::array<int, 10> _priorities;$/;"	m	class:spdlog::sinks::syslog_sink
_q	src/3rd_party/spdlog/details/async_log_helper.h	/^    q_type _q;$/;"	m	class:spdlog::details::async_log_helper
_q	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^    q_type _q;$/;"	m	class:spdlog::details::async_log_helper
_rotate	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    void _rotate()$/;"	f	class:spdlog::sinks::SPDLOG_FINAL
_rotate	src/3rd_party/spdlog/sinks/file_sinks.h	/^    void _rotate()$/;"	f	class:spdlog::sinks::rotating_file_sink
_rotation_h	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    int _rotation_h;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL
_rotation_h	src/3rd_party/spdlog/sinks/file_sinks.h	/^    int _rotation_h;$/;"	m	class:spdlog::sinks::daily_file_sink
_rotation_m	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    int _rotation_m;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL
_rotation_m	src/3rd_party/spdlog/sinks/file_sinks.h	/^    int _rotation_m;$/;"	m	class:spdlog::sinks::daily_file_sink
_rotation_tp	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    std::chrono::system_clock::time_point _rotation_tp;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL
_rotation_tp	src/3rd_party/spdlog/sinks/file_sinks.h	/^    std::chrono::system_clock::time_point _rotation_tp;$/;"	m	class:spdlog::sinks::daily_file_sink
_set_formatter	src/3rd_party/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::_set_formatter(spdlog::formatter_ptr msg_formatter)$/;"	f	class:spdlog::async_logger
_set_formatter	src/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::_set_formatter(formatter_ptr msg_formatter)$/;"	f	class:spdlog::logger
_set_formatter	src/3rd_party/spdlog/include/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::_set_formatter(spdlog::formatter_ptr msg_formatter)$/;"	f	class:spdlog::async_logger
_set_formatter	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::_set_formatter(formatter_ptr msg_formatter)$/;"	f	class:spdlog::logger
_set_pattern	src/3rd_party/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::_set_pattern(const std::string& pattern)$/;"	f	class:spdlog::async_logger
_set_pattern	src/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::_set_pattern(const std::string& pattern)$/;"	f	class:spdlog::logger
_set_pattern	src/3rd_party/spdlog/include/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::_set_pattern(const std::string& pattern, pattern_time_type pattern_time)$/;"	f	class:spdlog::async_logger
_set_pattern	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::_set_pattern(const std::string& pattern, pattern_time_type pattern_time)$/;"	f	class:spdlog::logger
_should_flush_on	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline bool spdlog::logger::_should_flush_on(const details::log_msg &msg)$/;"	f	class:spdlog::logger
_sink_it	src/3rd_party/spdlog/include/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::_sink_it(details::log_msg& msg)$/;"	f	class:spdlog::async_logger
_sink_it	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::_sink_it(details::log_msg& msg)$/;"	f	class:spdlog::logger
_sinks	src/3rd_party/spdlog/details/async_log_helper.h	/^    std::vector<std::shared_ptr<sinks::sink>> _sinks;$/;"	m	class:spdlog::details::async_log_helper
_sinks	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^    std::vector<std::shared_ptr<sinks::sink>> _sinks;$/;"	m	class:spdlog::details::async_log_helper
_sinks	src/3rd_party/spdlog/include/spdlog/logger.h	/^    std::vector<sink_ptr> _sinks;$/;"	m	class:spdlog::logger
_sinks	src/3rd_party/spdlog/include/spdlog/sinks/dist_sink.h	/^    std::vector<std::shared_ptr<sink>> _sinks;$/;"	m	class:spdlog::sinks::dist_sink
_sinks	src/3rd_party/spdlog/logger.h	/^    std::vector<sink_ptr> _sinks;$/;"	m	class:spdlog::logger
_sinks	src/3rd_party/spdlog/sinks/dist_sink.h	/^    std::vector<std::shared_ptr<sink>> _sinks;$/;"	m	class:spdlog::sinks::dist_sink
_str	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    std::string _str;$/;"	m	class:spdlog::details::aggregate_formatter
_str	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^    std::string _str;$/;"	m	class:spdlog::details::SPDLOG_FINAL
_tag	src/3rd_party/spdlog/include/spdlog/sinks/android_sink.h	/^    std::string _tag;$/;"	m	class:spdlog::sinks::android_sink
_tag	src/3rd_party/spdlog/sinks/android_sink.h	/^    std::string _tag;$/;"	m	class:spdlog::sinks::base_android_sink
_terminate_requested	src/3rd_party/spdlog/details/async_log_helper.h	/^    bool _terminate_requested;$/;"	m	class:spdlog::details::async_log_helper
_terminate_requested	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^    bool _terminate_requested;$/;"	m	class:spdlog::details::async_log_helper
_thread_id	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline size_t _thread_id()$/;"	f	namespace:spdlog::details::os
_use_raw_msg	src/3rd_party/spdlog/include/spdlog/sinks/android_sink.h	/^    bool _use_raw_msg;$/;"	m	class:spdlog::sinks::android_sink
_worker_teardown_cb	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^    const std::function<void()> _worker_teardown_cb;$/;"	m	class:spdlog::details::async_log_helper
_worker_teardown_cb	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    std::function<void()> _worker_teardown_cb = nullptr;$/;"	m	class:spdlog::details::registry_t
_worker_thread	src/3rd_party/spdlog/details/async_log_helper.h	/^    std::thread _worker_thread;$/;"	m	class:spdlog::details::async_log_helper
_worker_thread	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^    std::thread _worker_thread;$/;"	m	class:spdlog::details::async_log_helper
_worker_warmup_cb	src/3rd_party/spdlog/details/async_log_helper.h	/^    const std::function<void()> _worker_warmup_cb;$/;"	m	class:spdlog::details::async_log_helper
_worker_warmup_cb	src/3rd_party/spdlog/details/registry.h	/^    std::function<void()> _worker_warmup_cb = nullptr;$/;"	m	class:spdlog::details::registry_t
_worker_warmup_cb	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^    const std::function<void()> _worker_warmup_cb;$/;"	m	class:spdlog::details::async_log_helper
_worker_warmup_cb	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    std::function<void()> _worker_warmup_cb = nullptr;$/;"	m	class:spdlog::details::registry_t
a_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class a_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
a_formatter	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class a_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
abort	scripts/python/mariannmt_server.py	/^from bottle import request, Bottle, abort$/;"	i
abs	src/functional/floats.h	/^      constexpr float abs(float x) { return x < 0 ? -x : x; }$/;"	f	namespace:marian::functional::float2unsigned
acceptor	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    std::unique_ptr<asio::ip::tcp::acceptor> acceptor;$/;"	m	class:SimpleWeb::SocketServerBase
act	src/layers/generic.h	/^enum struct act : int { linear, tanh, logit, ReLU, LeakyReLU, PReLU, swish };$/;"	s	namespace:marian::mlp
actAfterBatches	src/optimizers/optimizers.h	/^  virtual void actAfterBatches(TrainingState& state) { eta_ = state.eta; }$/;"	f	class:marian::OptimizerBase
actAfterBatches	src/optimizers/optimizers.h	/^  virtual void actAfterBatches(TrainingState& state) {$/;"	f	class:marian::Adagrad
actAfterBatches	src/optimizers/optimizers.h	/^  virtual void actAfterBatches(TrainingState& state) {$/;"	f	class:marian::Adam
actAfterBatches	src/training/scheduler.h	/^  void actAfterBatches(TrainingState& state) {$/;"	f	class:marian::Scheduler
actAfterBatches	src/training/training_state.h	/^  virtual void actAfterBatches(TrainingState& state) {}$/;"	f	class:marian::TrainingObserver
actAfterEpoch	src/optimizers/optimizers.h	/^  virtual void actAfterEpoch(TrainingState& state) { eta_ = state.eta; }$/;"	f	class:marian::OptimizerBase
actAfterEpoch	src/optimizers/optimizers.h	/^  virtual void actAfterEpoch(TrainingState& state) {$/;"	f	class:marian::Adagrad
actAfterEpoch	src/optimizers/optimizers.h	/^  virtual void actAfterEpoch(TrainingState& state) {$/;"	f	class:marian::Adam
actAfterEpoch	src/training/scheduler.h	/^  void actAfterEpoch(TrainingState& state) {$/;"	f	class:marian::Scheduler
actAfterStalled	src/optimizers/optimizers.h	/^  virtual void actAfterStalled(TrainingState& state) { eta_ = state.eta; }$/;"	f	class:marian::OptimizerBase
actAfterStalled	src/optimizers/optimizers.h	/^  virtual void actAfterStalled(TrainingState& state) {$/;"	f	class:marian::Adagrad
actAfterStalled	src/optimizers/optimizers.h	/^  virtual void actAfterStalled(TrainingState& state) {$/;"	f	class:marian::Adam
actAfterStalled	src/training/scheduler.h	/^  void actAfterStalled(TrainingState& state) {$/;"	f	class:marian::Scheduler
actAfterStalled	src/training/training_state.h	/^  virtual void actAfterStalled(TrainingState& state) {}$/;"	f	class:marian::TrainingObserver
add	src/common/keywords.h	/^  void add() {}$/;"	f	class:marian::keywords::Keywords
add	src/common/keywords.h	/^  void add(Head head) {$/;"	f	class:marian::keywords::Keywords
add	src/common/keywords.h	/^  void add(Head head, Tail... tail) {$/;"	f	class:marian::keywords::Keywords
add	src/data/batch_stats.h	/^  void add(Ptr<data::CorpusBatch> batch, size_t multiplier = 1) {$/;"	f	class:marian::data::BatchStats
add	src/graph/expression_graph.h	/^  Expr add(Expr node) {$/;"	f	class:marian::ExpressionGraph
add	src/graph/parameters.h	/^  void add(Expr p, const std::string& name) {$/;"	f	class:marian::Parameters
add	src/translator/output_collector.cpp	/^void StringCollector::add(long sourceId,$/;"	f	class:marian::StringCollector
addOptionsCommon	src/common/config_parser.cpp	/^void ConfigParser::addOptionsCommon(po::options_description& desc) {$/;"	f	class:marian::ConfigParser
addOptionsModel	src/common/config_parser.cpp	/^void ConfigParser::addOptionsModel(po::options_description& desc) {$/;"	f	class:marian::ConfigParser
addOptionsRescore	src/common/config_parser.cpp	/^void ConfigParser::addOptionsRescore(po::options_description& desc) {$/;"	f	class:marian::ConfigParser
addOptionsTraining	src/common/config_parser.cpp	/^void ConfigParser::addOptionsTraining(po::options_description& desc) {$/;"	f	class:marian::ConfigParser
addOptionsTranslate	src/common/config_parser.cpp	/^void ConfigParser::addOptionsTranslate(po::options_description& desc) {$/;"	f	class:marian::ConfigParser
addOptionsValid	src/common/config_parser.cpp	/^void ConfigParser::addOptionsValid(po::options_description& desc) {$/;"	f	class:marian::ConfigParser
addRef	src/3rd_party/catch.hpp	/^        virtual void addRef() const {$/;"	f	struct:Catch::SharedImpl
addRef	src/3rd_party/spdlog/tests/catch.hpp	/^        virtual void addRef() const {$/;"	f	struct:Catch::SharedImpl
addValidator	src/training/scheduler.h	/^  void addValidator(Ptr<ValidatorBase> validator) {$/;"	f	class:marian::Scheduler
add_ch	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    void add_ch(char ch)$/;"	f	class:spdlog::details::aggregate_formatter
add_ch	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^    void add_ch(char ch)$/;"	f	class:spdlog::details::SPDLOG_FINAL
add_dependency	src/3rd_party/yaml-cpp/node/detail/node.h	/^  void add_dependency(node& rhs) {$/;"	f	class:YAML::detail::node
add_input	src/rnn/constructors.h	/^  virtual void add_input(Expr input) {$/;"	f	class:marian::rnn::CellFactory
add_input	src/rnn/constructors.h	/^  virtual void add_input(std::function<Expr(Ptr<rnn::RNN>)> func) {$/;"	f	class:marian::rnn::CellFactory
add_sink	src/3rd_party/spdlog/include/spdlog/sinks/dist_sink.h	/^    void add_sink(std::shared_ptr<sink> sink)$/;"	f	class:spdlog::sinks::dist_sink
add_sink	src/3rd_party/spdlog/sinks/dist_sink.h	/^    void add_sink(std::shared_ptr<sink> sink)$/;"	f	class:spdlog::sinks::dist_sink
address	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::string address;$/;"	m	class:SimpleWeb::SocketServerBase::Config
adjacent	src/tensors/allocator.h	/^  bool adjacent(const Gap& mp) const {$/;"	f	class:marian::Gap
aggregate_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    aggregate_formatter()$/;"	f	class:spdlog::details::aggregate_formatter
aggregate_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class aggregate_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
aggregate_formatter	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^    aggregate_formatter()$/;"	f	class:spdlog::details::SPDLOG_FINAL
alert	src/3rd_party/spdlog/common.h	/^    alert = 7,$/;"	e	enum:spdlog::level::__anon38
alert	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::alert()$/;"	f	class:spdlog::logger
alert	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::alert(const T& msg)$/;"	f	class:spdlog::logger
alert	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::alert(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
align	src/3rd_party/spdlog/details/format.h	/^    Alignment align() const$/;"	f	struct:fmt::AlignSpec
align	src/3rd_party/spdlog/details/format.h	/^    Alignment align() const$/;"	f	struct:fmt::TypeSpec
align	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Alignment align() const$/;"	f	struct:fmt::AlignSpec
align	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Alignment align() const$/;"	f	struct:fmt::TypeSpec
align	src/tensors/allocator.h	/^  size_t align(size_t size) {$/;"	f	class:marian::Allocator
align	src/tensors/device_gpu.h	/^  size_t align(size_t size) {$/;"	f	class:marian::DeviceGPU
align	src/tests/allocator_test.cpp	/^  size_t align(size_t size) {$/;"	f	class:DeviceCPU
align_	src/3rd_party/spdlog/details/format.h	/^    Alignment align_;$/;"	m	struct:fmt::AlignSpec
align_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Alignment align_;$/;"	m	struct:fmt::AlignSpec
alignment_	src/tensors/device_gpu.h	/^  size_t alignment_;$/;"	m	class:marian::DeviceGPU
alignment_	src/tests/allocator_test.cpp	/^  size_t alignment_;$/;"	m	class:DeviceCPU	file:
alignments_	src/rnn/attention.h	/^  std::vector<Expr> alignments_;$/;"	m	class:marian::rnn::GlobalAttention
alloc	src/tensors/allocator.h	/^  Ptr<MemoryPiece> alloc(size_t bytes) {$/;"	f	class:marian::Allocator
alloc	src/tensors/allocator.h	/^  Ptr<MemoryPiece> alloc(size_t num) {$/;"	f	class:marian::Allocator
allocColIndices	src/kernels/sparse.h	/^  void allocColIndices(int nnz = 0) {$/;"	f	class:marian::sparse::CSR
allocRowIndices	src/kernels/sparse.h	/^  void allocRowIndices(int rows = 0) {$/;"	f	class:marian::sparse::CSR
allocValues	src/kernels/sparse.h	/^  void allocValues(int nnz = 0) {$/;"	f	class:marian::sparse::CSR
alloc_	src/optimizers/optimizers.h	/^  Ptr<TensorAllocator> alloc_;$/;"	m	class:marian::Adagrad
alloc_	src/optimizers/optimizers.h	/^  Ptr<TensorAllocator> alloc_;$/;"	m	class:marian::Adam
allocate	src/graph/node_operators_unary.h	/^  size_t allocate() { return 0; }$/;"	f	class:marian::ReshapeNodeOp
allocate	src/graph/node_operators_unary.h	/^  size_t allocate() { return 0; }$/;"	f	class:marian::StepNodeOp
allocate	src/tensors/tensor_allocator.h	/^  void allocate(Tensor& t, Shape shape) {$/;"	f	class:marian::TensorAllocator
allocateBackward	src/graph/parameters.h	/^  void allocateBackward() {$/;"	f	class:marian::Parameters
allocateForward	src/graph/parameters.h	/^  void allocateForward() {$/;"	f	class:marian::Parameters
allocated_	src/tensors/allocator.h	/^  std::unordered_map<uint8_t*, Ptr<MemoryPiece>> allocated_;$/;"	m	class:marian::Allocator
allocator	src/graph/expression_graph.h	/^  Ptr<Allocator<DeviceGPU>> allocator() { return tensors_->allocator(); }$/;"	f	class:marian::ExpressionGraph
allocator	src/tensors/tensor_allocator.h	/^  Ptr<Allocator<DeviceGPU>> allocator() { return allocator_; }$/;"	f	class:marian::TensorAllocator
allocator_	src/tensors/tensor_allocator.h	/^  Ptr<Allocator<DeviceGPU>> allocator_;$/;"	m	class:marian::TensorAllocator
allocators	src/training/graph_group_async_drop.h	/^  std::vector<Ptr<TensorAllocator>> allocators;$/;"	m	class:marian::AsyncGraphGroup
alpha_	src/translator/history.h	/^  float alpha_;$/;"	m	class:marian::History
alternating_forward	src/rnn/rnn.h	/^  alternating_forward,$/;"	m	struct:marian::rnn::dir
alwaysFalse	src/3rd_party/catch.hpp	/^    inline bool alwaysFalse() { return false; }$/;"	f	namespace:Catch
alwaysFalse	src/3rd_party/spdlog/tests/catch.hpp	/^    inline bool alwaysFalse() { return false; }$/;"	f	namespace:Catch
alwaysTrue	src/3rd_party/catch.hpp	/^    inline bool alwaysTrue() { return true; }$/;"	f	namespace:Catch
alwaysTrue	src/3rd_party/spdlog/tests/catch.hpp	/^    inline bool alwaysTrue() { return true; }$/;"	f	namespace:Catch
ampm	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^static const char* ampm(const tm& t)$/;"	f	namespace:spdlog::details
ampm	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^static const char* ampm(const tm& t)$/;"	f	namespace:spdlog::details
anchor_t	src/3rd_party/yaml-cpp/anchor.h	/^typedef std::size_t anchor_t;$/;"	t	namespace:YAML
android_example	src/3rd_party/spdlog/example/example.cpp	/^void android_example()$/;"	f
android_example	src/3rd_party/spdlog/example/jni/example.cpp	/^void android_example()$/;"	f
android_logger	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::android_logger(const std::string& logger_name, const std::string& tag)$/;"	f	class:spdlog
android_sink	src/3rd_party/spdlog/include/spdlog/sinks/android_sink.h	/^    explicit android_sink(const std::string& tag = "spdlog", bool use_raw_msg = false): _tag(tag), _use_raw_msg(use_raw_msg) {}$/;"	f	class:spdlog::sinks::android_sink
android_sink	src/3rd_party/spdlog/include/spdlog/sinks/android_sink.h	/^class android_sink : public sink$/;"	c	namespace:spdlog::sinks
android_sink_mt	src/3rd_party/spdlog/sinks/android_sink.h	/^typedef base_android_sink<std::mutex> android_sink_mt;$/;"	t	namespace:spdlog::sinks
android_sink_st	src/3rd_party/spdlog/sinks/android_sink.h	/^typedef base_android_sink<details::null_mutex> android_sink_st;$/;"	t	namespace:spdlog::sinks
ansicolor_sink	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    ansicolor_sink(FILE* file): target_file_(file)$/;"	f	class:spdlog::sinks::ansicolor_sink
ansicolor_sink	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^class ansicolor_sink: public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
ansicolor_sink	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^class ansicolor_sink : public sink$/;"	c	namespace:spdlog::sinks
ansicolor_sink	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^inline ansicolor_sink::ansicolor_sink(sink_ptr wrapped_sink) : sink_(wrapped_sink)$/;"	f	class:spdlog::sinks::ansicolor_sink
ansicolor_stderr_sink	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    ansicolor_stderr_sink(): ansicolor_sink<Mutex>(stderr)$/;"	f	class:spdlog::sinks::ansicolor_stderr_sink
ansicolor_stderr_sink	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^class ansicolor_stderr_sink: public ansicolor_sink<Mutex>$/;"	c	namespace:spdlog::sinks
ansicolor_stderr_sink_mt	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^typedef ansicolor_stderr_sink<std::mutex> ansicolor_stderr_sink_mt;$/;"	t	namespace:spdlog::sinks
ansicolor_stderr_sink_st	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^typedef ansicolor_stderr_sink<details::null_mutex> ansicolor_stderr_sink_st;$/;"	t	namespace:spdlog::sinks
ansicolor_stdout_sink	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    ansicolor_stdout_sink(): ansicolor_sink<Mutex>(stdout)$/;"	f	class:spdlog::sinks::ansicolor_stdout_sink
ansicolor_stdout_sink	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^class ansicolor_stdout_sink: public ansicolor_sink<Mutex>$/;"	c	namespace:spdlog::sinks
ansicolor_stdout_sink_mt	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^typedef ansicolor_stdout_sink<std::mutex> ansicolor_stdout_sink_mt;$/;"	t	namespace:spdlog::sinks
ansicolor_stdout_sink_st	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^typedef ansicolor_stdout_sink<details::null_mutex> ansicolor_stdout_sink_st;$/;"	t	namespace:spdlog::sinks
app	scripts/python/mariannmt_server.py	/^app = Bottle()$/;"	v
append	src/3rd_party/spdlog/details/format.h	/^void Buffer<T>::append(const U *begin, const U *end)$/;"	f	class:fmt::Buffer
append	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^void Buffer<T>::append(const U *begin, const U *end)$/;"	f	class:fmt::Buffer
append_float_length	src/3rd_party/spdlog/details/format.h	/^    void append_float_length(Char *&, T)$/;"	f	class:BasicWriter
append_float_length	src/3rd_party/spdlog/details/format.h	/^    void append_float_length(Char *&format_ptr, long double)$/;"	f	class:BasicWriter
append_float_length	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void append_float_length(Char *&, T) {}$/;"	f	class:BasicWriter
append_float_length	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void append_float_length(Char *&format_ptr, long double)$/;"	f	class:BasicWriter
apply	src/functional/operands.h	/^      __HDI__ static T apply(T&& arg, Args&&... args) {$/;"	f	struct:marian::functional::Select
apply	src/functional/operands.h	/^      __HDI__ static auto apply(T&& arg, Args&&... args) -> decltype(Select<N-1>::apply(args...)) {$/;"	f	struct:marian::functional::Select
apply	src/gpu/tmp.h	/^  __HDI__ float apply(Functor functor,$/;"	f	namespace:marian::gpu
apply	src/gpu/tmp.h	/^  __HDI__ static float apply(Functor functor,$/;"	f	struct:marian::gpu::FApply
apply	src/layers/constructors.h	/^  Expr apply(Args... args) {$/;"	f	class:marian::mlp::MLP
apply	src/layers/generic.h	/^  Expr apply(Expr input) {$/;"	f	class:marian::mlp::Dense
apply	src/layers/generic.h	/^  Expr apply(const std::vector<Expr>& inputs) {$/;"	f	class:marian::mlp::Dense
apply	src/rnn/attention.h	/^  Expr apply(State state) {$/;"	f	class:marian::rnn::GlobalAttention
apply	src/rnn/cells.h	/^  State apply(std::vector<Expr> inputs, State state, Expr mask = nullptr) {$/;"	f	class:marian::rnn::SlowLSTM
apply	src/rnn/cells.h	/^  State apply(std::vector<Expr> inputs, State state, Expr mask = nullptr) {$/;"	f	class:marian::rnn::TestLSTM
apply	src/rnn/cells.h	/^  State apply(std::vector<Expr> inputs, State states, Expr mask = nullptr) {$/;"	f	class:marian::rnn::Tanh
apply	src/rnn/cells.h	/^  virtual State apply(std::vector<Expr> inputs,$/;"	f	class:marian::rnn::FastLSTM
apply	src/rnn/cells.h	/^  virtual State apply(std::vector<Expr> inputs,$/;"	f	class:marian::rnn::GRU
apply	src/rnn/cells.h	/^  virtual State apply(std::vector<Expr> inputs,$/;"	f	class:marian::rnn::GRUNematus
apply	src/rnn/rnn.h	/^  States apply(const Expr input, const Expr mask = nullptr) {$/;"	f	class:marian::rnn::SingleLayerRNN
apply	src/rnn/rnn.h	/^  States apply(const Expr input,$/;"	f	class:marian::rnn::SingleLayerRNN
apply	src/rnn/types.h	/^  State apply(std::vector<Expr> inputs, State state, Expr mask = nullptr) {$/;"	f	class:marian::rnn::Cell
apply	src/rnn/types.h	/^  virtual Expr apply(State state) {$/;"	f	class:marian::rnn::MultiCellInput
applyEncoderRNN	src/models/s2s.h	/^  Expr applyEncoderRNN(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::EncoderS2S
applyEvaluator	src/3rd_party/catch.hpp	/^    bool applyEvaluator( T1 const& lhs, T2 const& rhs ) {$/;"	f	namespace:Catch::Internal
applyEvaluator	src/3rd_party/spdlog/tests/catch.hpp	/^    bool applyEvaluator( T1 const& lhs, T2 const& rhs ) {$/;"	f	namespace:Catch::Internal
applyInput	src/rnn/cells.h	/^  std::vector<Expr> applyInput(std::vector<Expr> inputs) {$/;"	f	class:marian::rnn::SlowLSTM
applyInput	src/rnn/cells.h	/^  std::vector<Expr> applyInput(std::vector<Expr> inputs) {$/;"	f	class:marian::rnn::Tanh
applyInput	src/rnn/cells.h	/^  std::vector<Expr> applyInput(std::vector<Expr> inputs) {$/;"	f	class:marian::rnn::TestLSTM
applyInput	src/rnn/cells.h	/^  virtual std::vector<Expr> applyInput(std::vector<Expr> inputs) {$/;"	f	class:marian::rnn::FastLSTM
applyInput	src/rnn/cells.h	/^  virtual std::vector<Expr> applyInput(std::vector<Expr> inputs) {$/;"	f	class:marian::rnn::GRU
applyInput	src/rnn/cells.h	/^  virtual std::vector<Expr> applyInput(std::vector<Expr> inputs) {$/;"	f	class:marian::rnn::GRUNematus
applyInput	src/rnn/cells.h	/^  virtual std::vector<Expr> applyInput(std::vector<Expr> inputs) {$/;"	f	class:marian::rnn::Multiplicative
applyInput	src/rnn/types.h	/^  virtual std::vector<Expr> applyInput(std::vector<Expr> inputs) {$/;"	f	class:marian::rnn::StackedCell
applyState	src/rnn/cells.h	/^  State applyState(std::vector<Expr> xWs, State state, Expr mask = nullptr) {$/;"	f	class:marian::rnn::SlowLSTM
applyState	src/rnn/cells.h	/^  State applyState(std::vector<Expr> xWs, State state, Expr mask = nullptr) {$/;"	f	class:marian::rnn::Tanh
applyState	src/rnn/cells.h	/^  State applyState(std::vector<Expr> xWs, State state, Expr mask = nullptr) {$/;"	f	class:marian::rnn::TestLSTM
applyState	src/rnn/cells.h	/^  virtual State applyState(std::vector<Expr> xWs,$/;"	f	class:marian::rnn::FastLSTM
applyState	src/rnn/cells.h	/^  virtual State applyState(std::vector<Expr> xWs,$/;"	f	class:marian::rnn::GRU
applyState	src/rnn/cells.h	/^  virtual State applyState(std::vector<Expr> xWs,$/;"	f	class:marian::rnn::GRUNematus
applyState	src/rnn/cells.h	/^  virtual State applyState(std::vector<Expr> xWs,$/;"	f	class:marian::rnn::Multiplicative
applyState	src/rnn/types.h	/^  virtual State applyState(std::vector<Expr> mappedInputs,$/;"	f	class:marian::rnn::StackedCell
apply_all	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    void apply_all(std::function<void(std::shared_ptr<logger>)> fun)$/;"	f	class:spdlog::details::registry_t
apply_all	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline void spdlog::apply_all(std::function<void(std::shared_ptr<logger>)> fun)$/;"	f	class:spdlog
approx_size	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^    size_t approx_size()$/;"	f	class:spdlog::details::mpmc_bounded_queue
arcSafeRelease	src/3rd_party/catch.hpp	/^inline void arcSafeRelease( NSObject* ){}$/;"	f
arcSafeRelease	src/3rd_party/catch.hpp	/^inline void arcSafeRelease( NSObject* obj ) {$/;"	f
arcSafeRelease	src/3rd_party/spdlog/tests/catch.hpp	/^inline void arcSafeRelease( NSObject* ){}$/;"	f
arcSafeRelease	src/3rd_party/spdlog/tests/catch.hpp	/^inline void arcSafeRelease( NSObject* obj ) {$/;"	f
arg	src/3rd_party/spdlog/details/format.h	/^inline internal::NamedArg<char> arg(StringRef name, const T &arg)$/;"	f
arg	src/3rd_party/spdlog/details/format.h	/^inline internal::NamedArg<wchar_t> arg(WStringRef name, const T &arg)$/;"	f
arg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline internal::NamedArg<char> arg(StringRef name, const T &arg)$/;"	f
arg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline internal::NamedArg<wchar_t> arg(WStringRef name, const T &arg)$/;"	f
arg_	src/3rd_party/spdlog/details/format.cc	/^			fmt::internal::Arg &arg_;$/;"	m	class:fmt::__anon34::ArgConverter	file:
arg_	src/3rd_party/spdlog/details/format.cc	/^			fmt::internal::Arg &arg_;$/;"	m	class:fmt::__anon34::CharConverter	file:
arg_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  internal::Arg &arg_;$/;"	m	class:fmt::__anon71::ArgConverter	file:
arg_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  internal::Arg &arg_;$/;"	m	class:fmt::__anon71::CharConverter	file:
argparse	scripts/contrib/inject_model_params.py	/^import argparse$/;"	i
argparse	scripts/embeddings/export_embeddings.py	/^import argparse$/;"	i
argparse	scripts/embeddings/prepare_corpus.py	/^import argparse$/;"	i
argparse	scripts/embeddings/process_word2vec.py	/^import argparse$/;"	i
argparse	scripts/python/mariannmt_server.py	/^import argparse$/;"	i
argparse	scripts/server/client_example.py	/^import argparse$/;"	i
args	scripts/python/mariannmt_server.py	/^    args = parse_args()$/;"	v
args	scripts/server/client_example.py	/^    args = parse_args()$/;"	v
args	src/3rd_party/spdlog/details/format.h	/^    const ArgList &args() const$/;"	f	class:fmt::internal::FormatterBase
args	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    const ArgList &args() const$/;"	f	class:fmt::internal::FormatterBase
args_	src/3rd_party/spdlog/details/format.h	/^        const internal::Arg *args_;$/;"	m	union:fmt::ArgList::__anon30
args_	src/3rd_party/spdlog/details/format.h	/^    ArgList args_;$/;"	m	class:fmt::internal::FormatterBase
args_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        const internal::Arg *args_;$/;"	m	union:fmt::ArgList::__anon67
args_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    ArgList args_;$/;"	m	class:fmt::internal::FormatterBase
as	src/3rd_party/yaml-cpp/node/impl.h	/^inline T Node::as() const {$/;"	f	class:YAML::Node
as	src/3rd_party/yaml-cpp/node/impl.h	/^inline T Node::as(const S& fallback) const {$/;"	f	class:YAML::Node
as	src/layers/constructors.h	/^  inline Ptr<Cast> as() {$/;"	f	struct:marian::mlp::LayerFactory
as	src/rnn/constructors.h	/^  inline Ptr<Cast> as() {$/;"	f	struct:marian::rnn::StackableFactory
as	src/rnn/types.h	/^  inline Ptr<Cast> as() {$/;"	f	class:marian::rnn::Stackable
asTensor	src/tensors/tensor_allocator.h	/^  Tensor asTensor() {$/;"	f	class:marian::TensorAllocator
as_if	src/3rd_party/yaml-cpp/node/impl.h	/^  explicit as_if(const Node& node_) : node(node_) {}$/;"	f	struct:YAML::as_if
as_if	src/3rd_party/yaml-cpp/node/impl.h	/^struct as_if {$/;"	s	namespace:YAML
as_if	src/3rd_party/yaml-cpp/node/impl.h	/^struct as_if<T, void> {$/;"	s	namespace:YAML
as_if	src/3rd_party/yaml-cpp/node/impl.h	/^struct as_if<std::string, S> {$/;"	s	namespace:YAML
as_if	src/3rd_party/yaml-cpp/node/impl.h	/^struct as_if<std::string, void> {$/;"	s	namespace:YAML
async_example	src/3rd_party/spdlog/example/example.cpp	/^void async_example()$/;"	f
async_example	src/3rd_party/spdlog/example/jni/example.cpp	/^void async_example()$/;"	f
async_log_helper	src/3rd_party/spdlog/details/async_log_helper.h	/^class async_log_helper$/;"	c	namespace:spdlog::details
async_log_helper	src/3rd_party/spdlog/details/async_log_helper.h	/^inline spdlog::details::async_log_helper::async_log_helper($/;"	f	class:spdlog::details::async_log_helper
async_log_helper	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^class async_log_helper$/;"	c	namespace:spdlog::details
async_log_helper	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^inline spdlog::details::async_log_helper::async_log_helper($/;"	f	class:spdlog::details::async_log_helper
async_logger	src/3rd_party/spdlog/async_logger.h	/^class async_logger :public logger$/;"	c	namespace:spdlog
async_logger	src/3rd_party/spdlog/details/async_logger_impl.h	/^inline spdlog::async_logger::async_logger(const std::string& logger_name,$/;"	f	class:spdlog::async_logger
async_logger	src/3rd_party/spdlog/include/spdlog/details/async_logger_impl.h	/^inline spdlog::async_logger::async_logger(const std::string& logger_name,$/;"	f	class:spdlog::async_logger
async_msg	src/3rd_party/spdlog/details/async_log_helper.h	/^        async_msg(async_msg_type m_type) :msg_type(m_type)$/;"	f	struct:spdlog::details::async_log_helper::async_msg
async_msg	src/3rd_party/spdlog/details/async_log_helper.h	/^        async_msg(const details::log_msg& m) :$/;"	f	struct:spdlog::details::async_log_helper::async_msg
async_msg	src/3rd_party/spdlog/details/async_log_helper.h	/^    struct async_msg$/;"	s	class:spdlog::details::async_log_helper
async_msg	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^        async_msg(async_msg_type m_type):$/;"	f	struct:spdlog::details::async_log_helper::async_msg
async_msg	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^        async_msg(const details::log_msg& m):$/;"	f	struct:spdlog::details::async_log_helper::async_msg
async_msg	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^    struct async_msg$/;"	s	class:spdlog::details::async_log_helper
async_msg_type	src/3rd_party/spdlog/details/async_log_helper.h	/^    enum class async_msg_type$/;"	c	class:spdlog::details::async_log_helper
async_msg_type	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^    enum class async_msg_type$/;"	c	class:spdlog::details::async_log_helper
async_overflow_policy	src/3rd_party/spdlog/common.h	/^enum class async_overflow_policy$/;"	c	namespace:spdlog
async_overflow_policy	src/3rd_party/spdlog/include/spdlog/common.h	/^enum class async_overflow_policy$/;"	c	namespace:spdlog
at	src/rnn/rnn.h	/^  virtual Ptr<Cell> at(int i) { return rnns_[i]->at(0); }$/;"	f	class:marian::rnn::RNN
at	src/rnn/rnn.h	/^  virtual Ptr<Cell> at(int i) {$/;"	f	class:marian::rnn::SingleLayerRNN
at	src/rnn/types.h	/^  Ptr<Stackable> at(int i) { return stackables_[i]; }$/;"	f	class:marian::rnn::StackedCell
attended_	src/models/experimental/pooling.h	/^  Expr attended_;$/;"	m	class:marian::EncoderStatePooling
attention	src/rnn/constructors.h	/^typedef Accumulator<AttentionFactory> attention;$/;"	t	namespace:marian::rnn
attentionIndices_	src/models/hardatt.h	/^  std::vector<size_t> attentionIndices_;$/;"	m	class:marian::DecoderStateHardAtt
attention_	src/models/experimental/lex_probs.h	/^  Ptr<GlobalAttention> attention_;$/;"	m	class:marian::LexicalBias
attention_	src/models/experimental/s2s_rec.h	/^  Ptr<GlobalAttention> attention_;$/;"	m	class:marian::EncoderDecoderRec
available	src/tensors/allocator.h	/^  size_t available() { return available_; }$/;"	f	class:marian::Allocator
avgBatchWords_	src/training/graph_group.h	/^  float avgBatchWords_;$/;"	m	class:marian::GraphGroup
ax_	src/graph/node_operators_binary.h	/^  int ax_;$/;"	m	struct:marian::ConcatenateNodeOp
ax_	src/graph/node_operators_unary.h	/^  int ax_;$/;"	m	struct:marian::MeanNodeOp
ax_	src/graph/node_operators_unary.h	/^  int ax_;$/;"	m	struct:marian::SumNodeOp
axes_	src/graph/node_operators_unary.h	/^  std::vector<int> axes_;$/;"	m	struct:marian::TransposeNodeOp
axis	src/common/shape.h	/^    int axis(int ax) {$/;"	f	struct:marian::Shape
axis_	src/graph/node_operators_unary.h	/^  int axis_;$/;"	m	class:marian::StepNodeOp
b_	src/rnn/cells.h	/^  Expr U_, W_, b_;$/;"	m	class:marian::rnn::FastLSTM
b_	src/rnn/cells.h	/^  Expr U_, W_, b_;$/;"	m	class:marian::rnn::GRU
b_	src/rnn/cells.h	/^  Expr U_, W_, b_;$/;"	m	class:marian::rnn::GRUNematus
b_	src/rnn/cells.h	/^  Expr U_, W_, b_;$/;"	m	class:marian::rnn::Tanh
b_	src/rnn/cells.h	/^  Expr U_, W_, b_;$/;"	m	class:marian::rnn::TestLSTM
b_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class b_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
b_formatter	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class b_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
ba_	src/rnn/attention.h	/^  Expr Wa_, ba_, Ua_, va_;$/;"	m	class:marian::rnn::GlobalAttention
back	src/3rd_party/yaml-cpp/ptr_vector.h	/^  T& back() { return *(m_data.back().get()); }$/;"	f	class:YAML::ptr_vector
back	src/3rd_party/yaml-cpp/ptr_vector.h	/^  const T& back() const { return *(m_data.back().get()); }$/;"	f	class:YAML::ptr_vector
back	src/common/shape.h	/^    inline int& back() { return shape_.back(); }$/;"	f	struct:marian::Shape
back	src/data/corpus.h	/^  Ptr<SubBatch> back() { return batches_.back(); }$/;"	f	class:marian::data::CorpusBatch
back	src/data/corpus.h	/^  Words& back() { return tuple_.back(); }$/;"	f	class:marian::data::SentenceTuple
back	src/data/corpus.h	/^  const Words& back() const { return tuple_.back(); }$/;"	f	class:marian::data::SentenceTuple
back	src/gpu/shape.h	/^  __HDI__ int back() const { return dim(N - 1); }$/;"	f	struct:marian::gpu::ConstantShape
back	src/rnn/types.h	/^  State& back() { return states_.back(); }$/;"	f	class:marian::rnn::States
back	src/rnn/types.h	/^  const State& back() const { return states_.back(); }$/;"	f	class:marian::rnn::States
backend_	src/graph/expression_graph.h	/^  Ptr<Backend> backend_;$/;"	m	class:marian::ExpressionGraph
backprop	src/graph/expression_graph.h	/^  void backprop() {$/;"	f	class:marian::ExpressionGraph
backward	src/graph/expression_graph.h	/^  void backward() {$/;"	f	class:marian::ExpressionGraph
backward	src/graph/node.h	/^  virtual void backward() { runBackward(backwardOps()); }$/;"	f	class:marian::Node
backward	src/graph/node_operators_binary.h	/^  void backward() {$/;"	f	struct:marian::ConcatenateNodeOp
backward	src/graph/node_operators_unary.h	/^  void backward() {}$/;"	f	class:marian::ReshapeNodeOp
backward	src/graph/node_operators_unary.h	/^  void backward() {}$/;"	f	class:marian::StepNodeOp
backward	src/rnn/rnn.h	/^  backward,$/;"	m	struct:marian::rnn::dir
backwardOps	src/graph/node.h	/^  virtual NodeOps backwardOps() { return {}; };$/;"	f	class:marian::Node
backwardOps	src/graph/node_operators_binary.h	/^  NodeOps backwardOps() {$/;"	f	class:marian::ConvolutionOp
backwardOps	src/graph/node_operators_binary.h	/^  NodeOps backwardOps() {$/;"	f	class:marian::DotBatchedNodeOp
backwardOps	src/graph/node_operators_binary.h	/^  NodeOps backwardOps() {$/;"	f	class:marian::DotNodeOp
backwardOps	src/graph/node_operators_binary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::AffineNodeOp
backwardOps	src/graph/node_operators_binary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::CrossEntropyNodeOp
backwardOps	src/graph/node_operators_binary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::DivNodeOp
backwardOps	src/graph/node_operators_binary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::HighwayNodeOp
backwardOps	src/graph/node_operators_binary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::LayerNormalizationOp
backwardOps	src/graph/node_operators_binary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::MinusNodeOp
backwardOps	src/graph/node_operators_binary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::MultNodeOp
backwardOps	src/graph/node_operators_binary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::PlusNodeOp
backwardOps	src/graph/node_operators_binary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::ScalarProductNodeOp
backwardOps	src/graph/node_operators_unary.h	/^    NodeOps backwardOps() {$/;"	f	class:marian::PoolingWithMaskingOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	class:marian::PoolingOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::ColsNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::ExpNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::LogNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::LogSoftmaxNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::LogitNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::MeanNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::NegNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::PReLUNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::ReLUNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::RowsNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::ScalarAddNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::ScalarMultNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::SelectNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::ShiftNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::SoftmaxNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::SqrtNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::SquareNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::SumNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::SwishNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::TanhNodeOp
backwardOps	src/graph/node_operators_unary.h	/^  NodeOps backwardOps() {$/;"	f	struct:marian::TransposeNodeOp
base_android_sink	src/3rd_party/spdlog/sinks/android_sink.h	/^    explicit base_android_sink(std::string tag="spdlog"): _tag(tag)$/;"	f	class:spdlog::sinks::base_android_sink
base_android_sink	src/3rd_party/spdlog/sinks/android_sink.h	/^class base_android_sink : public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
base_sink	src/3rd_party/spdlog/include/spdlog/sinks/base_sink.h	/^    base_sink():_mutex() {}$/;"	f	class:spdlog::sinks::base_sink
base_sink	src/3rd_party/spdlog/include/spdlog/sinks/base_sink.h	/^class base_sink:public sink$/;"	c	namespace:spdlog::sinks
base_sink	src/3rd_party/spdlog/sinks/base_sink.h	/^    base_sink():_mutex() {}$/;"	f	class:spdlog::sinks::base_sink
base_sink	src/3rd_party/spdlog/sinks/base_sink.h	/^class base_sink:public sink$/;"	c	namespace:spdlog::sinks
base_type	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^  typedef node_iterator base_type;$/;"	t	class:YAML::detail::iterator_base
basic_logger_mt	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::basic_logger_mt(const std::string& logger_name, const filename_t& filename, bool truncate)$/;"	f	class:spdlog
basic_logger_st	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::basic_logger_st(const std::string& logger_name, const filename_t& filename, bool truncate)$/;"	f	class:spdlog
basis	src/3rd_party/svd/defs_and_types.h	/^  float *basis[3];$/;"	m	struct:hist_rec
batch	scripts/server/client_example.py	/^            batch = ""$/;"	v
batch	scripts/server/client_example.py	/^    batch = ""$/;"	v
batchIndex_	src/translator/scorers.h	/^  int batchIndex_;$/;"	m	class:marian::UnseenWordPenalty
batchSize	src/data/corpus.h	/^  size_t batchSize() { return size_; }$/;"	f	class:marian::data::SubBatch
batchWidth	src/data/corpus.h	/^  size_t batchWidth() { return width_; };$/;"	f	class:marian::data::SubBatch
batchWords	src/data/corpus.h	/^  size_t batchWords() { return words_; }$/;"	f	class:marian::data::SubBatch
batch_	src/models/experimental/pooling.h	/^  Ptr<data::CorpusBatch> batch_;$/;"	m	class:marian::EncoderStatePooling
batch_	src/models/states.h	/^  Ptr<data::CorpusBatch> batch_;$/;"	m	class:marian::EncoderState
batch_ptr	src/data/dataset.h	/^  typedef Ptr<Batch> batch_ptr;$/;"	t	class:marian::data::DatasetBase
batch_type	src/data/dataset.h	/^  typedef Batch batch_type;$/;"	t	class:marian::data::DatasetBase
batches_	src/data/corpus.h	/^  std::vector<Ptr<SubBatch>> batches_;$/;"	m	class:marian::data::CorpusBatch
bbx_	src/rnn/cells.h	/^  Expr UUx_, WWx_, bbx_;$/;"	m	class:marian::rnn::GRUNematus
bc_	src/rnn/cells.h	/^  Expr Uc_, Wc_, bc_;$/;"	m	class:marian::rnn::SlowLSTM
beamSize_	src/translator/beam_search.h	/^  size_t beamSize_;$/;"	m	class:marian::BeamSearch
begin	src/3rd_party/yaml-cpp/node/detail/node.h	/^  const_node_iterator begin() const {$/;"	f	class:YAML::detail::node
begin	src/3rd_party/yaml-cpp/node/detail/node.h	/^  node_iterator begin() { return m_pRef->begin(); }$/;"	f	class:YAML::detail::node
begin	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  const_node_iterator begin() const {$/;"	f	class:YAML::detail::node_ref
begin	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  node_iterator begin() { return m_pData->begin(); }$/;"	f	class:YAML::detail::node_ref
begin	src/3rd_party/yaml-cpp/node/impl.h	/^inline const_iterator Node::begin() const {$/;"	f	class:YAML::Node
begin	src/3rd_party/yaml-cpp/node/impl.h	/^inline iterator Node::begin() {$/;"	f	class:YAML::Node
begin	src/3rd_party/yaml-cpp/node_data.cpp	/^const_node_iterator node_data::begin() const {$/;"	f	class:YAML::detail::node_data
begin	src/3rd_party/yaml-cpp/node_data.cpp	/^node_iterator node_data::begin() {$/;"	f	class:YAML::detail::node_data
begin	src/data/corpus.h	/^  iterator begin() { return iterator(*this); }$/;"	f	class:marian::data::Corpus
begin	src/data/dataset.h	/^  Data::const_iterator begin() const { return data_->cbegin(); }$/;"	f	class:marian::data::Input
begin	src/data/dataset.h	/^  Data::iterator begin() { return data_->begin(); }$/;"	f	class:marian::data::Input
begin	src/data/dataset.h	/^  iterator begin() { return ExampleIterator(examples_.begin()); }$/;"	f	class:marian::data::Dataset
begin	src/data/text_input.h	/^  iterator begin() { return iterator(*this); }$/;"	f	class:marian::data::TextInput
begin	src/gpu/array.h	/^  __HDI__ T* begin() { return data_; }$/;"	f	struct:marian::gpu::Array
begin	src/gpu/array.h	/^  __HDI__ const T* begin() const { return data_; }$/;"	f	struct:marian::gpu::Array
bench	src/3rd_party/spdlog/example/bench.cpp	/^void bench(int howmany, std::shared_ptr<spdlog::logger> log)$/;"	f
bench_as	src/3rd_party/spdlog/bench/spdlog-null-async.cpp	/^size_t bench_as(int howmany, std::shared_ptr<spdlog::logger> log, int thread_count)$/;"	f
bench_mt	src/3rd_party/spdlog/example/bench.cpp	/^void bench_mt(int howmany, std::shared_ptr<spdlog::logger> log, int thread_count)$/;"	f
beta1_	src/optimizers/optimizers.h	/^  float beta1_ = 0.9;$/;"	m	class:marian::Adam
beta2_	src/optimizers/optimizers.h	/^  float beta2_ = 0.999;$/;"	m	class:marian::Adam
bf_	src/rnn/cells.h	/^  Expr Uf_, Wf_, bf_;$/;"	m	class:marian::rnn::SlowLSTM
bi_	src/rnn/cells.h	/^  Expr Ui_, Wi_, bi_;$/;"	m	class:marian::rnn::SlowLSTM
biasDesc_	src/kernels/cudnn_wrappers.h	/^  cudnnTensorDescriptor_t biasDesc_;$/;"	m	class:marian::ConvolutionWrapper
binary	src/functional/floats.h	/^      static constexpr auto binary = V;$/;"	m	struct:marian::functional::F
bindex	src/gpu/shape.h	/^  __HDI__ int bindex(const Array<int, N>& d) const {$/;"	f	struct:marian::gpu::ConstantShape
blacklist	src/models/hardatt.h	/^  virtual void blacklist(Expr totalCosts, Ptr<data::CorpusBatch> batch) {$/;"	f	class:marian::DecoderStateHardAtt
blacklist	src/models/states.h	/^  virtual void blacklist(Expr totalCosts, Ptr<data::CorpusBatch> batch) {}$/;"	f	class:marian::DecoderState
blacklist	src/translator/scorers.h	/^  virtual void blacklist(Expr totalCosts, Ptr<data::CorpusBatch> batch) {$/;"	f	class:marian::ScorerWrapperState
blacklist	src/translator/scorers.h	/^  virtual void blacklist(Expr totalCosts, Ptr<data::CorpusBatch> batch){};$/;"	f	class:marian::ScorerState
blink	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string blink = "\\033[5m";$/;"	m	class:spdlog::sinks::ansicolor_sink
blink	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string blink      = "\\033[5m";$/;"	m	class:spdlog::sinks::ansicolor_sink
block_retry	src/3rd_party/spdlog/common.h	/^    block_retry, \/\/ Block \/ yield \/ sleep until message can be enqueued$/;"	m	class:spdlog::async_overflow_policy
block_retry	src/3rd_party/spdlog/include/spdlog/common.h	/^    block_retry, \/\/ Block \/ yield \/ sleep until message can be enqueued$/;"	m	class:spdlog::async_overflow_policy
blue	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string blue = "\\033[34m";$/;"	m	class:spdlog::sinks::ansicolor_sink
blue	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string blue       = "\\033[34m";$/;"	m	class:spdlog::sinks::ansicolor_sink
bm_	src/rnn/cells.h	/^  Expr Um_, Wm_, bm_;$/;"	m	class:marian::rnn::Multiplicative
bo_	src/rnn/cells.h	/^  Expr Uo_, Wo_, bo_;$/;"	m	class:marian::rnn::SlowLSTM
bold	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string bold = "\\033[1m";$/;"	m	class:spdlog::sinks::ansicolor_sink
bold	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string bold       = "\\033[1m";$/;"	m	class:spdlog::sinks::ansicolor_sink
bound	src/3rd_party/threadpool.h	/^    std::size_t bound;$/;"	m	class:marian::ThreadPool
bound	src/3rd_party/threadpool2.h	/^    std::size_t bound;$/;"	m	class:marian::ThreadPool2
bounded_condition	src/3rd_party/threadpool.h	/^    std::condition_variable bounded_condition;$/;"	m	class:marian::ThreadPool
bounded_condition	src/3rd_party/threadpool2.h	/^    std::condition_variable bounded_condition;$/;"	m	class:marian::ThreadPool2
breakDown	src/translator/scorers.h	/^  virtual float breakDown(size_t i) { return getProbs()->val()->get(i); }$/;"	f	class:marian::ScorerState
breakDown	src/translator/scorers.h	/^  virtual float breakDown(size_t i) {$/;"	f	class:marian::WordPenaltyState
broadcast	src/common/shape.h	/^    static Shape broadcast(const std::initializer_list<T>& il) {$/;"	f	struct:marian::Shape
broadcast	src/common/shape.h	/^    static Shape broadcast(const std::vector<Shape>& shapes) {$/;"	f	struct:marian::Shape
broadcast	src/common/shape.h	/^    static Shape broadcast(const std::vector<T>& nodes) {$/;"	f	struct:marian::Shape
bstride	src/gpu/shape.h	/^  __HDI__ int bstride(int i) const { return bstride_[i]; }$/;"	f	struct:marian::gpu::ConstantShape
bstride_	src/gpu/shape.h	/^  Array<int, N> bstride_;$/;"	m	struct:marian::gpu::ConstantShape
buffer_	src/3rd_party/spdlog/details/format.h	/^        : BasicWriter<Char>(buffer_), buffer_(array, SIZE)$/;"	f	class:BasicArrayWriter
buffer_	src/3rd_party/spdlog/details/format.h	/^    Buffer<Char> &buffer_;$/;"	m	class:BasicWriter
buffer_	src/3rd_party/spdlog/details/format.h	/^    Buffer<Char> &buffer_;$/;"	m	class:fmt::FormatBuf
buffer_	src/3rd_party/spdlog/details/format.h	/^    MemoryBuffer<char, INLINE_BUFFER_SIZE> buffer_;$/;"	m	class:fmt::internal::UTF16ToUTF8
buffer_	src/3rd_party/spdlog/details/format.h	/^    MemoryBuffer<wchar_t, INLINE_BUFFER_SIZE> buffer_;$/;"	m	class:fmt::internal::UTF8ToUTF16
buffer_	src/3rd_party/spdlog/details/format.h	/^    internal::FixedBuffer<Char> buffer_;$/;"	m	class:BasicArrayWriter
buffer_	src/3rd_party/spdlog/details/format.h	/^    internal::MemoryBuffer<Char, internal::INLINE_BUFFER_SIZE, Allocator> buffer_;$/;"	m	class:BasicMemoryWriter
buffer_	src/3rd_party/spdlog/details/format.h	/^    mutable char buffer_[BUFFER_SIZE];$/;"	m	class:FormatInt
buffer_	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    cell_t* const           buffer_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
buffer_	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^    cell_t* const           buffer_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
buffer_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        : BasicWriter<Char>(buffer_), buffer_(array, SIZE) {}$/;"	f	class:BasicArrayWriter
buffer_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Buffer<Char> &buffer_;$/;"	m	class:BasicWriter
buffer_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    MemoryBuffer<char, INLINE_BUFFER_SIZE> buffer_;$/;"	m	class:fmt::internal::UTF16ToUTF8
buffer_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    MemoryBuffer<wchar_t, INLINE_BUFFER_SIZE> buffer_;$/;"	m	class:fmt::internal::UTF8ToUTF16
buffer_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    internal::FixedBuffer<Char> buffer_;$/;"	m	class:BasicArrayWriter
buffer_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    internal::MemoryBuffer<Char, internal::INLINE_BUFFER_SIZE, Allocator> buffer_;$/;"	m	class:BasicMemoryWriter
buffer_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    mutable char buffer_[BUFFER_SIZE];$/;"	m	class:FormatInt
buffer_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.h	/^    Buffer<Char> &buffer_;$/;"	m	class:fmt::internal::FormatBuf
buffer_mask_	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    size_t const            buffer_mask_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
buffer_mask_	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^    size_t const            buffer_mask_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
buffer_size	src/3rd_party/simple-websocket-server/crypto.hpp	/^    const static size_t buffer_size = 131072;$/;"	m	class:SimpleWeb::Crypto
bufferedBatches_	src/data/batch_generator.h	/^  std::deque<BatchPtr> bufferedBatches_;$/;"	m	class:marian::data::BatchGenerator
build	src/examples/mnist/model.h	/^  virtual Expr build(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::models::MnistFeedForwardNet
build	src/models/charS2S.h	/^  virtual Ptr<EncoderState> build(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::CharS2SEncoder
build	src/models/encdec.h	/^  virtual Expr build(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::EncoderDecoder
build	src/models/experimental/pooling.h	/^  Ptr<EncoderState> build(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::EncoderPooling
build	src/models/experimental/s2s_rec.h	/^  virtual Expr build(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::EncoderDecoderRec
build	src/models/experimental/s2s_symmetric.h	/^  virtual Expr build(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::EncoderDecoderSymmetric
build	src/models/s2s.h	/^  virtual Ptr<EncoderState> build(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::EncoderS2S
build	src/models/transformer.h	/^  Ptr<EncoderState> build(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::EncoderTransformer
build	src/rescorer/rescorer.h	/^  Expr build(Ptr<ExpressionGraph> graph, Ptr<data::CorpusBatch> batch) {$/;"	f	class:marian::Rescorer
buildIndices	src/training/dropper.h	/^__global__ void buildIndices(float* denseData,$/;"	f	namespace:marian
buildIrisClassifier	src/examples/iris/iris.cpp	/^Expr buildIrisClassifier(Ptr<ExpressionGraph> graph,$/;"	f
buildProbs	src/models/experimental/lex_probs.h	/^  void buildProbs(size_t device) {$/;"	f	class:marian::LexProbs
buildSourceEmbeddings	src/models/s2s.h	/^  Expr buildSourceEmbeddings(Ptr<ExpressionGraph> graph) {$/;"	f	class:marian::EncoderS2S
build_what	src/3rd_party/yaml-cpp/exceptions.h	/^  static const std::string build_what(const Mark& mark,$/;"	f	class:YAML::Exception
builder_	src/rescorer/rescorer.h	/^  Ptr<models::ModelBase> builder_;$/;"	m	class:marian::Rescorer
builder_	src/training/graph_group_singleton.h	/^  Ptr<models::ModelBase> builder_;$/;"	m	class:marian::SingletonGraph
builder_	src/training/validator.h	/^  Ptr<models::ModelBase> builder_;$/;"	m	class:marian::Validator
builders_	src/training/graph_group_async.h	/^  std::vector<Ptr<models::ModelBase>> builders_;$/;"	m	class:marian::AsyncGraphGroup
builders_	src/training/graph_group_async_drop.h	/^  std::vector<Ptr<models::ModelBase>> builders_;$/;"	m	class:marian::AsyncGraphGroup
builders_	src/training/graph_group_sync.h	/^  std::vector<Ptr<models::ModelBase>> builders_;$/;"	m	class:marian::SyncGraphGroup
bx_	src/rnn/cells.h	/^  Expr Ux_, Wx_, bx_;$/;"	m	class:marian::rnn::GRUNematus
by_type	src/models/model_factory.cpp	/^Ptr<ModelBase> by_type(std::string type, Ptr<Options> options) {$/;"	f	namespace:marian::models
c_	src/optimizers/clippers.h	/^  float c_;$/;"	m	class:marian::Elementwise
c_	src/optimizers/clippers.h	/^  float c_;$/;"	m	class:marian::Norm
c_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class c_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
c_str	src/3rd_party/spdlog/details/format.h	/^    const Char *c_str() const$/;"	f	class:BasicWriter
c_str	src/3rd_party/spdlog/details/format.h	/^    const Char *c_str() const$/;"	f	class:fmt::BasicCStringRef
c_str	src/3rd_party/spdlog/details/format.h	/^    const char *c_str() const$/;"	f	class:FormatInt
c_str	src/3rd_party/spdlog/details/format.h	/^    const char *c_str() const$/;"	f	class:fmt::internal::UTF16ToUTF8
c_str	src/3rd_party/spdlog/details/format.h	/^    const wchar_t *c_str() const$/;"	f	class:fmt::internal::UTF8ToUTF16
c_str	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    const Char *c_str() const$/;"	f	class:BasicWriter
c_str	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    const Char *c_str() const$/;"	f	class:fmt::BasicCStringRef
c_str	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    const char *c_str() const$/;"	f	class:FormatInt
c_str	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    const char *c_str() const$/;"	f	class:fmt::internal::UTF16ToUTF8
c_str	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    const wchar_t *c_str() const$/;"	f	class:fmt::internal::UTF8ToUTF16
c_str	src/3rd_party/yaml-cpp/emitter.cpp	/^const char* Emitter::c_str() const { return m_stream.str(); }$/;"	f	class:YAML::Emitter
cache_refresh	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    const std::chrono::seconds cache_refresh = std::chrono::seconds(5);$/;"	m	class:spdlog::details::z_formatter
cache_refresh	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^    const std::chrono::seconds cache_refresh = std::chrono::seconds(5);$/;"	m	class:spdlog::details::SPDLOG_FINAL
cacheline_pad_t	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    typedef char            cacheline_pad_t [cacheline_size];$/;"	t	class:spdlog::details::mpmc_bounded_queue
cacheline_pad_t	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^    typedef char            cacheline_pad_t [cacheline_size];$/;"	t	class:spdlog::details::mpmc_bounded_queue
cacheline_size	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    static size_t const     cacheline_size = 64;$/;"	m	class:spdlog::details::mpmc_bounded_queue
cacheline_size	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^    static size_t const     cacheline_size = 64;$/;"	m	class:spdlog::details::mpmc_bounded_queue
calc_filename	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    static filename_t calc_filename(const filename_t& basename)$/;"	f	struct:spdlog::sinks::dateonly_daily_file_name_calculator
calc_filename	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    static filename_t calc_filename(const filename_t& basename)$/;"	f	struct:spdlog::sinks::default_daily_file_name_calculator
calc_filename	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    static filename_t calc_filename(const filename_t& filename, std::size_t index)$/;"	f	class:spdlog::sinks::SPDLOG_FINAL
calc_filename	src/3rd_party/spdlog/sinks/file_sinks.h	/^    static filename_t calc_filename(const filename_t& basename, const filename_t& extension)$/;"	f	class:spdlog::sinks::daily_file_sink
calc_filename	src/3rd_party/spdlog/sinks/file_sinks.h	/^    static filename_t calc_filename(const filename_t& filename, std::size_t index, const filename_t& extension)$/;"	f	class:spdlog::sinks::rotating_file_sink
calc_filename	src/3rd_party/spdlog/tests/file_log.cpp	/^    static spdlog::filename_t calc_filename(const spdlog::filename_t& basename)$/;"	f	struct:custom_daily_file_name_calculator
calculateAccuracy	src/examples/iris/helper.cpp	/^float calculateAccuracy(const std::vector<float> probs,$/;"	f
callback	src/3rd_party/simple-websocket-server/server_ws.hpp	/^        std::function<void(const error_code)> callback;$/;"	m	class:SimpleWeb::SocketServerBase::Connection::SendData
capacity	src/3rd_party/spdlog/details/format.h	/^    std::size_t capacity() const$/;"	f	class:fmt::Buffer
capacity	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::size_t capacity() const$/;"	f	class:fmt::Buffer
capacity	src/tensors/allocator.h	/^  size_t capacity(size_t num) {$/;"	f	class:marian::Allocator
capacity	src/tensors/tensor_allocator.h	/^  size_t capacity(Shape shape) {$/;"	f	class:marian::TensorAllocator
capacity	src/tensors/tensor_cpu.h	/^  size_t capacity() { return size_; }$/;"	f	class:marian::DeviceCPU
capacity	src/training/sparse_tensor.h	/^  int capacity() { return capacity_; }$/;"	f	class:marian::SparseTensorBase
capacity_	src/3rd_party/spdlog/details/format.h	/^    std::size_t capacity_;$/;"	m	class:fmt::Buffer
capacity_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::size_t capacity_;$/;"	m	class:fmt::Buffer
capacity_	src/training/sparse_tensor.h	/^  int capacity_;$/;"	m	class:marian::SparseTensorBase
capturedExpression	src/3rd_party/catch.hpp	/^        std::string capturedExpression;$/;"	m	struct:Catch::AssertionInfo
capturedExpression	src/3rd_party/spdlog/tests/catch.hpp	/^        std::string capturedExpression;$/;"	m	struct:Catch::AssertionInfo
cast	src/3rd_party/spdlog/details/format.h	/^    static Char cast(int value)$/;"	f	class:fmt::internal::BasicCharTraits
cast	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static Char cast(int value)$/;"	f	class:fmt::internal::BasicCharTraits
cell	src/rnn/constructors.h	/^typedef Accumulator<CellFactory> cell;$/;"	t	namespace:marian::rnn
cell	src/rnn/types.h	/^  Expr cell;$/;"	m	struct:marian::rnn::State
cell_	src/rnn/rnn.h	/^  Ptr<Cell> cell_;$/;"	m	class:marian::rnn::SingleLayerRNN
cell_t	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    struct cell_t$/;"	s	class:spdlog::details::mpmc_bounded_queue
cell_t	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^    struct cell_t$/;"	s	class:spdlog::details::mpmc_bounded_queue
ch_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    explicit ch_formatter(char ch) : _ch(ch)$/;"	f	class:spdlog::details::ch_formatter
ch_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class ch_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
ch_formatter	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^    explicit ch_formatter(char ch): _ch(ch)$/;"	f	class:spdlog::details::SPDLOG_FINAL
check	src/3rd_party/spdlog/details/format.h	/^inline T check(T value)$/;"	f	namespace:fmt::internal
check_no_auto_index	src/3rd_party/spdlog/details/format.h	/^    bool check_no_auto_index(const char *&error)$/;"	f	class:fmt::internal::FormatterBase
check_no_auto_index	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    bool check_no_auto_index(const char *&error)$/;"	f	class:fmt::internal::FormatterBase
checkedLog	src/common/logging.h	/^void checkedLog(std::string logger, std::string level, Args... args) {$/;"	f
child	src/graph/node.h	/^  virtual Expr child(size_t i) { return children_[i]; }$/;"	f	class:marian::Node
childCount	src/3rd_party/yaml-cpp/emitterstate.h	/^    std::size_t childCount;$/;"	m	struct:YAML::EmitterState::Group
children	src/graph/node.h	/^  std::vector<Expr>& children() { return children_; }$/;"	f	struct:marian::NaryNodeOp
children	src/graph/node.h	/^  virtual std::vector<Expr>& children() { return children_; }$/;"	f	class:marian::Node
children_	src/graph/node.h	/^  std::vector<Expr> children_;$/;"	m	class:marian::Node
chomp	src/3rd_party/yaml-cpp/scanscalar.h	/^  CHOMP chomp;  \/\/ do we strip, clip, or keep trailing newlines (at the very$/;"	m	struct:YAML::ScanScalarParams
clear	src/3rd_party/spdlog/details/log_msg.h	/^    void clear()$/;"	f	struct:spdlog::details::log_msg
clear	src/3rd_party/yaml-cpp/ptr_vector.h	/^  void clear() { m_data.clear(); }$/;"	f	class:YAML::ptr_vector
clear	src/3rd_party/yaml-cpp/setting.h	/^  void clear() {$/;"	f	class:YAML::SettingChanges
clear	src/examples/mnist/model.h	/^  virtual void clear(Ptr<ExpressionGraph> graph) { graph->clear(); };$/;"	f	class:marian::models::MnistFeedForwardNet
clear	src/examples/mnist/model_lenet.h	/^  virtual void clear(Ptr<ExpressionGraph> graph) { graph->clear(); };$/;"	f	class:marian::models::MnistLeNet
clear	src/graph/expression_graph.h	/^  void clear() {$/;"	f	class:marian::ExpressionGraph
clear	src/graph/parameters.h	/^  void clear() {$/;"	f	class:marian::Parameters
clear	src/models/encdec.h	/^  virtual void clear(Ptr<ExpressionGraph> graph) {$/;"	f	class:marian::EncoderDecoder
clear	src/models/experimental/s2s_symmetric.h	/^  virtual void clear(Ptr<ExpressionGraph> graph) {$/;"	f	class:marian::EncoderDecoderSymmetric
clear	src/models/hardatt.h	/^  void clear() { rnn_ = nullptr; }$/;"	f	class:marian::DecoderHardAtt
clear	src/models/s2s.h	/^  void clear() { rnn_ = nullptr; }$/;"	f	class:marian::DecoderS2S
clear	src/models/s2s.h	/^  void clear() {}$/;"	f	class:marian::EncoderS2S
clear	src/models/transformer.h	/^  void clear() {}$/;"	f	class:marian::DecoderTransformer
clear	src/models/transformer.h	/^  void clear() {}$/;"	f	class:marian::EncoderTransformer
clear	src/rnn/attention.h	/^  virtual void clear() {$/;"	f	class:marian::rnn::GlobalAttention
clear	src/rnn/types.h	/^  virtual void clear() {$/;"	f	class:marian::rnn::MultiCellInput
clear	src/rnn/types.h	/^  virtual void clear() {$/;"	f	class:marian::rnn::StackedCell
clear	src/rnn/types.h	/^  virtual void clear() {}$/;"	f	class:marian::rnn::Cell
clear	src/rnn/types.h	/^  void clear() { states_.clear(); }$/;"	f	class:marian::rnn::States
clear	src/tensors/allocator.h	/^  void clear() {$/;"	f	class:marian::Allocator
clear	src/tensors/tensor_allocator.h	/^  void clear() { allocator_->clear(); }$/;"	f	class:marian::TensorAllocator
clear	src/translator/scorers.h	/^  virtual void clear(Ptr<ExpressionGraph> graph) {$/;"	f	class:marian::ScorerWrapper
clear	src/translator/scorers.h	/^  virtual void clear(Ptr<ExpressionGraph> graph) {}$/;"	f	class:marian::UnseenWordPenalty
clear	src/translator/scorers.h	/^  virtual void clear(Ptr<ExpressionGraph> graph) {}$/;"	f	class:marian::WordPenalty
clearParameters	src/graph/expression_graph.h	/^  void clearParameters() { params_->clear(); }$/;"	f	class:marian::ExpressionGraph
client_error_bad_request	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_bad_request = 400,$/;"	m	class:SimpleWeb::StatusCode
client_error_conflict	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_conflict,$/;"	m	class:SimpleWeb::StatusCode
client_error_expectation_failed	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_expectation_failed,$/;"	m	class:SimpleWeb::StatusCode
client_error_failed_dependency	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_failed_dependency,$/;"	m	class:SimpleWeb::StatusCode
client_error_forbidden	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_forbidden,$/;"	m	class:SimpleWeb::StatusCode
client_error_gone	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_gone,$/;"	m	class:SimpleWeb::StatusCode
client_error_im_a_teapot	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_im_a_teapot,$/;"	m	class:SimpleWeb::StatusCode
client_error_length_required	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_length_required,$/;"	m	class:SimpleWeb::StatusCode
client_error_locked	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_locked,$/;"	m	class:SimpleWeb::StatusCode
client_error_method_not_allowed	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_method_not_allowed,$/;"	m	class:SimpleWeb::StatusCode
client_error_misdirection_required	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_misdirection_required = 421,$/;"	m	class:SimpleWeb::StatusCode
client_error_not_acceptable	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_not_acceptable,$/;"	m	class:SimpleWeb::StatusCode
client_error_not_found	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_not_found,$/;"	m	class:SimpleWeb::StatusCode
client_error_payload_too_large	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_payload_too_large,$/;"	m	class:SimpleWeb::StatusCode
client_error_payment_required	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_payment_required,$/;"	m	class:SimpleWeb::StatusCode
client_error_precondition_failed	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_precondition_failed,$/;"	m	class:SimpleWeb::StatusCode
client_error_precondition_required	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_precondition_required = 428,$/;"	m	class:SimpleWeb::StatusCode
client_error_proxy_authentication_required	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_proxy_authentication_required,$/;"	m	class:SimpleWeb::StatusCode
client_error_range_not_satisfiable	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_range_not_satisfiable,$/;"	m	class:SimpleWeb::StatusCode
client_error_request_header_fields_too_large	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_request_header_fields_too_large = 431,$/;"	m	class:SimpleWeb::StatusCode
client_error_request_timeout	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_request_timeout,$/;"	m	class:SimpleWeb::StatusCode
client_error_too_many_requests	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_too_many_requests,$/;"	m	class:SimpleWeb::StatusCode
client_error_unauthorized	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_unauthorized,$/;"	m	class:SimpleWeb::StatusCode
client_error_unavailable_for_legal_reasons	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_unavailable_for_legal_reasons = 451,$/;"	m	class:SimpleWeb::StatusCode
client_error_unprocessable_entity	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_unprocessable_entity,$/;"	m	class:SimpleWeb::StatusCode
client_error_unsupported_media_type	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_unsupported_media_type,$/;"	m	class:SimpleWeb::StatusCode
client_error_upgrade_required	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_upgrade_required = 426,$/;"	m	class:SimpleWeb::StatusCode
client_error_uri_too_long	src/3rd_party/simple-websocket-server/status_code.hpp	/^    client_error_uri_too_long,$/;"	m	class:SimpleWeb::StatusCode
clipper_	src/optimizers/optimizers.h	/^  Ptr<ClipperBase> clipper_;$/;"	m	class:marian::OptimizerBase
clone	src/layers/factory.h	/^  Accumulator<Factory> clone() {$/;"	f	class:marian::Accumulator
clone	src/rnn/constructors.h	/^  CellFactory clone() {$/;"	f	class:marian::rnn::CellFactory
clone	src/rnn/constructors.h	/^  RNNFactory clone() {$/;"	f	class:marian::rnn::RNNFactory
close	src/3rd_party/spdlog/details/file_helper.h	/^    void close()$/;"	f	class:spdlog::details::file_helper
close	src/3rd_party/spdlog/include/spdlog/details/file_helper.h	/^    void close()$/;"	f	class:spdlog::details::file_helper
close	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	/^void fmt::BufferedFile::close() {$/;"	f	class:fmt::BufferedFile
close	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	/^void fmt::File::close() {$/;"	f	class:fmt::File
closed	src/3rd_party/simple-websocket-server/server_ws.hpp	/^          : handler_runner(std::move(handler_runner)), socket(new socket_type(std::forward<Args>(args)...)), timeout_idle(timeout_idle), strand(socket->get_io_service()), closed(false) {}$/;"	f	class:SimpleWeb::SocketServerBase::Connection
closed	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      Connection(std::unique_ptr<socket_type> &&socket) noexcept : socket(std::move(socket)), timeout_idle(0), strand(this->socket->get_io_service()), closed(false) {}$/;"	f	class:SimpleWeb::SocketServerBase::Connection
closed	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::atomic<bool> closed;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
clz	src/3rd_party/spdlog/details/format.h	/^inline uint32_t clz(uint32_t x)$/;"	f	namespace:fmt::internal
clz	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline uint32_t clz(uint32_t x)$/;"	f	namespace:fmt::internal
clzll	src/3rd_party/spdlog/details/format.h	/^inline uint32_t clzll(uint64_t x)$/;"	f	namespace:fmt::internal
clzll	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline uint32_t clzll(uint64_t x)$/;"	f	namespace:fmt::internal
cmdline_options_	src/common/config_parser.h	/^  boost::program_options::options_description cmdline_options_;$/;"	m	class:marian::ConfigParser
cnpy	src/3rd_party/cnpy/cnpy.h	/^namespace cnpy {$/;"	n
col	src/3rd_party/yaml-cpp/ostream_wrapper.h	/^  std::size_t col() const { return m_col; }$/;"	f	class:YAML::ostream_wrapper
colIndices	src/kernels/sparse.h	/^  int* colIndices() { return colIndices_; }$/;"	f	class:marian::sparse::CSR
colIndices_	src/models/experimental/lex_probs.h	/^  std::vector<int> colIndices_;$/;"	m	class:marian::LexProbs
collect	src/translator/output_collector.cpp	/^std::vector<std::string> StringCollector::collect(bool nbest) {$/;"	f	class:marian::StringCollector
collectStats	src/examples/mnist/model.h	/^  Ptr<data::BatchStats> collectStats(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::models::MnistFeedForwardNet
collectStats	src/models/encdec.h	/^  Ptr<data::BatchStats> collectStats(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::EncoderDecoder
collectStats	src/training/graph_group_async.h	/^  Ptr<data::BatchStats> collectStats() {$/;"	f	class:marian::AsyncGraphGroup
collectStats	src/training/graph_group_async_drop.h	/^  Ptr<data::BatchStats> collectStats() {$/;"	f	class:marian::AsyncGraphGroup
collectStats	src/training/graph_group_singleton.h	/^  Ptr<data::BatchStats> collectStats() {$/;"	f	class:marian::SingletonGraph
collectStats	src/training/graph_group_sync.h	/^  Ptr<data::BatchStats> collectStats() {$/;"	f	class:marian::SyncGraphGroup
collectionStack	src/3rd_party/yaml-cpp/collectionstack.h	/^  std::stack<CollectionType::value> collectionStack;$/;"	m	class:YAML::CollectionStack
color	src/graph/node.h	/^  virtual const std::string color() { return "orange"; }$/;"	f	class:marian::Node
color	src/graph/node_operators.h	/^  const std::string color() { return "orangered"; }$/;"	f	struct:marian::ParamNode
color	src/graph/node_operators.h	/^  const std::string color() { return "white"; }$/;"	f	struct:marian::ConstantNode
color	src/graph/node_operators_binary.h	/^  const std::string color() { return "orange"; }$/;"	f	class:marian::DotBatchedNodeOp
color	src/graph/node_operators_binary.h	/^  const std::string color() { return "orange"; }$/;"	f	class:marian::DotNodeOp
color	src/graph/node_operators_binary.h	/^  const std::string color() { return "orange"; }$/;"	f	struct:marian::ScalarProductNodeOp
color	src/graph/node_operators_binary.h	/^  const std::string color() { return "yellow"; }$/;"	f	struct:marian::ElementBinaryNodeOp
color	src/graph/node_operators_unary.h	/^  const std::string color() { return "grey"; }$/;"	f	class:marian::ReshapeNodeOp
color	src/graph/node_operators_unary.h	/^  const std::string color() { return "grey"; }$/;"	f	class:marian::StepNodeOp
color	src/graph/node_operators_unary.h	/^  const std::string color() { return "orange"; }$/;"	f	struct:marian::ColsNodeOp
color	src/graph/node_operators_unary.h	/^  const std::string color() { return "orange"; }$/;"	f	struct:marian::MeanNodeOp
color	src/graph/node_operators_unary.h	/^  const std::string color() { return "orange"; }$/;"	f	struct:marian::RowsNodeOp
color	src/graph/node_operators_unary.h	/^  const std::string color() { return "orange"; }$/;"	f	struct:marian::SelectNodeOp
color	src/graph/node_operators_unary.h	/^  const std::string color() { return "orange"; }$/;"	f	struct:marian::SumNodeOp
color	src/graph/node_operators_unary.h	/^  const std::string color() { return "orange"; }$/;"	f	struct:marian::TransposeNodeOp
color	src/graph/node_operators_unary.h	/^  const std::string color() { return "yellow"; }$/;"	f	struct:marian::TanhNodeOp
color	src/graph/node_operators_unary.h	/^  const std::string color() { return "yellow"; }$/;"	f	struct:marian::UnaryNodeOp
colors_	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    std::map<level::level_enum, std::string> colors_;$/;"	m	class:spdlog::sinks::ansicolor_sink
colors_	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    std::map<level::level_enum, WORD> colors_;$/;"	m	class:spdlog::sinks::wincolor_sink
colors_	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    std::map<level::level_enum, std::string> colors_;$/;"	m	class:spdlog::sinks::ansicolor_sink
cols	src/kernels/sparse.h	/^  int cols() { return cols_; }$/;"	f	class:marian::sparse::CSR
column	src/3rd_party/yaml-cpp/mark.h	/^  int line, column;$/;"	m	struct:YAML::Mark
column	src/3rd_party/yaml-cpp/scanner.h	/^    int column;$/;"	m	struct:YAML::Scanner::IndentMarker
column	src/3rd_party/yaml-cpp/stream.h	/^  int column() const { return m_mark.column; }$/;"	f	class:YAML::Stream
combine	src/tensors/allocator.h	/^  Gap combine(const Gap& mp) const {$/;"	f	class:marian::Gap
comment	src/3rd_party/yaml-cpp/ostream_wrapper.h	/^  bool comment() const { return m_comment; }$/;"	f	class:YAML::ostream_wrapper
compare	src/3rd_party/catch.hpp	/^    bool compare( T1 const& lhs, T2 const& rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, long long rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, std::nullptr_t ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op, typename T> bool compare( int lhs, T* rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op, typename T> bool compare( long lhs, T* rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op, typename T> bool compare( long long lhs, T* rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op, typename T> bool compare( std::nullptr_t, T* rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( int lhs, unsigned char rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( int lhs, unsigned int rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( int lhs, unsigned long rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( long lhs, unsigned char rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( long lhs, unsigned int rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( long lhs, unsigned long rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( long long lhs, unsigned char rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( long long lhs, unsigned int rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( long long lhs, unsigned long long rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( long long lhs, unsigned long rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( unsigned char lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( unsigned char lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( unsigned int lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( unsigned int lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( unsigned long lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( unsigned long lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( unsigned long long lhs, char rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( unsigned long long lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( unsigned long long lhs, long long rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/catch.hpp	/^    template<Operator Op> bool compare( unsigned long long lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/details/format.h	/^    int compare(BasicStringRef other) const$/;"	f	class:fmt::BasicStringRef
compare	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    int compare(BasicStringRef other) const$/;"	f	class:fmt::BasicStringRef
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    bool compare( T1 const& lhs, T2 const& rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, std::nullptr_t ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op, typename T> bool compare( int lhs, T* rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op, typename T> bool compare( long lhs, T* rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op, typename T> bool compare( std::nullptr_t, T* rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( int lhs, unsigned char rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( int lhs, unsigned int rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( int lhs, unsigned long rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( long lhs, unsigned char rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( long lhs, unsigned int rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( long lhs, unsigned long rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( unsigned char lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( unsigned char lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( unsigned int lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( unsigned int lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( unsigned long lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op> bool compare( unsigned long lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compilation_database_folder	contrib/vim/.ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
compile_pattern	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^inline void spdlog::pattern_formatter::compile_pattern(const std::string& pattern)$/;"	f	class:spdlog::pattern_formatter
compile_pattern	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^inline void spdlog::pattern_formatter::compile_pattern(const std::string& pattern)$/;"	f	class:spdlog::pattern_formatter
compute_map_size	src/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::compute_map_size() const {$/;"	f	class:YAML::detail::node_data
compute_seq_size	src/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::compute_seq_size() const {$/;"	f	class:YAML::detail::node_data
concealed	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string concealed = "\\033[8m";$/;"	m	class:spdlog::sinks::ansicolor_sink
concealed	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string concealed  = "\\033[8m";$/;"	m	class:spdlog::sinks::ansicolor_sink
condition	src/3rd_party/threadpool.h	/^    std::condition_variable condition;$/;"	m	class:marian::ThreadPool
condition	src/3rd_party/threadpool2.h	/^    std::condition_variable condition;$/;"	m	class:marian::ThreadPool2
conditional_log	src/3rd_party/spdlog/tests/cond_logging.cpp	/^std::string conditional_log(const bool flag, const T& what, spdlog::level::level_enum logger_level)$/;"	f
conditional_log_varags	src/3rd_party/spdlog/tests/cond_logging.cpp	/^std::string conditional_log_varags(spdlog::level::level_enum logger_level, const bool flag, const char* fmt, const Arg1& arg1, const Args&... args)$/;"	f
conditional_log_varags	src/3rd_party/spdlog/tests/cond_logging.cpp	/^std::wstring conditional_log_varags(spdlog::level::level_enum logger_level, const bool flag, const wchar_t* fmt, const Arg1& arg1, const Args&... args)$/;"	f
config	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    Config config;$/;"	m	class:SimpleWeb::SocketServerBase
config_	src/common/config.h	/^  YAML::Node config_;$/;"	m	class:marian::Config
config_	src/common/config_parser.h	/^  YAML::Node config_;$/;"	m	class:marian::ConfigParser
connection_close	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    void connection_close(const std::shared_ptr<Connection> &connection, Endpoint &endpoint, int status, const std::string &reason) const {$/;"	f	class:SimpleWeb::SocketServerBase
connection_error	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    void connection_error(const std::shared_ptr<Connection> &connection, Endpoint &endpoint, const error_code &ec) const {$/;"	f	class:SimpleWeb::SocketServerBase
connection_open	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    void connection_open(const std::shared_ptr<Connection> &connection, Endpoint &endpoint) const {$/;"	f	class:SimpleWeb::SocketServerBase
connections	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::unordered_set<std::shared_ptr<Connection>> connections;$/;"	m	class:SimpleWeb::SocketServerBase::Endpoint
connections_mutex	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::mutex connections_mutex;$/;"	m	class:SimpleWeb::SocketServerBase::Endpoint
const_check	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline T const_check(T value)$/;"	f	namespace:fmt::internal
const_iterator	src/3rd_party/yaml-cpp/node/detail/iterator_fwd.h	/^typedef detail::iterator_base<const detail::iterator_value> const_iterator;$/;"	t	namespace:YAML
const_iterator	src/3rd_party/yaml-cpp/node/node.h	/^  typedef YAML::const_iterator const_iterator;$/;"	t	class:YAML::Node
const_iterator	src/data/dataset.h	/^  typedef Data::const_iterator const_iterator;$/;"	t	class:marian::data::Input
const_node_iterator	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^typedef node_iterator_base<const node> const_node_iterator;$/;"	t	namespace:YAML::detail
constant	src/graph/expression_graph.h	/^  Expr constant(Shape shape, Args... args) {$/;"	f	class:marian::ExpressionGraph
construct	src/examples/mnist/model.h	/^  virtual Expr construct(Ptr<ExpressionGraph> g,$/;"	f	class:marian::models::MnistFeedForwardNet
construct	src/examples/mnist/model_lenet.h	/^  virtual Expr construct(Ptr<ExpressionGraph> g,$/;"	f	class:marian::models::MnistLeNet
construct	src/layers/constructors.h	/^  Ptr<Layer> construct() {$/;"	f	class:marian::mlp::DenseFactory
construct	src/layers/constructors.h	/^  Ptr<MLP> construct() {$/;"	f	class:marian::mlp::MLPFactory
construct	src/layers/generic.h	/^  Expr construct() {$/;"	f	struct:marian::EmbeddingFactory
construct	src/models/model_factory.cpp	/^Ptr<DecoderBase> DecoderFactory::construct() {$/;"	f	class:marian::models::DecoderFactory
construct	src/models/model_factory.cpp	/^Ptr<EncoderBase> EncoderFactory::construct() {$/;"	f	class:marian::models::EncoderFactory
construct	src/models/model_factory.cpp	/^Ptr<EncoderDecoder> EncoderDecoderFactory::construct() {$/;"	f	class:marian::models::EncoderDecoderFactory
construct	src/rnn/constructors.h	/^  Ptr<Cell> construct() {$/;"	f	class:marian::rnn::StackedCellFactory
construct	src/rnn/constructors.h	/^  Ptr<CellInput> construct() {$/;"	f	class:marian::rnn::AttentionFactory
construct	src/rnn/constructors.h	/^  Ptr<RNN> construct() {$/;"	f	class:marian::rnn::RNNFactory
construct	src/rnn/constructors.h	/^  virtual Ptr<Cell> construct() {$/;"	f	class:marian::rnn::CellFactory
constructDecoderRNN	src/models/s2s.h	/^  Ptr<rnn::RNN> constructDecoderRNN(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::DecoderS2S
content	src/3rd_party/yaml-cpp/emittermanip.h	/^  std::string content;$/;"	m	struct:YAML::_Alias
content	src/3rd_party/yaml-cpp/emittermanip.h	/^  std::string content;$/;"	m	struct:YAML::_Anchor
content	src/3rd_party/yaml-cpp/emittermanip.h	/^  std::string content;$/;"	m	struct:YAML::_Comment
content	src/3rd_party/yaml-cpp/emittermanip.h	/^  std::string content;$/;"	m	struct:YAML::_Tag
contextDropped_	src/rnn/attention.h	/^  Expr contextDropped_;$/;"	m	class:marian::rnn::GlobalAttention
context_	src/models/experimental/pooling.h	/^  Expr context_;$/;"	m	class:marian::EncoderStatePooling
context_	src/models/states.h	/^  Expr context_;$/;"	m	class:marian::EncoderState
contexts_	src/rnn/attention.h	/^  std::vector<Expr> contexts_;$/;"	m	class:marian::rnn::GlobalAttention
convDesc_	src/kernels/cudnn_wrappers.h	/^  cudnnConvolutionDescriptor_t convDesc_;$/;"	m	class:marian::ConvolutionWrapper
conv_	src/graph/node_operators_binary.h	/^  ConvolutionWrapper conv_;$/;"	m	class:marian::ConvolutionOp
conversion	src/3rd_party/yaml-cpp/node/convert.h	/^namespace conversion {$/;"	n	namespace:YAML
convert	src/3rd_party/catch.hpp	/^        static std::string convert( T const& ) { return unprintableString; }$/;"	f	struct:Catch::Detail::EnumStringMaker
convert	src/3rd_party/catch.hpp	/^        static std::string convert( T const& _value ) {$/;"	f	struct:Catch::Detail::StringMakerBase
convert	src/3rd_party/catch.hpp	/^        static std::string convert( T const& v )$/;"	f	struct:Catch::Detail::EnumStringMaker
convert	src/3rd_party/catch.hpp	/^        static std::string convert( T const& v )$/;"	f	struct:Catch::Detail::StringMakerBase
convert	src/3rd_party/catch.hpp	/^    static std::string convert( R C::* p ) {$/;"	f	struct:Catch::StringMaker
convert	src/3rd_party/catch.hpp	/^    static std::string convert( U* p ) {$/;"	f	struct:Catch::StringMaker
convert	src/3rd_party/spdlog/details/format.cc	/^FMT_FUNC int fmt::internal::UTF16ToUTF8::convert(fmt::WStringRef s)$/;"	f	class:fmt::internal::UTF16ToUTF8
convert	src/3rd_party/spdlog/details/format.h	/^    static char convert(char value)$/;"	f	class:fmt::internal::CharTraits
convert	src/3rd_party/spdlog/details/format.h	/^    static wchar_t convert(char value)$/;"	f	class:fmt::internal::CharTraits
convert	src/3rd_party/spdlog/details/format.h	/^    static wchar_t convert(wchar_t value)$/;"	f	class:fmt::internal::CharTraits
convert	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^FMT_FUNC int fmt::internal::UTF16ToUTF8::convert(fmt::WStringRef s) {$/;"	f	class:fmt::internal::UTF16ToUTF8
convert	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static char convert(char value)$/;"	f	class:fmt::internal::CharTraits
convert	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static wchar_t convert(char value)$/;"	f	class:fmt::internal::CharTraits
convert	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static wchar_t convert(wchar_t value)$/;"	f	class:fmt::internal::CharTraits
convert	src/3rd_party/yaml-cpp/node/convert.h	/^struct convert<Binary> {$/;"	s	namespace:YAML
convert	src/3rd_party/yaml-cpp/node/convert.h	/^struct convert<Node> {$/;"	s	namespace:YAML
convert	src/3rd_party/yaml-cpp/node/convert.h	/^struct convert<_Null> {$/;"	s	namespace:YAML
convert	src/3rd_party/yaml-cpp/node/convert.h	/^struct convert<bool> {$/;"	s	namespace:YAML
convert	src/3rd_party/yaml-cpp/node/convert.h	/^struct convert<const char*> {$/;"	s	namespace:YAML
convert	src/3rd_party/yaml-cpp/node/convert.h	/^struct convert<const char[N]> {$/;"	s	namespace:YAML
convert	src/3rd_party/yaml-cpp/node/convert.h	/^struct convert<std::array<T, N>> {$/;"	s	namespace:YAML
convert	src/3rd_party/yaml-cpp/node/convert.h	/^struct convert<std::list<T>> {$/;"	s	namespace:YAML
convert	src/3rd_party/yaml-cpp/node/convert.h	/^struct convert<std::map<K, V>> {$/;"	s	namespace:YAML
convert	src/3rd_party/yaml-cpp/node/convert.h	/^struct convert<std::pair<T, U>> {$/;"	s	namespace:YAML
convert	src/3rd_party/yaml-cpp/node/convert.h	/^struct convert<std::string> {$/;"	s	namespace:YAML
convert	src/3rd_party/yaml-cpp/node/convert.h	/^struct convert<std::vector<T>> {$/;"	s	namespace:YAML
convert_rwcount	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	/^inline unsigned convert_rwcount(std::size_t count) {$/;"	f	namespace:__anon43
convert_sequence_to_map	src/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::convert_sequence_to_map(shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_data
convert_to_android	src/3rd_party/spdlog/include/spdlog/sinks/android_sink.h	/^    static android_LogPriority convert_to_android(spdlog::level::level_enum level)$/;"	f	class:spdlog::sinks::android_sink
convert_to_android	src/3rd_party/spdlog/sinks/android_sink.h	/^    static android_LogPriority convert_to_android(spdlog::level::level_enum level)$/;"	f	class:spdlog::sinks::base_android_sink
convert_to_map	src/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::convert_to_map(shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_data
convert_to_node	src/3rd_party/yaml-cpp/node/detail/impl.h	/^inline node& node_data::convert_to_node(const T& rhs,$/;"	f	class:YAML::detail::node_data
convolution	src/layers/convolution.h	/^typedef Accumulator<Convolution> convolution;$/;"	t	namespace:marian
copy	src/translator/nth_element.h	/^  NthElement(const NthElement& copy) = delete;$/;"	m	class:marian::NthElement
copyFrom	src/training/sparse_tensor.h	/^  void copyFrom(float* data, int* indices, int size, bool data_only) {$/;"	f	class:marian::SparseTensorBase
copyFrom	src/training/sparse_tensor.h	/^  void copyFrom(std::shared_ptr<SparseTensorBase> t, bool data_only = false) {$/;"	f	class:marian::SparseTensorBase
copyParams	src/graph/expression_graph.h	/^  void copyParams(Ptr<ExpressionGraph> graph) {$/;"	f	class:marian::ExpressionGraph
corpus_	src/data/corpus.h	/^  Corpus* corpus_;$/;"	m	class:marian::data::CorpusIterator
corpus_	src/data/text_input.h	/^  TextInput* corpus_;$/;"	m	class:marian::data::TextIterator
corpus_	src/rescorer/rescorer.h	/^  Ptr<Corpus> corpus_;$/;"	m	class:marian::Rescore
corpus_	src/translator/translator.h	/^  Ptr<data::Corpus> corpus_;$/;"	m	class:marian::TranslateMultiGPU
cost	src/translator/history.h	/^    float cost;$/;"	m	struct:marian::History::HypothesisCoord
costBreakdown_	src/translator/hypothesis.h	/^  std::vector<float> costBreakdown_;$/;"	m	class:marian::Hypothesis
cost_	src/translator/hypothesis.h	/^  const float cost_;$/;"	m	class:marian::Hypothesis
count	scripts/server/client_example.py	/^            count = 0$/;"	v
count	scripts/server/client_example.py	/^    count = 0$/;"	v
count	src/3rd_party/simple-websocket-server/utility.hpp	/^      SharedLock(std::atomic<long> &count) noexcept : count(count) {}$/;"	f	class:SimpleWeb::ScopeRunner::SharedLock
count	src/3rd_party/simple-websocket-server/utility.hpp	/^      std::atomic<long> &count;$/;"	m	class:SimpleWeb::ScopeRunner::SharedLock
count	src/3rd_party/simple-websocket-server/utility.hpp	/^    std::atomic<long> count;$/;"	m	class:SimpleWeb::ScopeRunner
countCorrect	src/examples/mnist/validator.h	/^  float countCorrect(const std::vector<float>& probs,$/;"	f	class:marian::AccuracyValidator
count_digits	src/3rd_party/spdlog/details/format.h	/^inline unsigned count_digits(uint32_t n)$/;"	f	namespace:fmt::internal
count_digits	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline unsigned count_digits(uint32_t n)$/;"	f	namespace:fmt::internal
count_lines	src/3rd_party/spdlog/tests/utils.cpp	/^std::size_t count_lines(const std::string& filename)$/;"	f
counter_	src/data/vocab.cpp	/^  std::unordered_map<std::string, size_t>& counter_;$/;"	m	class:marian::Vocab::VocabFreqOrderer	file:
crc32	src/common/compile_time_crc32.h	/^constexpr uint32_t crc32(const char* str) {$/;"	f
crc32	src/common/compile_time_crc32.h	/^constexpr uint32_t crc32<size_t(-1)>(const char* str) {$/;"	f
crc_table	src/common/compile_time_crc32.h	/^static constexpr uint32_t crc_table[256]$/;"	v
create	src/3rd_party/spdlog/details/registry.h	/^    std::shared_ptr<logger> create(const std::string& logger_name, const It& sinks_begin, const It& sinks_end)$/;"	f	class:spdlog::details::registry_t
create	src/3rd_party/spdlog/details/registry.h	/^    std::shared_ptr<logger> create(const std::string& logger_name, sink_ptr sink)$/;"	f	class:spdlog::details::registry_t
create	src/3rd_party/spdlog/details/registry.h	/^    std::shared_ptr<logger> create(const std::string& logger_name, sinks_init_list sinks)$/;"	f	class:spdlog::details::registry_t
create	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string& logger_name, Args... args)$/;"	f	class:spdlog
create	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string& logger_name, const It& sinks_begin, const It& sinks_end)$/;"	f	class:spdlog
create	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string& logger_name, spdlog::sinks_init_list sinks)$/;"	f	class:spdlog
create	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    std::shared_ptr<logger> create(const std::string& logger_name, const It& sinks_begin, const It& sinks_end)$/;"	f	class:spdlog::details::registry_t
create	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    std::shared_ptr<logger> create(const std::string& logger_name, sink_ptr sink)$/;"	f	class:spdlog::details::registry_t
create	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    std::shared_ptr<logger> create(const std::string& logger_name, sinks_init_list sinks)$/;"	f	class:spdlog::details::registry_t
create	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string& logger_name, Args... args)$/;"	f	class:spdlog
create	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string& logger_name, const It& sinks_begin, const It& sinks_end)$/;"	f	class:spdlog
create	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string& logger_name, const spdlog::sink_ptr& sink)$/;"	f	class:spdlog
create	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string& logger_name, spdlog::sinks_init_list sinks)$/;"	f	class:spdlog
create	src/data/vocab.cpp	/^void Vocab::create(InputFileStream& trainStrm,$/;"	f	class:marian::Vocab
create	src/data/vocab.cpp	/^void Vocab::create(const std::string& vocabPath, const std::string& trainPath) {$/;"	f	class:marian::Vocab
createAmunConfig	src/models/amun.h	/^  void createAmunConfig(const std::string& name) {$/;"	f	class:marian::Amun
createAmunConfig	src/models/nematus.h	/^  void createAmunConfig(const std::string& name) {$/;"	f	class:marian::Nematus
createCurandGenerator	src/graph/backend_gpu.h	/^  curandGenerator_t createCurandGenerator(size_t device, size_t seed) {$/;"	f	class:marian::BackendGPU
createDecoderConfig	src/models/encdec.h	/^  virtual void createDecoderConfig(const std::string& name) {$/;"	f	class:marian::EncoderDecoder
createInfo	src/data/filter.h	/^  Ptr<FilterInfo> createInfo(Ptr<data::SubBatch> srcBatch,$/;"	f	class:marian::Filter
createLoggers	src/common/logging.cpp	/^void createLoggers(const marian::Config* options) {$/;"	f
createNameMap	src/models/nematus.h	/^  std::map<std::string, std::string> createNameMap() {$/;"	f	class:marian::Nematus
createScorers	src/translator/scorers.cpp	/^std::vector<Ptr<Scorer>> createScorers(Ptr<Config> options) {$/;"	f	namespace:marian
create_async	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    std::shared_ptr<async_logger> create_async(const std::string& logger_name, size_t queue_size, const async_overflow_policy overflow_policy, const std::function<void()>& worker_warmup_cb, const std::chrono::milliseconds& flush_interval_ms, const std::function<void()>& worker_teardown_cb, const It& sinks_begin, const It& sinks_end)$/;"	f	class:spdlog::details::registry_t
create_async	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    std::shared_ptr<async_logger> create_async(const std::string& logger_name, size_t queue_size, const async_overflow_policy overflow_policy, const std::function<void()>& worker_warmup_cb, const std::chrono::milliseconds& flush_interval_ms, const std::function<void()>& worker_teardown_cb, sink_ptr sink)$/;"	f	class:spdlog::details::registry_t
create_async	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    std::shared_ptr<async_logger> create_async(const std::string& logger_name, size_t queue_size, const async_overflow_policy overflow_policy, const std::function<void()>& worker_warmup_cb, const std::chrono::milliseconds& flush_interval_ms, const std::function<void()>& worker_teardown_cb, sinks_init_list sinks)$/;"	f	class:spdlog::details::registry_t
create_async	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create_async(const std::string& logger_name, const It& sinks_begin, const It& sinks_end, size_t queue_size, const async_overflow_policy overflow_policy, const std::function<void()>& worker_warmup_cb, const std::chrono::milliseconds& flush_interval_ms, const std::function<void()>& worker_teardown_cb)$/;"	f	class:spdlog
create_async	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create_async(const std::string& logger_name, const sink_ptr& sink, size_t queue_size, const async_overflow_policy overflow_policy, const std::function<void()>& worker_warmup_cb, const std::chrono::milliseconds& flush_interval_ms, const std::function<void()>& worker_teardown_cb)$/;"	f	class:spdlog
create_async	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create_async(const std::string& logger_name, sinks_init_list sinks, size_t queue_size, const async_overflow_policy overflow_policy, const std::function<void()>& worker_warmup_cb, const std::chrono::milliseconds& flush_interval_ms, const std::function<void()>& worker_teardown_cb )$/;"	f	class:spdlog
create_connection	scripts/server/client_example.py	/^from websocket import create_connection$/;"	i
create_console_logger	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> create_console_logger(const std::string& logger_name, spdlog::sink_ptr sink, bool color)$/;"	f
create_handle	src/graph/backend_gpu.h	/^  cublasHandle_t create_handle(size_t device) {$/;"	f	class:marian::BackendGPU
create_node	src/3rd_party/yaml-cpp/memory.cpp	/^node& memory::create_node() {$/;"	f	class:YAML::detail::memory
create_node	src/3rd_party/yaml-cpp/node/detail/memory.h	/^  node& create_node() { return m_pMemory->create_node(); }$/;"	f	class:YAML::detail::memory_holder
create_npy_header	src/3rd_party/cnpy/cnpy.h	/^    template<typename T> std::vector<char> create_npy_header(const T* data, const unsigned int* shape, const unsigned int ndims) {  $/;"	f	namespace:cnpy
critical	src/3rd_party/spdlog/common.h	/^    critical = 6,$/;"	e	enum:spdlog::level::__anon38
critical	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::critical()$/;"	f	class:spdlog::logger
critical	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::critical(const T& msg)$/;"	f	class:spdlog::logger
critical	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::critical(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
critical	src/3rd_party/spdlog/include/spdlog/common.h	/^    critical = 5,$/;"	e	enum:spdlog::level::__anon40
critical	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical(const T& msg)$/;"	f	class:spdlog::logger
critical	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical(const char* fmt, const Arg1 &arg1, const Args&... args)$/;"	f	class:spdlog::logger
critical	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical(const wchar_t* fmt, const Args&... args)$/;"	f	class:spdlog::logger
critical_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical_if(const bool flag, const T& msg)$/;"	f	class:spdlog::logger
critical_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical_if(const bool flag, const char* fmt, const Arg1 &arg1, const Args&... args)$/;"	f	class:spdlog::logger
critical_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical_if(const bool flag, const wchar_t* fmt, const Args&... args)$/;"	f	class:spdlog::logger
cublasHandle_	src/graph/backend_gpu.h	/^  cublasHandle_t cublasHandle_;$/;"	m	class:marian::BackendGPU
cudnnHandle_	src/kernels/cudnn_wrappers.h	/^  cudnnHandle_t cudnnHandle_;$/;"	m	class:marian::CUDNNWrapper
curandGenerator_	src/graph/backend_gpu.h	/^  curandGenerator_t curandGenerator_;$/;"	m	class:marian::BackendGPU
currentBatch_	src/data/batch_generator.h	/^  BatchPtr currentBatch_;$/;"	m	class:marian::data::BatchGenerator
current_	src/data/batch_generator.h	/^  typename DataSet::iterator current_;$/;"	m	class:marian::data::BatchGenerator
custom	src/3rd_party/spdlog/details/format.h	/^        CustomValue custom;$/;"	m	union:fmt::internal::Value::__anon21
custom	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        CustomValue custom;$/;"	m	union:fmt::internal::Value::__anon59
custom_daily_file_name_calculator	src/3rd_party/spdlog/tests/file_log.cpp	/^struct custom_daily_file_name_calculator$/;"	s	file:
custom_ex	src/3rd_party/spdlog/tests/errors.cpp	/^struct custom_ex$/;"	s	file:
cut_off	src/training/dropper.h	/^  float cut_off;$/;"	m	class:marian::GradientDropBase
cyan	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string cyan = "\\033[36m";$/;"	m	class:spdlog::sinks::ansicolor_sink
cyan	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string cyan       = "\\033[36m";$/;"	m	class:spdlog::sinks::ansicolor_sink
d	scripts/contrib/fix_hard.py	/^d = dict()$/;"	v
d_batchPosition	src/translator/nth_element.h	/^  int* d_batchPosition;$/;"	m	class:marian::NthElement
d_breakdown	src/translator/nth_element.h	/^  float* d_breakdown;$/;"	m	class:marian::NthElement
d_cumBeamSizes	src/translator/nth_element.h	/^  int* d_cumBeamSizes;$/;"	m	class:marian::NthElement
d_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class d_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
d_ind	src/translator/nth_element.h	/^  int* d_ind;$/;"	m	class:marian::NthElement
d_is_unsorted	src/training/sparse_tensor.h	/^  int* d_is_unsorted;$/;"	m	class:marian::SparseTensorBase
d_out	src/translator/nth_element.h	/^  float* d_out;$/;"	m	class:marian::NthElement
d_res	src/translator/nth_element.h	/^  float* d_res;$/;"	m	class:marian::NthElement
d_res_idx	src/translator/nth_element.h	/^  int* d_res_idx;$/;"	m	class:marian::NthElement
daily_file_sink	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    daily_file_sink($/;"	f	class:spdlog::sinks::SPDLOG_FINAL
daily_file_sink	src/3rd_party/spdlog/sinks/file_sinks.h	/^    daily_file_sink($/;"	f	class:spdlog::sinks::daily_file_sink
daily_file_sink	src/3rd_party/spdlog/sinks/file_sinks.h	/^class daily_file_sink :public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
daily_file_sink_mt	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^typedef daily_file_sink<std::mutex> daily_file_sink_mt;$/;"	t	namespace:spdlog::sinks
daily_file_sink_mt	src/3rd_party/spdlog/sinks/file_sinks.h	/^typedef daily_file_sink<std::mutex> daily_file_sink_mt;$/;"	t	namespace:spdlog::sinks
daily_file_sink_st	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^typedef daily_file_sink<details::null_mutex> daily_file_sink_st;$/;"	t	namespace:spdlog::sinks
daily_file_sink_st	src/3rd_party/spdlog/sinks/file_sinks.h	/^typedef daily_file_sink<details::null_mutex> daily_file_sink_st;$/;"	t	namespace:spdlog::sinks
daily_logger_mt	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::daily_logger_mt(const std::string& logger_name, const filename_t& filename, int hour, int minute, bool force_flush)$/;"	f	class:spdlog
daily_logger_mt	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::daily_logger_mt(const std::string& logger_name, const filename_t& filename, int hour, int minute)$/;"	f	class:spdlog
daily_logger_st	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::daily_logger_st(const std::string& logger_name, const filename_t& filename, int hour, int minute, bool force_flush)$/;"	f	class:spdlog
daily_logger_st	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::daily_logger_st(const std::string& logger_name, const filename_t& filename, int hour, int minute)$/;"	f	class:spdlog
dark	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string dark = "\\033[2m";$/;"	m	class:spdlog::sinks::ansicolor_sink
dark	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string dark       = "\\033[2m";$/;"	m	class:spdlog::sinks::ansicolor_sink
data	src/3rd_party/cnpy/cnpy.h	/^        char* data;$/;"	m	struct:cnpy::NpyArray
data	src/3rd_party/spdlog/details/format.h	/^    const Char *data() const$/;"	f	class:fmt::BasicStringRef
data	src/3rd_party/spdlog/details/format.h	/^    const char *data() const$/;"	f	class:FormatInt
data	src/3rd_party/spdlog/details/format.h	/^    int data[2];$/;"	m	struct:fmt::internal::DummyInt
data	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    const Char *data() const$/;"	f	class:fmt::BasicStringRef
data	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    const char *data() const$/;"	f	class:FormatInt
data	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    int data[2];$/;"	m	struct:fmt::internal::DummyInt
data	src/3rd_party/yaml-cpp/binary.h	/^  const unsigned char *data() const {$/;"	f	class:YAML::Binary
data	src/3rd_party/yaml-cpp/token.h	/^  int data;$/;"	m	struct:YAML::Token
data	src/common/shape.h	/^    const int* data() const {$/;"	f	struct:marian::Shape
data	src/common/shape.h	/^    int* data() {$/;"	f	struct:marian::Shape
data	src/data/batch.h	/^namespace data {$/;"	n	namespace:marian
data	src/data/batch_generator.h	/^namespace data {$/;"	n	namespace:marian
data	src/data/batch_stats.h	/^namespace data {$/;"	n	namespace:marian
data	src/data/corpus.cpp	/^namespace data {$/;"	n	namespace:marian	file:
data	src/data/corpus.h	/^namespace data {$/;"	n	namespace:marian
data	src/data/dataset.h	/^  Data& data() { return *data_; }$/;"	f	class:marian::data::Input
data	src/data/dataset.h	/^namespace data {$/;"	n	namespace:marian
data	src/data/npz_converter.h	/^    float* data() const { return (float*)npy_.data; }$/;"	f	class:NpzConverter::NpyMatrixWrapper
data	src/data/text_input.cpp	/^namespace data {$/;"	n	namespace:marian	file:
data	src/data/text_input.h	/^namespace data {$/;"	n	namespace:marian
data	src/examples/mnist/dataset.h	/^namespace data {$/;"	n	namespace:marian
data	src/gpu/array.h	/^  __HDI__ T* data() { return data_; }$/;"	f	struct:marian::gpu::Array
data	src/gpu/array.h	/^  __HDI__ const T* data() const { return data_; }$/;"	f	struct:marian::gpu::Array
data	src/gpu/tensor.h	/^  __HDI__ T* data() { return data_; }$/;"	f	struct:marian::gpu::Tensor
data	src/gpu/tensor.h	/^  __HDI__ const T* data() const { return data_; }$/;"	f	struct:marian::gpu::Tensor
data	src/tensors/allocator.h	/^  uint8_t* data() const { return data_; }$/;"	f	class:marian::Gap
data	src/tensors/allocator.h	/^  uint8_t* data() { return data_; }$/;"	f	class:marian::Gap
data	src/tensors/device_gpu.h	/^  uint8_t* data() { return data_; }$/;"	f	class:marian::DeviceGPU
data	src/tensors/memory_piece.h	/^  T* data() const {$/;"	f	class:marian::MemoryPiece
data	src/tensors/memory_piece.h	/^  T* data() {$/;"	f	class:marian::MemoryPiece
data	src/tensors/memory_piece.h	/^  uint8_t* data() const { return data_; }$/;"	f	class:marian::MemoryPiece
data	src/tensors/memory_piece.h	/^  uint8_t* data() { return data_; }$/;"	f	class:marian::MemoryPiece
data	src/tensors/tensor.h	/^  virtual float* data() { return (float*)memory_->data(); }$/;"	f	class:marian::TensorBase
data	src/tensors/tensor_cpu.h	/^  float* data() { return data_; }$/;"	f	class:marian::DeviceCPU
data	src/tests/allocator_test.cpp	/^  uint8_t* data() { return data_; }$/;"	f	class:DeviceCPU
data	src/training/sparse_tensor.h	/^  float* data() { return data_; }$/;"	f	class:marian::SparseTensorBase
data_	src/3rd_party/spdlog/details/format.h	/^    T data_[SIZE];$/;"	m	class:fmt::internal::MemoryBuffer
data_	src/3rd_party/spdlog/details/format.h	/^    const Char *data_;$/;"	m	class:fmt::BasicCStringRef
data_	src/3rd_party/spdlog/details/format.h	/^    const Char *data_;$/;"	m	class:fmt::BasicStringRef
data_	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^        T                     data_;$/;"	m	struct:spdlog::details::mpmc_bounded_queue::cell_t
data_	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^        T                     data_;$/;"	m	struct:spdlog::details::mpmc_bounded_queue::cell_t
data_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    T data_[SIZE];$/;"	m	class:fmt::internal::MemoryBuffer
data_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    const Char *data_;$/;"	m	class:fmt::BasicCStringRef
data_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    const Char *data_;$/;"	m	class:fmt::BasicStringRef
data_	src/data/batch_generator.h	/^  Ptr<DataSet> data_;$/;"	m	class:marian::data::BatchGenerator
data_	src/data/corpus.h	/^  std::vector<Alignment> data_;$/;"	m	class:marian::data::WordAlignment
data_	src/data/dataset.h	/^  Ptr<Data> data_;$/;"	m	class:marian::data::Input
data_	src/data/filter.h	/^  std::vector<std::unordered_map<size_t, float>> data_;$/;"	m	class:marian::Filter
data_	src/gpu/array.h	/^  T data_[N];$/;"	m	struct:marian::gpu::Array
data_	src/gpu/tensor.h	/^  T* data_;$/;"	m	struct:marian::gpu::Tensor
data_	src/tensors/allocator.h	/^  uint8_t* data_;$/;"	m	class:marian::Gap
data_	src/tensors/device_gpu.h	/^  uint8_t* data_;$/;"	m	class:marian::DeviceGPU
data_	src/tensors/memory_piece.h	/^  uint8_t* data_;$/;"	m	class:marian::MemoryPiece
data_	src/tensors/tensor_cpu.h	/^  float* data_;$/;"	m	class:marian::DeviceCPU
data_	src/tests/allocator_test.cpp	/^  uint8_t* data_;$/;"	m	class:DeviceCPU	file:
data_	src/training/sparse_tensor.h	/^  float* data_;$/;"	m	class:marian::SparseTensorBase
database	contrib/vim/.ycm_extra_conf.py	/^  database = None$/;"	v
database	contrib/vim/.ycm_extra_conf.py	/^  database = ycm_core.CompilationDatabase( compilation_database_folder )$/;"	v
dataset_type	src/examples/mnist/model.h	/^  typedef data::MNISTData dataset_type;$/;"	t	class:marian::models::MnistFeedForwardNet
dataset_type	src/models/encdec.h	/^  typedef data::Corpus dataset_type;$/;"	t	class:marian::EncoderDecoder
dateonly_daily_file_name_calculator	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^struct dateonly_daily_file_name_calculator$/;"	s	namespace:spdlog::sinks
days	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^static const days_array& days()$/;"	f	namespace:spdlog::details
deallocate	src/3rd_party/spdlog/details/format.h	/^    void deallocate()$/;"	f	class:fmt::internal::MemoryBuffer
deallocate	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void deallocate()$/;"	f	class:fmt::internal::MemoryBuffer
debug	src/3rd_party/spdlog/common.h	/^    debug = 1,$/;"	e	enum:spdlog::level::__anon38
debug	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::debug()$/;"	f	class:spdlog::logger
debug	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::debug(const T& msg)$/;"	f	class:spdlog::logger
debug	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::debug(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
debug	src/3rd_party/spdlog/include/spdlog/common.h	/^    debug = 1,$/;"	e	enum:spdlog::level::__anon40
debug	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug(const T& msg)$/;"	f	class:spdlog::logger
debug	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug(const char* fmt, const Arg1 &arg1, const Args&... args)$/;"	f	class:spdlog::logger
debug	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug(const wchar_t* fmt, const Args&... args)$/;"	f	class:spdlog::logger
debug	src/data/batch.h	/^  virtual void debug(){};$/;"	f	class:marian::data::Batch
debug	src/data/corpus.h	/^  void debug() {$/;"	f	class:marian::data::CorpusBatch
debug	src/graph/node.h	/^  virtual void debug(const std::string& message) {$/;"	f	class:marian::Node
debug	src/kernels/sparse.h	/^  std::string debug() {$/;"	f	class:marian::sparse::CSR
debugMessage_	src/graph/node.h	/^  std::string debugMessage_;$/;"	m	class:marian::Node
debug_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug_if(const bool flag, const T& msg)$/;"	f	class:spdlog::logger
debug_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug_if(const bool flag, const char* fmt, const Arg1 &arg1, const Args&... args)$/;"	f	class:spdlog::logger
debug_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug_if(const bool flag, const wchar_t* fmt, const Args&... args)$/;"	f	class:spdlog::logger
debug_message	src/graph/node.h	/^  virtual const std::string& debug_message() { return debugMessage_; }$/;"	f	class:marian::Node
decltype	src/common/shape.h	/^    auto begin() -> decltype(shape_.begin()) { return shape_.begin(); }$/;"	f	struct:marian::Shape
decltype	src/common/shape.h	/^    auto begin() const -> decltype(shape_.begin()) { return shape_.begin(); }$/;"	f	struct:marian::Shape
decltype	src/common/shape.h	/^    auto end() -> decltype(shape_.end()) { return shape_.end(); }$/;"	f	struct:marian::Shape
decltype	src/common/shape.h	/^    auto end() const -> decltype(shape_.end()) { return shape_.end(); }$/;"	f	struct:marian::Shape
decltype	src/data/corpus.h	/^  auto begin() -> decltype(tuple_.begin()) { return tuple_.begin(); }$/;"	f	class:marian::data::SentenceTuple
decltype	src/data/corpus.h	/^  auto end() -> decltype(tuple_.end()) { return tuple_.end(); }$/;"	f	class:marian::data::SentenceTuple
decltype	src/graph/parameters.h	/^  auto begin() -> decltype(params_.begin()) { return params_.begin(); }$/;"	f	class:marian::Parameters
decltype	src/graph/parameters.h	/^  auto end() -> decltype(params_.begin()) { return params_.end(); }$/;"	f	class:marian::Parameters
decltype	src/graph/parameters.h	/^  auto getMap() -> decltype(named_)& { return named_; }$/;"	f	class:marian::Parameters
decltype	src/rnn/types.h	/^  auto begin() -> decltype(states_.begin()) { return states_.begin(); }$/;"	f	class:marian::rnn::States
decltype	src/rnn/types.h	/^  auto end() -> decltype(states_.begin()) { return states_.end(); }$/;"	f	class:marian::rnn::States
decode	src/3rd_party/yaml-cpp/convert.cpp	/^bool convert<bool>::decode(const Node& node, bool& rhs) {$/;"	f	class:YAML::convert
decode	src/3rd_party/yaml-cpp/node/convert.h	/^  static bool decode(const Node& node, Binary& rhs) {$/;"	f	struct:YAML::convert
decode	src/3rd_party/yaml-cpp/node/convert.h	/^  static bool decode(const Node& node, Node& rhs) {$/;"	f	struct:YAML::convert
decode	src/3rd_party/yaml-cpp/node/convert.h	/^  static bool decode(const Node& node, _Null& \/* rhs *\/) {$/;"	f	struct:YAML::convert
decode	src/3rd_party/yaml-cpp/node/convert.h	/^  static bool decode(const Node& node, std::array<T, N>& rhs) {$/;"	f	struct:YAML::convert
decode	src/3rd_party/yaml-cpp/node/convert.h	/^  static bool decode(const Node& node, std::list<T>& rhs) {$/;"	f	struct:YAML::convert
decode	src/3rd_party/yaml-cpp/node/convert.h	/^  static bool decode(const Node& node, std::map<K, V>& rhs) {$/;"	f	struct:YAML::convert
decode	src/3rd_party/yaml-cpp/node/convert.h	/^  static bool decode(const Node& node, std::pair<T, U>& rhs) {$/;"	f	struct:YAML::convert
decode	src/3rd_party/yaml-cpp/node/convert.h	/^  static bool decode(const Node& node, std::string& rhs) {$/;"	f	struct:YAML::convert
decode	src/3rd_party/yaml-cpp/node/convert.h	/^  static bool decode(const Node& node, std::vector<T>& rhs) {$/;"	f	struct:YAML::convert
decoder	src/models/model_factory.h	/^typedef Accumulator<DecoderFactory> decoder;$/;"	t	namespace:marian::models
decoders_	src/models/encdec.h	/^  std::vector<Ptr<DecoderBase>> decoders_;$/;"	m	class:marian::EncoderDecoder
decoders_	src/models/model_factory.h	/^  std::vector<decoder> decoders_;$/;"	m	class:marian::models::EncoderDecoderFactory
decoding	src/3rd_party/yaml-cpp/binary.cpp	/^static const unsigned char decoding[] = {$/;"	m	namespace:YAML	file:
decomposedExpression	src/3rd_party/catch.hpp	/^        mutable DecomposedExpression const* decomposedExpression;$/;"	m	struct:Catch::AssertionResultData
decreaseEdges	src/graph/node.h	/^  virtual void decreaseEdges(size_t edges = 1) { edges_ -= edges; };$/;"	f	class:marian::Node
default_daily_file_name_calculator	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^struct default_daily_file_name_calculator$/;"	s	namespace:spdlog::sinks
deleteAll	src/3rd_party/catch.hpp	/^    inline void deleteAll( ContainerT& container ) {$/;"	f	namespace:Catch
deleteAll	src/3rd_party/spdlog/tests/catch.hpp	/^    inline void deleteAll( ContainerT& container ) {$/;"	f	namespace:Catch
deleteAllValues	src/3rd_party/catch.hpp	/^    inline void deleteAllValues( AssociativeContainerT& container ) {$/;"	f	namespace:Catch
deleteAllValues	src/3rd_party/spdlog/tests/catch.hpp	/^    inline void deleteAllValues( AssociativeContainerT& container ) {$/;"	f	namespace:Catch
dense	src/layers/constructors.h	/^typedef Accumulator<DenseFactory> dense;$/;"	t	namespace:marian::mlp
dequeue	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    bool dequeue(T& data)$/;"	f	class:spdlog::details::mpmc_bounded_queue
dequeue	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^    bool dequeue(T& data)$/;"	f	class:spdlog::details::mpmc_bounded_queue
dequeue_pos_	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    std::atomic<size_t>     dequeue_pos_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
dequeue_pos_	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^    std::atomic<size_t>     dequeue_pos_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
dereference	src/data/corpus.cpp	/^const SentenceTuple& CorpusIterator::dereference() const {$/;"	f	class:marian::data::CorpusIterator
dereference	src/data/text_input.cpp	/^const SentenceTuple& TextIterator::dereference() const {$/;"	f	class:marian::data::TextIterator
description	src/3rd_party/catch.hpp	/^    const char* description;$/;"	m	struct:Catch::NameAndDesc
description	src/3rd_party/spdlog/tests/catch.hpp	/^    const char* description;$/;"	m	struct:Catch::NameAndDesc
description	src/kernels/sparse.h	/^  cusparseMatDescr_t description() { return descr_; };$/;"	f	class:marian::sparse::CSR
destruct	src/3rd_party/cnpy/cnpy.h	/^        void destruct() {delete[] data;}$/;"	f	struct:cnpy::NpyArray
destruct	src/3rd_party/cnpy/cnpy.h	/^        void destruct()$/;"	f	struct:cnpy::npz_t
destructed_	src/data/npz_converter.h	/^  bool destructed_;$/;"	m	class:NpzConverter
detail	src/3rd_party/yaml-cpp/memory.cpp	/^namespace detail {$/;"	n	namespace:YAML	file:
detail	src/3rd_party/yaml-cpp/node/detail/bool_type.h	/^namespace detail {$/;"	n	namespace:YAML
detail	src/3rd_party/yaml-cpp/node/detail/impl.h	/^namespace detail {$/;"	n	namespace:YAML
detail	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^namespace detail {$/;"	n	namespace:YAML
detail	src/3rd_party/yaml-cpp/node/detail/iterator_fwd.h	/^namespace detail {$/;"	n	namespace:YAML
detail	src/3rd_party/yaml-cpp/node/detail/memory.h	/^namespace detail {$/;"	n	namespace:YAML
detail	src/3rd_party/yaml-cpp/node/detail/node.h	/^namespace detail {$/;"	n	namespace:YAML
detail	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^namespace detail {$/;"	n	namespace:YAML
detail	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^namespace detail {$/;"	n	namespace:YAML
detail	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^namespace detail {$/;"	n	namespace:YAML
detail	src/3rd_party/yaml-cpp/node/impl.h	/^namespace detail {$/;"	n	namespace:YAML
detail	src/3rd_party/yaml-cpp/node/iterator.h	/^namespace detail {$/;"	n	namespace:YAML
detail	src/3rd_party/yaml-cpp/node/node.h	/^namespace detail {$/;"	n	namespace:YAML
detail	src/3rd_party/yaml-cpp/node/ptr.h	/^namespace detail {$/;"	n	namespace:YAML
detail	src/3rd_party/yaml-cpp/node_data.cpp	/^namespace detail {$/;"	n	namespace:YAML	file:
detail	src/3rd_party/yaml-cpp/nodebuilder.h	/^namespace detail {$/;"	n	namespace:YAML
detail	src/3rd_party/yaml-cpp/nodeevents.h	/^namespace detail {$/;"	n	namespace:YAML
details	src/3rd_party/spdlog/async_logger.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/details/async_log_helper.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/details/file_helper.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/details/line_logger_fwd.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/details/log_msg.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/details/null_mutex.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/details/os.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/details/registry.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/formatter.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/include/spdlog/async_logger.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/include/spdlog/common.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/include/spdlog/details/file_helper.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/include/spdlog/details/log_msg.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/include/spdlog/details/null_mutex.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/include/spdlog/details/os.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^namespace details$/;"	n	namespace:spdlog
details	src/3rd_party/spdlog/include/spdlog/formatter.h	/^namespace details$/;"	n	namespace:spdlog
detectIndent	src/3rd_party/yaml-cpp/scanscalar.h	/^  bool detectIndent;  \/\/ should we try to autodetect the indent?$/;"	m	struct:YAML::ScanScalarParams
device_	src/graph/expression_graph.h	/^  size_t device_;$/;"	m	class:marian::ExpressionGraph
device_	src/tensors/device_gpu.h	/^  size_t device_;$/;"	m	class:marian::DeviceGPU
device_	src/tensors/tensor.h	/^  size_t device_;$/;"	m	class:marian::TensorBase
device_	src/training/sparse_tensor.h	/^  size_t device_;$/;"	m	class:marian::SparseTensorBase
devices_	src/training/graph_group_async.h	/^  std::vector<size_t> devices_;$/;"	m	class:marian::AsyncGraphGroup
devices_	src/training/graph_group_async_drop.h	/^  std::vector<size_t> devices_;$/;"	m	class:marian::AsyncGraphGroup
devices_	src/training/graph_group_sync.h	/^  std::vector<size_t> devices_;$/;"	m	class:marian::SyncGraphGroup
devices_	src/translator/translator.h	/^  std::vector<size_t> devices_;$/;"	m	class:marian::TranslateServiceMultiGPU
digit_index_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    unsigned digit_index_;$/;"	m	class:fmt::internal::ThousandsSep
dim	src/common/shape.h	/^    inline const int& dim(int i) const { return const_cast<Shape&>(*this).dim(i); }$/;"	f	struct:marian::Shape
dim	src/common/shape.h	/^    inline int& dim(int i) {$/;"	f	struct:marian::Shape
dim	src/gpu/shape.h	/^  __HDI__ int dim(int i) const {$/;"	f	struct:marian::gpu::ConstantShape
dim	src/gpu/shape.h	/^  __HDI__ int dim(int i) { return shape_[i]; }$/;"	f	struct:marian::gpu::ConstantShape
dimAttended	src/rnn/constructors.h	/^  int dimAttended() {$/;"	f	class:marian::rnn::AttentionFactory
dimOutput	src/rnn/attention.h	/^  int dimOutput() { return encState_->getContext()->shape()[-1]; }$/;"	f	class:marian::rnn::GlobalAttention
dimOutput	src/rnn/types.h	/^  virtual int dimOutput() {$/;"	f	class:marian::rnn::MultiCellInput
dimVocab_	src/translator/scorers.h	/^  int dimVocab_;$/;"	m	class:marian::UnseenWordPenalty
dimVocab_	src/translator/scorers.h	/^  int dimVocab_;$/;"	m	class:marian::WordPenalty
dimVocab_	src/translator/scorers.h	/^  int dimVocab_;$/;"	m	class:marian::WordPenaltyState
dims	src/common/shape.h	/^    inline void dims(int i, std::vector<int>& d) const {$/;"	f	struct:marian::Shape
dims	src/gpu/shape.h	/^  __HDI__ void dims(int i, Array<int, N>& d) const {$/;"	f	struct:marian::gpu::ConstantShape
dir	src/rnn/rnn.h	/^enum struct dir : int {$/;"	s	namespace:marian::rnn
direction_	src/rnn/rnn.h	/^  dir direction_;$/;"	m	class:marian::rnn::SingleLayerRNN
disable	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline void spdlog::details::line_logger::disable()$/;"	f	class:spdlog::details::line_logger
disable_if	src/3rd_party/yaml-cpp/traits.h	/^struct disable_if : public disable_if_c<Cond::value, T> {};$/;"	s	namespace:YAML
disable_if_c	src/3rd_party/yaml-cpp/traits.h	/^struct disable_if_c {$/;"	s	namespace:YAML
disable_if_c	src/3rd_party/yaml-cpp/traits.h	/^struct disable_if_c<true, T> {};$/;"	s	namespace:YAML
dist	src/tools/align2steps.cpp	/^float dist(Point a, Point b) {$/;"	f
dist_sink	src/3rd_party/spdlog/include/spdlog/sinks/dist_sink.h	/^    explicit dist_sink() :_sinks() {}$/;"	f	class:spdlog::sinks::dist_sink
dist_sink	src/3rd_party/spdlog/include/spdlog/sinks/dist_sink.h	/^class dist_sink: public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
dist_sink	src/3rd_party/spdlog/sinks/dist_sink.h	/^    explicit dist_sink() :_sinks() {}$/;"	f	class:spdlog::sinks::dist_sink
dist_sink	src/3rd_party/spdlog/sinks/dist_sink.h	/^class dist_sink: public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
dist_sink_mt	src/3rd_party/spdlog/include/spdlog/sinks/dist_sink.h	/^typedef dist_sink<std::mutex> dist_sink_mt;$/;"	t	namespace:spdlog::sinks
dist_sink_mt	src/3rd_party/spdlog/sinks/dist_sink.h	/^typedef dist_sink<std::mutex> dist_sink_mt;$/;"	t	namespace:spdlog::sinks
dist_sink_st	src/3rd_party/spdlog/include/spdlog/sinks/dist_sink.h	/^typedef dist_sink<details::null_mutex> dist_sink_st;$/;"	t	namespace:spdlog::sinks
dist_sink_st	src/3rd_party/spdlog/sinks/dist_sink.h	/^typedef dist_sink<details::null_mutex> dist_sink_st;$/;"	t	namespace:spdlog::sinks
distribution	src/layers/param_initializers.h	/^void distribution(Tensor t, float a, float b) {$/;"	f	namespace:marian::inits
distribution	src/layers/param_initializers.h	/^void distribution(std::vector<float>& vals, float a, float b) {$/;"	f	namespace:marian::inits
division	scripts/server/client_example.py	/^from __future__ import print_function, unicode_literals, division$/;"	i
doSingleStep	src/models/states.h	/^  virtual bool doSingleStep() { return singleStep_; };$/;"	f	class:marian::DecoderState
do_get_arg	src/3rd_party/spdlog/details/format.cc	/^FMT_FUNC Arg fmt::internal::FormatterBase::do_get_arg($/;"	f	class:fmt::internal::FormatterBase
do_get_arg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^FMT_FUNC Arg fmt::internal::FormatterBase::do_get_arg($/;"	f	class:fmt::internal::FormatterBase
doublePrecision	src/3rd_party/yaml-cpp/emittermanip.h	/^  int doublePrecision;$/;"	m	struct:YAML::_Precision
double_value	src/3rd_party/spdlog/details/format.h	/^        double double_value;$/;"	m	union:fmt::internal::Value::__anon21
double_value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        double double_value;$/;"	m	union:fmt::internal::Value::__anon59
drop	src/3rd_party/spdlog/details/registry.h	/^    void drop(const std::string& logger_name)$/;"	f	class:spdlog::details::registry_t
drop	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::drop(const std::string &name)$/;"	f	class:spdlog
drop	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    void drop(const std::string& logger_name)$/;"	f	class:spdlog::details::registry_t
drop	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline void spdlog::drop(const std::string &name)$/;"	f	class:spdlog
dropGraph	src/training/dropper.h	/^  void dropGraph(Tensor t, SparseTensor destination, double rate = 0.99) {$/;"	f	class:marian::GradientDropBase
dropMaskContext_	src/rnn/attention.h	/^  Expr dropMaskContext_;$/;"	m	class:marian::rnn::GlobalAttention
dropMaskS_	src/rnn/cells.h	/^  Expr dropMaskS_;$/;"	m	class:marian::rnn::FastLSTM
dropMaskS_	src/rnn/cells.h	/^  Expr dropMaskS_;$/;"	m	class:marian::rnn::GRU
dropMaskS_	src/rnn/cells.h	/^  Expr dropMaskS_;$/;"	m	class:marian::rnn::GRUNematus
dropMaskS_	src/rnn/cells.h	/^  Expr dropMaskS_;$/;"	m	class:marian::rnn::Tanh
dropMaskState_	src/rnn/attention.h	/^  Expr dropMaskState_;$/;"	m	class:marian::rnn::GlobalAttention
dropMaskX_	src/rnn/cells.h	/^  Expr dropMaskX_;$/;"	m	class:marian::rnn::FastLSTM
dropMaskX_	src/rnn/cells.h	/^  Expr dropMaskX_;$/;"	m	class:marian::rnn::GRU
dropMaskX_	src/rnn/cells.h	/^  Expr dropMaskX_;$/;"	m	class:marian::rnn::GRUNematus
dropMaskX_	src/rnn/cells.h	/^  Expr dropMaskX_;$/;"	m	class:marian::rnn::Tanh
drop_all	src/3rd_party/spdlog/details/registry.h	/^    void drop_all()$/;"	f	class:spdlog::details::registry_t
drop_all	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::drop_all()$/;"	f	class:spdlog
drop_all	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    void drop_all()$/;"	f	class:spdlog::details::registry_t
drop_all	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline void spdlog::drop_all()$/;"	f	class:spdlog
dropout	src/graph/expression_operators.h	/^Expr dropout(Expr x, Args... args) {$/;"	f	namespace:marian
dropout_	src/rnn/attention.h	/^  float dropout_;$/;"	m	class:marian::rnn::GlobalAttention
dropout_	src/rnn/cells.h	/^  float dropout_;$/;"	m	class:marian::rnn::FastLSTM
dropout_	src/rnn/cells.h	/^  float dropout_;$/;"	m	class:marian::rnn::GRU
dropout_	src/rnn/cells.h	/^  float dropout_;$/;"	m	class:marian::rnn::GRUNematus
dropout_	src/rnn/cells.h	/^  float dropout_;$/;"	m	class:marian::rnn::Tanh
dsvd	src/3rd_party/svd/svd.cpp	/^int dsvd(float *a, int m, int n, float *w, float *v)$/;"	f
dup	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	/^fmt::File fmt::File::dup(int fd) {$/;"	f	class:fmt::File
dup2	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	/^void fmt::File::dup2(int fd) {$/;"	f	class:fmt::File
e_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class e_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
eat	src/3rd_party/yaml-cpp/stream.cpp	/^void Stream::eat(int n) {$/;"	f	class:YAML::Stream
eatEnd	src/3rd_party/yaml-cpp/scanscalar.h	/^  bool eatEnd;        \/\/ should we eat that condition when we see it?$/;"	m	struct:YAML::ScanScalarParams
eatLeadingWhitespace	src/3rd_party/yaml-cpp/scanscalar.h	/^  bool eatLeadingWhitespace;  \/\/ should we continue eating this delicious$/;"	m	struct:YAML::ScanScalarParams
edge_descriptor	src/tools/align2steps.cpp	/^typedef graph_traits<graph_t>::edge_descriptor edge_descriptor;$/;"	t	file:
edges	src/graph/node.h	/^  virtual size_t edges() { return edges_; };$/;"	f	class:marian::Node
elements	src/common/shape.h	/^    inline int elements() const {$/;"	f	struct:marian::Shape
elements	src/gpu/shape.h	/^  __HDI__ int elements() const {$/;"	f	struct:marian::gpu::ConstantShape
embedding	src/layers/generic.h	/^typedef Accumulator<EmbeddingFactory> embedding;$/;"	t	namespace:marian
emerg	src/3rd_party/spdlog/common.h	/^    emerg = 8,$/;"	e	enum:spdlog::level::__anon38
emerg	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::emerg()$/;"	f	class:spdlog::logger
emerg	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::emerg(const T& msg)$/;"	f	class:spdlog::logger
emerg	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::emerg(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
empty	src/3rd_party/yaml-cpp/ptr_vector.h	/^  bool empty() const { return m_data.empty(); }$/;"	f	class:YAML::ptr_vector
empty	src/3rd_party/yaml-cpp/scanner.cpp	/^bool Scanner::empty() {$/;"	f	class:YAML::Scanner
empty	src/common/file_stream.h	/^  bool empty() { return ifstream_.peek() == std::ifstream::traits_type::eof(); }$/;"	f	class:InputFileStream
empty	src/data/corpus.h	/^  bool empty() const { return tuple_.empty(); }$/;"	f	class:marian::data::SentenceTuple
empty_scalar	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  static std::string empty_scalar;$/;"	m	class:YAML::detail::node_data
empty_scalar	src/3rd_party/yaml-cpp/node_data.cpp	/^std::string node_data::empty_scalar;$/;"	m	class:YAML::detail::node_data	file:
enable_conversion	src/3rd_party/spdlog/details/format.h	/^        enable_conversion = sizeof(convert(get<T>())) == sizeof(Yes)$/;"	e	enum:fmt::internal::ConvertToInt::__anon26
enable_conversion	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    enum { enable_conversion = sizeof(convert(get<T>())) == sizeof(Yes) };$/;"	e	enum:fmt::internal::ConvertToInt::__anon63
enable_if	src/3rd_party/yaml-cpp/traits.h	/^struct enable_if : public enable_if_c<Cond::value, T> {};$/;"	s	namespace:YAML
enable_if_c	src/3rd_party/yaml-cpp/traits.h	/^struct enable_if_c {$/;"	s	namespace:YAML
enable_if_c	src/3rd_party/yaml-cpp/traits.h	/^struct enable_if_c<false, T> {};$/;"	s	namespace:YAML
enabler	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^  struct enabler {};$/;"	s	class:YAML::detail::iterator_base
enabler	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  struct enabler {};$/;"	s	class:YAML::detail::node_iterator_base
encState_	src/rnn/attention.h	/^  Ptr<EncoderState> encState_;$/;"	m	class:marian::rnn::GlobalAttention
encStates_	src/models/states.h	/^  std::vector<Ptr<EncoderState>> encStates_;$/;"	m	class:marian::DecoderState
encdec_	src/translator/scorers.h	/^  Ptr<EncoderDecoder> encdec_;$/;"	m	class:marian::ScorerWrapper
encode	src/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(bool rhs) { return rhs ? Node("true") : Node("false"); }$/;"	f	struct:YAML::convert
encode	src/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const Binary& rhs) {$/;"	f	struct:YAML::convert
encode	src/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const Node& rhs) { return rhs; }$/;"	f	struct:YAML::convert
encode	src/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const _Null& \/* rhs *\/) { return Node(); }$/;"	f	struct:YAML::convert
encode	src/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const char(&rhs)[N]) { return Node(rhs); }$/;"	f	struct:YAML::convert
encode	src/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const char*& rhs) { return Node(rhs); }$/;"	f	struct:YAML::convert
encode	src/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const std::array<T, N>& rhs) {$/;"	f	struct:YAML::convert
encode	src/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const std::list<T>& rhs) {$/;"	f	struct:YAML::convert
encode	src/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const std::map<K, V>& rhs) {$/;"	f	struct:YAML::convert
encode	src/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const std::pair<T, U>& rhs) {$/;"	f	struct:YAML::convert
encode	src/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const std::string& rhs) { return Node(rhs); }$/;"	f	struct:YAML::convert
encode	src/3rd_party/yaml-cpp/node/convert.h	/^  static Node encode(const std::vector<T>& rhs) {$/;"	f	struct:YAML::convert
encoder	src/models/model_factory.h	/^typedef Accumulator<EncoderFactory> encoder;$/;"	t	namespace:marian::models
encoder_	src/rnn/cells.h	/^  bool encoder_;$/;"	m	class:marian::rnn::GRUNematus
encoder_decoder	src/models/model_factory.h	/^typedef Accumulator<EncoderDecoderFactory> encoder_decoder;$/;"	t	namespace:marian::models
encoders_	src/models/encdec.h	/^  std::vector<Ptr<EncoderBase>> encoders_;$/;"	m	class:marian::EncoderDecoder
encoders_	src/models/model_factory.h	/^  std::vector<encoder> encoders_;$/;"	m	class:marian::models::EncoderDecoderFactory
encoding	src/3rd_party/yaml-cpp/binary.cpp	/^static const char encoding[] =$/;"	m	namespace:YAML	file:
end	src/3rd_party/yaml-cpp/node/detail/node.h	/^  const_node_iterator end() const {$/;"	f	class:YAML::detail::node
end	src/3rd_party/yaml-cpp/node/detail/node.h	/^  node_iterator end() { return m_pRef->end(); }$/;"	f	class:YAML::detail::node
end	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  const_node_iterator end() const {$/;"	f	class:YAML::detail::node_ref
end	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  node_iterator end() { return m_pData->end(); }$/;"	f	class:YAML::detail::node_ref
end	src/3rd_party/yaml-cpp/node/impl.h	/^inline const_iterator Node::end() const {$/;"	f	class:YAML::Node
end	src/3rd_party/yaml-cpp/node/impl.h	/^inline iterator Node::end() {$/;"	f	class:YAML::Node
end	src/3rd_party/yaml-cpp/node_data.cpp	/^const_node_iterator node_data::end() const {$/;"	f	class:YAML::detail::node_data
end	src/3rd_party/yaml-cpp/node_data.cpp	/^node_iterator node_data::end() {$/;"	f	class:YAML::detail::node_data
end	src/3rd_party/yaml-cpp/scanscalar.h	/^  const RegEx* end;   \/\/ what condition ends this scalar?$/;"	m	struct:YAML::ScanScalarParams
end	src/data/corpus.h	/^  iterator end() { return iterator(); }$/;"	f	class:marian::data::Corpus
end	src/data/dataset.h	/^  Data::const_iterator end() const { return data_->cend(); }$/;"	f	class:marian::data::Input
end	src/data/dataset.h	/^  Data::iterator end() { return data_->end(); }$/;"	f	class:marian::data::Input
end	src/data/dataset.h	/^  iterator end() { return ExampleIterator(examples_.end()); }$/;"	f	class:marian::data::Dataset
end	src/data/text_input.h	/^  iterator end() { return iterator(); }$/;"	f	class:marian::data::TextInput
end	src/gpu/array.h	/^  __HDI__ T* end() { return data_ + N; }$/;"	f	struct:marian::gpu::Array
end	src/gpu/array.h	/^  __HDI__ const T* end() const { return data_ + N; }$/;"	f	struct:marian::gpu::Array
endpoint	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    std::map<regex_orderable, Endpoint> endpoint;$/;"	m	class:SimpleWeb::SocketServerBase
enqueue	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    bool enqueue(T&& data)$/;"	f	class:spdlog::details::mpmc_bounded_queue
enqueue	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^    bool enqueue(T&& data)$/;"	f	class:spdlog::details::mpmc_bounded_queue
enqueue_pos_	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    std::atomic<size_t>     enqueue_pos_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
enqueue_pos_	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^    std::atomic<size_t>     enqueue_pos_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
eof	src/3rd_party/yaml-cpp/stream.h	/^  static char eof() { return 0x04; }$/;"	f	class:YAML::Stream
eol	src/3rd_party/spdlog/details/os.h	/^constexpr inline const char* eol()$/;"	f	namespace:spdlog::details::os
eol	src/3rd_party/spdlog/details/os.h	/^inline const char* eol()$/;"	f	namespace:spdlog::details::os
eol	src/3rd_party/spdlog/include/spdlog/details/os.h	/^SPDLOG_CONSTEXPR static const char* eol = SPDLOG_EOL;$/;"	m	namespace:spdlog::details::os
eol_size	src/3rd_party/spdlog/details/os.h	/^constexpr inline unsigned short eol_size()$/;"	f	namespace:spdlog::details::os
eol_size	src/3rd_party/spdlog/details/os.h	/^inline unsigned short eol_size()$/;"	f	namespace:spdlog::details::os
eol_size	src/3rd_party/spdlog/include/spdlog/details/os.h	/^SPDLOG_CONSTEXPR static int eol_size = sizeof(SPDLOG_EOL) - 1;$/;"	m	namespace:spdlog::details::os
eps_	src/graph/node_operators_binary.h	/^  float eps_;$/;"	m	struct:marian::LayerNormalizationOp
eps_	src/models/experimental/lex_probs.h	/^  float eps_;$/;"	m	class:marian::LexicalBias
eps_	src/optimizers/optimizers.h	/^  float eps_ = 1e-8;$/;"	m	class:marian::Adagrad
eps_	src/optimizers/optimizers.h	/^  float eps_ = 1e-8;$/;"	m	class:marian::Adam
epsilon_	src/graph/node_operators_unary.h	/^  float epsilon_;$/;"	m	struct:marian::SqrtNodeOp
equal	src/data/corpus.cpp	/^bool CorpusIterator::equal(CorpusIterator const& other) const {$/;"	f	class:marian::data::CorpusIterator
equal	src/data/text_input.cpp	/^bool TextIterator::equal(TextIterator const& other) const {$/;"	f	class:marian::data::TextIterator
equal	src/graph/node.h	/^  virtual bool equal(Expr node) {$/;"	f	struct:marian::NaryNodeOp
equal	src/graph/node_operators.h	/^  virtual bool equal(Expr node) { return name() == node->name(); }$/;"	f	struct:marian::ParamNode
equal	src/graph/node_operators.h	/^  virtual bool equal(Expr node) { return this == node.get(); }$/;"	f	struct:marian::ConstantNode
equal	src/graph/node_operators_binary.h	/^  virtual bool equal(Expr node) {$/;"	f	struct:marian::ConcatenateNodeOp
equal	src/graph/node_operators_unary.h	/^  virtual bool equal(Expr node) {$/;"	f	class:marian::ReshapeNodeOp
equal	src/graph/node_operators_unary.h	/^  virtual bool equal(Expr node) {$/;"	f	class:marian::StepNodeOp
equal	src/graph/node_operators_unary.h	/^  virtual bool equal(Expr node) {$/;"	f	struct:marian::ColsNodeOp
equal	src/graph/node_operators_unary.h	/^  virtual bool equal(Expr node) {$/;"	f	struct:marian::MeanNodeOp
equal	src/graph/node_operators_unary.h	/^  virtual bool equal(Expr node) {$/;"	f	struct:marian::PReLUNodeOp
equal	src/graph/node_operators_unary.h	/^  virtual bool equal(Expr node) {$/;"	f	struct:marian::RowsNodeOp
equal	src/graph/node_operators_unary.h	/^  virtual bool equal(Expr node) {$/;"	f	struct:marian::ScalarAddNodeOp
equal	src/graph/node_operators_unary.h	/^  virtual bool equal(Expr node) {$/;"	f	struct:marian::ScalarMultNodeOp
equal	src/graph/node_operators_unary.h	/^  virtual bool equal(Expr node) {$/;"	f	struct:marian::SelectNodeOp
equal	src/graph/node_operators_unary.h	/^  virtual bool equal(Expr node) {$/;"	f	struct:marian::ShiftNodeOp
equal	src/graph/node_operators_unary.h	/^  virtual bool equal(Expr node) {$/;"	f	struct:marian::SoftmaxNodeOp
equal	src/graph/node_operators_unary.h	/^  virtual bool equal(Expr node) {$/;"	f	struct:marian::SqrtNodeOp
equal	src/graph/node_operators_unary.h	/^  virtual bool equal(Expr node) {$/;"	f	struct:marian::SumNodeOp
equal	src/graph/node_operators_unary.h	/^  virtual bool equal(Expr node) {$/;"	f	struct:marian::TransposeNodeOp
equals	src/3rd_party/yaml-cpp/node/detail/impl.h	/^inline bool node::equals(const T& rhs, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node
equals	src/3rd_party/yaml-cpp/node/detail/impl.h	/^inline bool node::equals(const char* rhs, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node
err	src/3rd_party/spdlog/common.h	/^    err = 5,$/;"	e	enum:spdlog::level::__anon38
err	src/3rd_party/spdlog/include/spdlog/common.h	/^    err = 4,$/;"	e	enum:spdlog::level::__anon40
err_handler_example	src/3rd_party/spdlog/example/example.cpp	/^void err_handler_example()$/;"	f
err_handler_example	src/3rd_party/spdlog/example/jni/example.cpp	/^void err_handler_example()$/;"	f
errno_	src/3rd_party/exception.h	/^    int errno_;$/;"	m	class:util::ErrnoException
errno_str	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline std::string errno_str(int err_num)$/;"	f	namespace:spdlog::details::os
errno_to_string	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline std::string errno_to_string(char buf[256], int res)$/;"	f	namespace:spdlog::details::os
errno_to_string	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline std::string errno_to_string(char[256], char* res)$/;"	f	namespace:spdlog::details::os
error	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::error()$/;"	f	class:spdlog::logger
error	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::error(const T& msg)$/;"	f	class:spdlog::logger
error	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::error(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
error	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::error(const T& msg)$/;"	f	class:spdlog::logger
error	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::error(const char* fmt, const Arg1 &arg1, const Args&... args)$/;"	f	class:spdlog::logger
error	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::error(const wchar_t* fmt, const Args&... args)$/;"	f	class:spdlog::logger
error_code	src/3rd_party/spdlog/details/format.h	/^    int error_code() const$/;"	f	class:SystemError
error_code	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    int error_code() const$/;"	f	class:SystemError
error_code_	src/3rd_party/spdlog/details/format.h	/^    int error_code_;$/;"	m	class:SystemError
error_code_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    int error_code_;$/;"	m	class:SystemError
error_handler	src/3rd_party/spdlog/include/spdlog/details/async_logger_impl.h	/^inline spdlog::log_err_handler spdlog::async_logger::error_handler()$/;"	f	class:spdlog::async_logger
error_handler	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline spdlog::log_err_handler spdlog::logger::error_handler()$/;"	f	class:spdlog::logger
error_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::error_if(const bool flag, const T& msg)$/;"	f	class:spdlog::logger
error_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::error_if(const bool flag, const char* fmt, const Arg1 &arg1, const Args&... args)$/;"	f	class:spdlog::logger
error_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::error_if(const bool flag, const wchar_t* fmt, const Args&... args)$/;"	f	class:spdlog::logger
escape	src/3rd_party/yaml-cpp/scanscalar.h	/^  char escape;  \/\/ what character do we escape on (i.e., slash or single quote)$/;"	m	struct:YAML::ScanScalarParams
eta	src/training/training_state.h	/^  float eta;$/;"	m	class:marian::TrainingState
eta_	src/optimizers/optimizers.h	/^  float eta_;$/;"	m	class:marian::OptimizerBase
evaluate	src/3rd_party/catch.hpp	/^        static bool evaluate( T1 const& lhs, T2 const& rhs ) {$/;"	f	struct:Catch::Internal::Evaluator
evaluate	src/3rd_party/catch.hpp	/^        static bool evaluate( T1 const& lhs, T2 const& rhs) {$/;"	f	struct:Catch::Internal::Evaluator
evaluate	src/3rd_party/spdlog/tests/catch.hpp	/^        static bool evaluate( T1 const& lhs, T2 const& rhs ) {$/;"	f	struct:Catch::Internal::Evaluator
evaluate	src/3rd_party/spdlog/tests/catch.hpp	/^        static bool evaluate( T1 const& lhs, T2 const& rhs) {$/;"	f	struct:Catch::Internal::Evaluator
examples_	src/data/dataset.h	/^  Examples examples_;$/;"	m	class:marian::data::Dataset
execute	src/training/graph_group_async_drop.h	/^  void execute(Ptr<data::Batch> batch) {$/;"	f	class:marian::AsyncGraphGroup
exponent	src/functional/floats.h	/^      constexpr int exponent(float x) {$/;"	f	namespace:marian::functional::float2unsigned
exponent	src/functional/floats.h	/^      constexpr int exponent(unsigned i) {$/;"	f	namespace:marian::functional::unsigned2float
f2i	src/functional/floats.h	/^    constexpr unsigned f2i(float x) {$/;"	f	namespace:marian::functional
f_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class f_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
failing_sink	src/3rd_party/spdlog/tests/errors.cpp	/^class failing_sink: public spdlog::sinks::sink$/;"	c	file:
fakeBatch	src/data/corpus.h	/^  static Ptr<CorpusBatch> fakeBatch(std::vector<size_t>& lengths,$/;"	f	class:marian::data::CorpusBatch
fakeInput_	src/rnn/cells.h	/^  Expr fakeInput_;$/;"	m	class:marian::rnn::FastLSTM
fakeInput_	src/rnn/cells.h	/^  Expr fakeInput_;$/;"	m	class:marian::rnn::GRU
fakeInput_	src/rnn/cells.h	/^  Expr fakeInput_;$/;"	m	class:marian::rnn::GRUNematus
false_type	src/3rd_party/catch.hpp	/^        static auto test(...) -> std::false_type;$/;"	m	class:Catch::Detail::IsStreamInsertable::std
fcoords	src/3rd_party/svd/defs_and_types.h	/^} fcoords;$/;"	t	typeref:struct:__anon1
fd	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^        int fd;$/;"	m	struct:fmt::File::Proxy
fd_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    fd_(other.fd_)$/;"	f	class:fmt::File
fd_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    fd_(p.fd) {}$/;"	f	class:fmt::File
fd_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    int fd_;  \/\/ File descriptor.$/;"	m	class:fmt::File
fd_	src/common/file_stream.h	/^  int fd_;$/;"	m	class:TemporaryFile
fdopen	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	/^fmt::BufferedFile fmt::File::fdopen(const char *mode) {$/;"	f	class:fmt::File
fds_	src/common/file_stream.h	/^  io::file_descriptor_sink fds_;$/;"	m	class:OutputFileStream
fds_	src/common/file_stream.h	/^  io::file_descriptor_source fds_;$/;"	m	class:InputFileStream
features	src/data/dataset.h	/^  Data& features() { return inputs_[0].data(); }$/;"	f	class:marian::data::DataBatch
feedback	src/training/dropper.h	/^  float* feedback;$/;"	m	class:marian::GradientDropBase
fetchDropper	src/training/graph_group_async_drop.h	/^  std::vector<std::vector<GradientDrop>> fetchDropper;$/;"	m	class:marian::AsyncGraphGroup
fetchParams	src/training/graph_group_async_drop.h	/^  void fetchParams(Tensor oldParams, const std::vector<Tensor>& params) {$/;"	f	class:marian::AsyncGraphGroup
file	src/3rd_party/catch.hpp	/^        char const* file;$/;"	m	struct:Catch::SourceLineInfo
file	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^        FILE *file;$/;"	m	struct:fmt::BufferedFile::Proxy
file	src/3rd_party/spdlog/tests/catch.hpp	/^        std::string file;$/;"	m	struct:Catch::SourceLineInfo
file_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    FILE *file_;$/;"	m	class:fmt::BufferedFile
file_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    file_(f.file_)$/;"	f	class:fmt::BufferedFile
file_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    file_(other.file_)$/;"	f	class:fmt::BufferedFile
file_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    file_(p.file) {}$/;"	f	class:fmt::BufferedFile
file_	src/common/file_stream.h	/^  boost::filesystem::path file_;$/;"	m	class:InputFileStream
file_	src/common/file_stream.h	/^  boost::filesystem::path file_;$/;"	m	class:OutputFileStream
file_contents	src/3rd_party/spdlog/tests/utils.cpp	/^std::string file_contents(const std::string& filename)$/;"	f
file_exists	src/3rd_party/spdlog/details/file_helper.h	/^    static bool file_exists(const filename_t& name)$/;"	f	class:spdlog::details::file_helper
file_exists	src/3rd_party/spdlog/details/os.h	/^inline bool file_exists(const filename_t& filename)$/;"	f	namespace:spdlog::details::os
file_exists	src/3rd_party/spdlog/include/spdlog/details/file_helper.h	/^    static bool file_exists(const filename_t& name)$/;"	f	class:spdlog::details::file_helper
file_exists	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline bool file_exists(const filename_t& filename)$/;"	f	namespace:spdlog::details::os
file_helper	src/3rd_party/spdlog/details/file_helper.h	/^    explicit file_helper(bool force_flush) :$/;"	f	class:spdlog::details::file_helper
file_helper	src/3rd_party/spdlog/details/file_helper.h	/^class file_helper$/;"	c	namespace:spdlog::details
file_helper	src/3rd_party/spdlog/include/spdlog/details/file_helper.h	/^    explicit file_helper() :$/;"	f	class:spdlog::details::file_helper
file_helper	src/3rd_party/spdlog/include/spdlog/details/file_helper.h	/^class file_helper$/;"	c	namespace:spdlog::details
filename	src/3rd_party/spdlog/details/file_helper.h	/^    const filename_t& filename() const$/;"	f	class:spdlog::details::file_helper
filename	src/3rd_party/spdlog/include/spdlog/details/file_helper.h	/^    const filename_t& filename() const$/;"	f	class:spdlog::details::file_helper
filename_to_str	src/3rd_party/spdlog/common.h	/^inline std::string filename_to_str(const filename_t& filename)$/;"	f	namespace:spdlog
filename_to_str	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline std::string filename_to_str(const filename_t& filename)$/;"	f	namespace:spdlog::details::os
fileno	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	/^int fmt::BufferedFile::fileno() const {$/;"	f	class:fmt::BufferedFile
fileno	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	45;"	d	file:
files_	src/data/corpus.h	/^  std::vector<UPtr<InputFileStream>> files_;$/;"	m	class:marian::data::Corpus
files_	src/data/text_input.h	/^  std::vector<UPtr<std::istringstream>> files_;$/;"	m	class:marian::data::TextInput
filesize	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline size_t filesize(FILE *f)$/;"	f	namespace:spdlog::details::os
fill	src/3rd_party/spdlog/details/format.h	/^    char fill() const$/;"	f	struct:fmt::TypeSpec
fill	src/3rd_party/spdlog/details/format.h	/^    wchar_t fill() const$/;"	f	struct:fmt::WidthSpec
fill	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    char fill() const$/;"	f	struct:fmt::TypeSpec
fill	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    wchar_t fill() const$/;"	f	struct:fmt::WidthSpec
fill	src/gpu/array.h	/^  __HDI__ void fill(T val) {$/;"	f	struct:marian::gpu::Array
fillBatches	src/data/batch_generator.h	/^  void fillBatches(bool shuffle = true) {$/;"	f	class:marian::data::BatchGenerator
fill_	src/3rd_party/spdlog/details/format.h	/^    wchar_t fill_;$/;"	m	struct:fmt::WidthSpec
fill_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    wchar_t fill_;$/;"	m	struct:fmt::WidthSpec
fill_log_msg	src/3rd_party/spdlog/details/async_log_helper.h	/^        void fill_log_msg(log_msg &msg)$/;"	f	struct:spdlog::details::async_log_helper::async_msg
fill_log_msg	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^        void fill_log_msg(log_msg &msg)$/;"	f	struct:spdlog::details::async_log_helper::async_msg
fill_padding	src/3rd_party/spdlog/details/format.h	/^BasicWriter<Char>::fill_padding($/;"	f	class:BasicWriter
fill_padding	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^BasicWriter<Char>::fill_padding($/;"	f	class:BasicWriter
fin_rsv_opcode	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      unsigned char fin_rsv_opcode;$/;"	m	class:SimpleWeb::SocketServerBase::Message
final_	src/rnn/cells.h	/^  bool final_;$/;"	m	class:marian::rnn::GRU
final_	src/rnn/cells.h	/^  bool final_;$/;"	m	class:marian::rnn::GRUNematus
find	src/3rd_party/spdlog/details/format.h	/^    const internal::Arg* find(const fmt::BasicStringRef<Char> &name) const$/;"	f	class:fmt::internal::ArgMap
find	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    const internal::Arg* find(const fmt::BasicStringRef<Char> &name) const$/;"	f	class:fmt::internal::ArgMap
finished	src/training/scheduler.h	/^  void finished() { LOG(info, "Training finished"); }$/;"	f	class:marian::Scheduler
fits	src/graph/expression_graph.h	/^  bool fits() {$/;"	f	class:marian::ExpressionGraph
fits_in_int	src/3rd_party/spdlog/details/format.cc	/^			static bool fits_in_int(T value)$/;"	f	struct:fmt::__anon34::IntChecker
fits_in_int	src/3rd_party/spdlog/details/format.cc	/^			static bool fits_in_int(bool)$/;"	f	struct:fmt::__anon34::IntChecker
fits_in_int	src/3rd_party/spdlog/details/format.cc	/^			static bool fits_in_int(int)$/;"	f	struct:fmt::__anon34::IntChecker
fits_in_int	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  static bool fits_in_int(T value) {$/;"	f	struct:fmt::__anon71::IntChecker
fits_in_int	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  static bool fits_in_int(bool) { return true; }$/;"	f	struct:fmt::__anon71::IntChecker
fits_in_int	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  static bool fits_in_int(int) { return true; }$/;"	f	struct:fmt::__anon71::IntChecker
flag	src/3rd_party/spdlog/details/format.h	/^    bool flag(unsigned f) const$/;"	f	struct:fmt::FormatSpec
flag	src/3rd_party/spdlog/details/format.h	/^    bool flag(unsigned) const$/;"	f	struct:fmt::AlignTypeSpec
flag	src/3rd_party/spdlog/details/format.h	/^    bool flag(unsigned) const$/;"	f	struct:fmt::TypeSpec
flag	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    bool flag(unsigned f) const$/;"	f	struct:fmt::FormatSpec
flag	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    bool flag(unsigned) const$/;"	f	struct:fmt::AlignTypeSpec
flag	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    bool flag(unsigned) const$/;"	f	struct:fmt::TypeSpec
flag_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class flag_formatter$/;"	c	namespace:spdlog::details
flag_formatter	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class flag_formatter$/;"	c	namespace:spdlog::details
flags	contrib/vim/.ycm_extra_conf.py	/^flags = [$/;"	v
flags_	src/3rd_party/spdlog/details/format.h	/^    unsigned flags_;$/;"	m	struct:fmt::FormatSpec
flags_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    unsigned flags_;$/;"	m	struct:fmt::FormatSpec
float2unsigned	src/functional/floats.h	/^    namespace float2unsigned {$/;"	n	namespace:marian::functional
floatPrecision	src/3rd_party/yaml-cpp/emittermanip.h	/^  int floatPrecision;$/;"	m	struct:YAML::_Precision
flowLevel	src/3rd_party/yaml-cpp/scanner.h	/^    std::size_t flowLevel;$/;"	m	struct:YAML::Scanner::SimpleKey
flowType	src/3rd_party/yaml-cpp/emitterstate.h	/^    FlowType::value flowType;$/;"	m	struct:YAML::EmitterState::Group
flush	src/3rd_party/spdlog/details/async_log_helper.h	/^        flush,$/;"	m	class:spdlog::details::async_log_helper::async_msg_type
flush	src/3rd_party/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::flush()$/;"	f	class:spdlog::details::async_log_helper
flush	src/3rd_party/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::flush()$/;"	f	class:spdlog::async_logger
flush	src/3rd_party/spdlog/details/file_helper.h	/^    void flush()$/;"	f	class:spdlog::details::file_helper
flush	src/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::flush()$/;"	f	class:spdlog::logger
flush	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^        flush,$/;"	m	class:spdlog::details::async_log_helper::async_msg_type
flush	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::flush(bool wait_for_q)$/;"	f	class:spdlog::details::async_log_helper
flush	src/3rd_party/spdlog/include/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::flush()$/;"	f	class:spdlog::async_logger
flush	src/3rd_party/spdlog/include/spdlog/details/file_helper.h	/^    void flush()$/;"	f	class:spdlog::details::file_helper
flush	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::flush()$/;"	f	class:spdlog::logger
flush	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^inline void ansicolor_sink::flush()$/;"	f	class:spdlog::sinks::ansicolor_sink
flush	src/3rd_party/spdlog/tests/errors.cpp	/^    void flush()$/;"	f	class:failing_sink	file:
flush_on	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::flush_on(level::level_enum log_level)$/;"	f	class:spdlog::logger
fmt	src/3rd_party/spdlog/details/format.cc	/^namespace fmt {$/;"	n	file:
fmt	src/3rd_party/spdlog/details/format.h	/^namespace fmt$/;"	n
fmt	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^namespace fmt {$/;"	n	file:
fmt	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^namespace fmt$/;"	n
fmt	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.cc	/^namespace fmt {$/;"	n	file:
fmt	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.h	/^namespace fmt$/;"	n
fmt	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^namespace fmt$/;"	n
fmt	src/3rd_party/spdlog/include/spdlog/fmt/bundled/time.h	/^namespace fmt$/;"	n
fname_	src/translator/scorers.h	/^  std::string fname_;$/;"	m	class:marian::ScorerWrapper
fold	src/3rd_party/yaml-cpp/scanscalar.h	/^  FOLD fold;    \/\/ how do we fold line ends?$/;"	m	struct:YAML::ScanScalarParams
fopen_s	src/3rd_party/spdlog/details/os.h	/^inline int fopen_s(FILE** fp, const filename_t& filename, const filename_t& mode)$/;"	f	namespace:spdlog::details::os
fopen_s	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline int fopen_s(FILE** fp, const filename_t& filename, const filename_t& mode)$/;"	f	namespace:spdlog::details::os
force_insert	src/3rd_party/yaml-cpp/node/detail/impl.h	/^inline void node_data::force_insert(const Key& key, const Value& value,$/;"	f	class:YAML::detail::node_data
force_insert	src/3rd_party/yaml-cpp/node/detail/node.h	/^  void force_insert(const Key& key, const Value& value,$/;"	f	class:YAML::detail::node
force_insert	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void force_insert(const Key& key, const Value& value,$/;"	f	class:YAML::detail::node_ref
force_insert	src/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::force_insert(const Key& key, const Value& value) {$/;"	f	class:YAML::Node
force_log	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::force_log(level::level_enum lvl, const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
form	src/graph/node.h	/^  virtual const std::string form() { return "box"; }$/;"	f	class:marian::Node
form	src/graph/node_operators.h	/^  const std::string form() { return "diamond"; }$/;"	f	struct:marian::ConstantNode
form	src/graph/node_operators.h	/^  const std::string form() { return "hexagon"; }$/;"	f	struct:marian::ParamNode
format	src/3rd_party/spdlog/bench/latency/utils.h	/^inline std::string format(const T& value)$/;"	f	namespace:utils
format	src/3rd_party/spdlog/bench/latency/utils.h	/^inline std::string format(const double & value)$/;"	f	namespace:utils
format	src/3rd_party/spdlog/bench/utils.h	/^inline std::string format(const T& value)$/;"	f	namespace:utils
format	src/3rd_party/spdlog/bench/utils.h	/^inline std::string format(const double & value)$/;"	f	namespace:utils
format	src/3rd_party/spdlog/details/format.cc	/^void fmt::internal::PrintfFormatter<Char>::format($/;"	f	class:fmt::internal::PrintfFormatter
format	src/3rd_party/spdlog/details/format.h	/^        FormatFunc format;$/;"	m	struct:fmt::internal::Value::CustomValue
format	src/3rd_party/spdlog/details/format.h	/^inline std::string format(CStringRef format_str, ArgList args)$/;"	f
format	src/3rd_party/spdlog/details/format.h	/^inline std::wstring format(WCStringRef format_str, ArgList args)$/;"	f
format	src/3rd_party/spdlog/details/format.h	/^void format(BasicFormatter<Char> &f, const Char *&format_str, const T &value)$/;"	f
format	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^inline void spdlog::pattern_formatter::format(details::log_msg& msg)$/;"	f	class:spdlog::pattern_formatter
format	src/3rd_party/spdlog/example/utils.h	/^inline std::string format(const T& value)$/;"	f	namespace:utils
format	src/3rd_party/spdlog/example/utils.h	/^inline std::string format(const double & value)$/;"	f	namespace:utils
format	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^inline void spdlog::pattern_formatter::format(details::log_msg& msg)$/;"	f	class:spdlog::pattern_formatter
format	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^void fmt::internal::PrintfFormatter<Char>::format($/;"	f	class:fmt::internal::PrintfFormatter
format	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        FormatFunc format;$/;"	m	struct:fmt::internal::Value::CustomValue
format	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline std::string format(CStringRef format_str, ArgList args)$/;"	f
format	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline std::wstring format(WCStringRef format_str, ArgList args)$/;"	f
format	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.h	/^void format(BasicFormatter<Char, ArgFormatter> &f,$/;"	f	namespace:fmt
format	src/3rd_party/spdlog/include/spdlog/fmt/bundled/time.h	/^void format(BasicFormatter<char, ArgFormatter> &f,$/;"	f	namespace:fmt
format_	src/3rd_party/spdlog/details/format.h	/^    const Char *format_;$/;"	m	class:fmt::internal::BasicArgFormatter
format_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    const Char *format_;$/;"	m	class:fmt::BasicArgFormatter
format_custom_arg	src/3rd_party/spdlog/details/format.h	/^    static void format_custom_arg($/;"	f	class:fmt::internal::MakeValue
format_custom_arg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static void format_custom_arg($/;"	f	class:fmt::internal::MakeValue
format_decimal	src/3rd_party/spdlog/details/format.h	/^    char *format_decimal(ULongLong value)$/;"	f	class:FormatInt
format_decimal	src/3rd_party/spdlog/details/format.h	/^inline void format_decimal(Char *buffer, UInt value, unsigned num_digits)$/;"	f	namespace:fmt::internal
format_decimal	src/3rd_party/spdlog/details/format.h	/^inline void format_decimal(char *&buffer, T value)$/;"	f
format_decimal	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    char *format_decimal(ULongLong value)$/;"	f	class:FormatInt
format_decimal	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline void format_decimal(Char *buffer, UInt value, unsigned num_digits)$/;"	f	namespace:fmt::internal
format_decimal	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline void format_decimal(Char *buffer, UInt value, unsigned num_digits,$/;"	f	namespace:fmt::internal
format_decimal	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline void format_decimal(char *&buffer, T value)$/;"	f
format_float	src/3rd_party/spdlog/details/format.cc	/^int fmt::internal::CharTraits<char>::format_float($/;"	f	class:fmt::internal::CharTraits
format_float	src/3rd_party/spdlog/details/format.cc	/^int fmt::internal::CharTraits<wchar_t>::format_float($/;"	f	class:fmt::internal::CharTraits
format_float	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^int fmt::internal::CharTraits<char>::format_float($/;"	f	class:fmt::internal::CharTraits
format_float	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^int fmt::internal::CharTraits<wchar_t>::format_float($/;"	f	class:fmt::internal::CharTraits
formatted	src/3rd_party/spdlog/details/log_msg.h	/^    fmt::MemoryWriter formatted;$/;"	m	struct:spdlog::details::log_msg
formatted	src/3rd_party/spdlog/include/spdlog/details/log_msg.h	/^    fmt::MemoryWriter formatted;$/;"	m	struct:spdlog::details::log_msg
formatter	src/3rd_party/spdlog/details/registry.h	/^    void formatter(formatter_ptr f)$/;"	f	class:spdlog::details::registry_t
formatter	src/3rd_party/spdlog/formatter.h	/^class formatter$/;"	c	namespace:spdlog
formatter	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    void formatter(formatter_ptr f)$/;"	f	class:spdlog::details::registry_t
formatter	src/3rd_party/spdlog/include/spdlog/formatter.h	/^class formatter$/;"	c	namespace:spdlog
formatter_	src/3rd_party/spdlog/details/format.h	/^    BasicFormatter<Char> &formatter_;$/;"	m	class:fmt::internal::BasicArgFormatter
formatter_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicFormatter<Char, Impl> &formatter_;$/;"	m	class:fmt::BasicArgFormatter
fortran_order	src/3rd_party/cnpy/cnpy.h	/^        bool fortran_order;$/;"	m	struct:cnpy::NpyArray
forward	src/graph/expression_graph.h	/^  void forward() {$/;"	f	class:marian::ExpressionGraph
forward	src/graph/node.h	/^  virtual void forward() { runForward(forwardOps()); }$/;"	f	class:marian::Node
forward	src/graph/node_operators_binary.h	/^  void forward() {$/;"	f	struct:marian::ConcatenateNodeOp
forward	src/graph/node_operators_unary.h	/^  void forward() {}$/;"	f	class:marian::ReshapeNodeOp
forward	src/graph/node_operators_unary.h	/^  void forward() {}$/;"	f	class:marian::StepNodeOp
forward	src/rnn/rnn.h	/^  forward,$/;"	m	struct:marian::rnn::dir
forwardNext	src/graph/expression_graph.h	/^  void forwardNext() {$/;"	f	class:marian::ExpressionGraph
forwardOps	src/graph/node.h	/^  virtual NodeOps forwardOps() { return {}; };$/;"	f	class:marian::Node
forwardOps	src/graph/node_operators_binary.h	/^  NodeOps forwardOps() {$/;"	f	class:marian::ConvolutionOp
forwardOps	src/graph/node_operators_binary.h	/^  NodeOps forwardOps() {$/;"	f	class:marian::DotBatchedNodeOp
forwardOps	src/graph/node_operators_binary.h	/^  NodeOps forwardOps() {$/;"	f	class:marian::DotNodeOp
forwardOps	src/graph/node_operators_binary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::AffineNodeOp
forwardOps	src/graph/node_operators_binary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::CrossEntropyNodeOp
forwardOps	src/graph/node_operators_binary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::DivNodeOp
forwardOps	src/graph/node_operators_binary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::HighwayNodeOp
forwardOps	src/graph/node_operators_binary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::LayerNormalizationOp
forwardOps	src/graph/node_operators_binary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::MinusNodeOp
forwardOps	src/graph/node_operators_binary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::MultNodeOp
forwardOps	src/graph/node_operators_binary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::PlusNodeOp
forwardOps	src/graph/node_operators_binary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::ScalarProductNodeOp
forwardOps	src/graph/node_operators_unary.h	/^    NodeOps forwardOps() {$/;"	f	class:marian::PoolingWithMaskingOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() { return {NodeOp(LogSoftmax(val_, child(0)->val()))}; }$/;"	f	struct:marian::LogSoftmaxNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	class:marian::PoolingOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::ColsNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::ExpNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::LogNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::LogitNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::MeanNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::NegNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::PReLUNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::ReLUNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::RowsNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::ScalarAddNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::ScalarMultNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::SelectNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::ShiftNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::SoftmaxNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::SqrtNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::SquareNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::SumNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::SwishNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::TanhNodeOp
forwardOps	src/graph/node_operators_unary.h	/^  NodeOps forwardOps() {$/;"	f	struct:marian::TransposeNodeOp
fprintf	src/3rd_party/spdlog/details/format.cc	/^FMT_FUNC int fmt::fprintf(std::FILE *f, CStringRef format, ArgList args)$/;"	f	class:fmt
fprintf	src/3rd_party/spdlog/details/format.cc	/^FMT_FUNC int fmt::fprintf(std::ostream &os, CStringRef format, ArgList args)$/;"	f	class:fmt
fprintf	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^FMT_FUNC int fmt::fprintf(std::FILE *f, CStringRef format, ArgList args) {$/;"	f	class:fmt
fprintf	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.cc	/^FMT_FUNC int fprintf(std::ostream &os, CStringRef format, ArgList args) {$/;"	f	namespace:fmt
free	src/graph/expression_graph.h	/^  void free(Tensor& t) {$/;"	f	class:marian::ExpressionGraph
free	src/graph/node_operators_unary.h	/^  void free() {}$/;"	f	class:marian::ReshapeNodeOp
free	src/graph/node_operators_unary.h	/^  void free() {}$/;"	f	class:marian::StepNodeOp
free	src/tensors/allocator.h	/^  bool free(Ptr<MemoryPiece> mp) {$/;"	f	class:marian::Allocator
free	src/tensors/allocator.h	/^  bool free(uint8_t* ptr, size_t bytes) {$/;"	f	class:marian::Allocator
free	src/tensors/tensor_allocator.h	/^  void free(Tensor& t) { allocator_->free(t->memory()); }$/;"	f	class:marian::TensorAllocator
freelocale	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    static void freelocale(locale_t locale)$/;"	f	class:fmt::Locale
from_binary	src/functional/floats.h	/^      constexpr float from_binary(unsigned i) {$/;"	f	namespace:marian::functional::unsigned2float
from_config	src/models/model_factory.cpp	/^Ptr<ModelBase> from_config(Ptr<Config> config) {$/;"	f	namespace:marian::models
from_options	src/models/model_factory.cpp	/^Ptr<ModelBase> from_options(Ptr<Options> options) {$/;"	f	namespace:marian::models
front	src/data/corpus.h	/^  Ptr<SubBatch> front() { return batches_.front(); }$/;"	f	class:marian::data::CorpusBatch
front	src/rnn/types.h	/^  State& front() { return states_.front(); }$/;"	f	class:marian::rnn::States
front	src/rnn/types.h	/^  const State& front() const { return states_.front(); }$/;"	f	class:marian::rnn::States
full_abs	src/training/dropper.h	/^__global__ void full_abs(float* data, int max_size) {$/;"	f	namespace:marian
full_days	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^static const days_array& full_days()$/;"	f	namespace:spdlog::details
full_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class full_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
full_months	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^static const months_array& full_months()$/;"	f	namespace:spdlog::details
functional	src/functional/floats.h	/^  namespace functional {$/;"	n	namespace:marian
functional	src/functional/functional.h	/^  namespace functional {$/;"	n	namespace:marian
functional	src/functional/operands.h	/^  namespace functional {$/;"	n	namespace:marian
functional	src/functional/predicates.h	/^  namespace functional {$/;"	n	namespace:marian
future	src/3rd_party/threadpool.h	/^        -> std::future<typename std::result_of<F(Args...)>::type>;$/;"	m	class:marian::ThreadPool::std
future	src/3rd_party/threadpool2.h	/^        -> std::future<typename std::result_of<F(Args...)>::type>;$/;"	m	class:marian::ThreadPool2::std
gAddEqual	src/kernels/tensor_operators.h	/^__global__ void gAddEqual(Functor functor,$/;"	f	namespace:marian
gAddGeneric	src/kernels/tensor_operators.h	/^__global__ void gAddGeneric(Functor functor,$/;"	f	namespace:marian
gAddReduce	src/kernels/tensor_operators.h	/^__global__ void gAddReduce(Functor functor,$/;"	f	namespace:marian
gElement	src/kernels/tensor_operators.h	/^__global__ void gElement(Functor functor,$/;"	f	namespace:marian
gFindSubtensor	src/training/sparse_tensor.h	/^__global__ void gFindSubtensor(int* indices,$/;"	f	namespace:marian
gScatterAdd	src/training/sparse_tensor.h	/^__global__ void gScatterAdd(float* denseData,$/;"	f	namespace:marian
g_	src/data/batch_generator.h	/^  std::mt19937 g_;$/;"	m	class:marian::data::BatchGenerator
g_	src/data/corpus.h	/^  std::mt19937 g_;$/;"	m	class:marian::data::Corpus
g_counter	src/3rd_party/spdlog/bench/latency/g3log-latency.cpp	/^std::atomic<size_t> g_counter = {0};$/;"	m	namespace:__anon76	file:
g_counter	src/3rd_party/spdlog/bench/latency/spdlog-latency.cpp	/^std::atomic<size_t> g_counter = {0};$/;"	m	namespace:__anon75	file:
g_iterations	src/3rd_party/spdlog/bench/latency/g3log-latency.cpp	/^const uint64_t g_iterations = 1000000;$/;"	m	namespace:__anon76	file:
g_iterations	src/3rd_party/spdlog/bench/latency/spdlog-latency.cpp	/^const uint64_t g_iterations = 1000000;$/;"	m	namespace:__anon75	file:
gamma1_	src/rnn/cells.h	/^  Expr gamma1_;$/;"	m	class:marian::rnn::FastLSTM
gamma1_	src/rnn/cells.h	/^  Expr gamma1_;$/;"	m	class:marian::rnn::GRU
gamma1_	src/rnn/cells.h	/^  Expr gamma1_;$/;"	m	class:marian::rnn::Tanh
gamma1m_	src/rnn/cells.h	/^  Expr gamma1m_, gamma2m_;$/;"	m	class:marian::rnn::Multiplicative
gamma2_	src/rnn/cells.h	/^  Expr gamma2_;$/;"	m	class:marian::rnn::FastLSTM
gamma2_	src/rnn/cells.h	/^  Expr gamma2_;$/;"	m	class:marian::rnn::GRU
gamma2_	src/rnn/cells.h	/^  Expr gamma2_;$/;"	m	class:marian::rnn::Tanh
gamma2m_	src/rnn/cells.h	/^  Expr gamma1m_, gamma2m_;$/;"	m	class:marian::rnn::Multiplicative
gammaContext_	src/rnn/attention.h	/^  Expr gammaContext_;$/;"	m	class:marian::rnn::GlobalAttention
gammaState_	src/rnn/attention.h	/^  Expr gammaState_;$/;"	m	class:marian::rnn::GlobalAttention
gaps_	src/tensors/allocator.h	/^  std::set<Gap> gaps_;$/;"	m	class:marian::Allocator
gend_	src/training/sparse_tensor.h	/^  int* gend_;$/;"	m	class:marian::SparseTensorBase
generate_handshake	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      bool generate_handshake(const std::shared_ptr<asio::streambuf> &write_buffer) {$/;"	f	class:SimpleWeb::SocketServerBase::Connection
get	src/3rd_party/catch.hpp	/^        T* get() const{ return m_p; }$/;"	f	class:Catch::Ptr
get	src/3rd_party/spdlog/details/format.h	/^    static Char *get(Char *p)$/;"	f	class:BasicWriter
get	src/3rd_party/spdlog/details/format.h	/^    static Char *get(CharPtr p)$/;"	f	class:BasicWriter
get	src/3rd_party/spdlog/details/registry.h	/^    std::shared_ptr<logger> get(const std::string& logger_name)$/;"	f	class:spdlog::details::registry_t
get	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::get(const std::string& name)$/;"	f	class:spdlog
get	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    std::shared_ptr<logger> get(const std::string& logger_name)$/;"	f	class:spdlog::details::registry_t
get	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::get(const std::string& name)$/;"	f	class:spdlog
get	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static Char *get(Char *p)$/;"	f	class:BasicWriter
get	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static Char *get(CharPtr p)$/;"	f	class:BasicWriter
get	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    Type get() const$/;"	f	class:fmt::Locale
get	src/3rd_party/spdlog/tests/catch.hpp	/^        T* get() { return m_p; }$/;"	f	class:Catch::Ptr
get	src/3rd_party/spdlog/tests/catch.hpp	/^        const T* get() const{ return m_p; }$/;"	f	class:Catch::Ptr
get	src/3rd_party/yaml-cpp/node/detail/impl.h	/^  static node* get(const std::vector<node*>& \/* sequence *\/,$/;"	f	struct:YAML::detail::get_idx
get	src/3rd_party/yaml-cpp/node/detail/impl.h	/^  static node* get(const std::vector<node*>& sequence, const Key& key,$/;"	f	struct:YAML::detail::get_idx
get	src/3rd_party/yaml-cpp/node/detail/impl.h	/^  static node* get(std::vector<node*>& sequence, const Key& key,$/;"	f	struct:YAML::detail::get_idx
get	src/3rd_party/yaml-cpp/node/detail/impl.h	/^inline node& node_data::get(const Key& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_data
get	src/3rd_party/yaml-cpp/node/detail/impl.h	/^inline node* node_data::get(const Key& key,$/;"	f	class:YAML::detail::node_data
get	src/3rd_party/yaml-cpp/node/detail/node.h	/^  node& get(const Key& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node
get	src/3rd_party/yaml-cpp/node/detail/node.h	/^  node& get(node& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node
get	src/3rd_party/yaml-cpp/node/detail/node.h	/^  node* get(const Key& key, shared_memory_holder pMemory) const {$/;"	f	class:YAML::detail::node
get	src/3rd_party/yaml-cpp/node/detail/node.h	/^  node* get(node& key, shared_memory_holder pMemory) const {$/;"	f	class:YAML::detail::node
get	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  node& get(const Key& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_ref
get	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  node& get(node& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_ref
get	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  node* get(const Key& key, shared_memory_holder pMemory) const {$/;"	f	class:YAML::detail::node_ref
get	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  node* get(node& key, shared_memory_holder pMemory) const {$/;"	f	class:YAML::detail::node_ref
get	src/3rd_party/yaml-cpp/node_data.cpp	/^node& node_data::get(node& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_data
get	src/3rd_party/yaml-cpp/node_data.cpp	/^node* node_data::get(node& key, shared_memory_holder \/* pMemory *\/) const {$/;"	f	class:YAML::detail::node_data
get	src/3rd_party/yaml-cpp/setting.h	/^  const T get() const { return m_value; }$/;"	f	class:YAML::Setting
get	src/3rd_party/yaml-cpp/stream.cpp	/^char Stream::get() {$/;"	f	class:YAML::Stream
get	src/3rd_party/yaml-cpp/stream.cpp	/^std::string Stream::get(int n) {$/;"	f	class:YAML::Stream
get	src/common/config.cpp	/^YAML::Node Config::get(const std::string& key) const {$/;"	f	class:marian::Config
get	src/common/config.cpp	/^YAML::Node& Config::get() {$/;"	f	class:marian::Config
get	src/common/config.cpp	/^const YAML::Node& Config::get() const {$/;"	f	class:marian::Config
get	src/common/config.h	/^  T get(const std::string& key) const {$/;"	f	class:marian::Config
get	src/common/config_parser.h	/^  T get(const std::string& key) const {$/;"	f	class:marian::ConfigParser
get	src/common/options.h	/^  T get(const std::string& key) {$/;"	f	class:marian::Options
get	src/common/options.h	/^  T get(const std::string& key, T defaultValue) {$/;"	f	class:marian::Options
get	src/graph/expression_graph.h	/^  Expr get(std::string name) {$/;"	f	class:marian::ExpressionGraph
get	src/graph/parameters.h	/^  Expr get(const std::string& name) {$/;"	f	class:marian::Parameters
get	src/tensors/tensor_cpu.h	/^  float get(size_t i) { return data_[i]; }$/;"	f	class:marian::TensorCPU
get	src/tensors/tensor_cpu.h	/^  void get(std::vector<float>& v) {$/;"	f	class:marian::TensorCPU
getAlignments	src/models/encdec.h	/^  virtual const std::vector<Expr> getAlignments(int i = 0) { return {}; };$/;"	f	class:marian::DecoderBase
getAlignments	src/models/hardatt.h	/^  const std::vector<Expr> getAlignments() {$/;"	f	class:marian::DecoderHardAtt
getAlignments	src/models/s2s.h	/^  virtual const std::vector<Expr> getAlignments(int i = 0) {$/;"	f	class:marian::DecoderS2S
getAlignments	src/models/transformer.h	/^  virtual const std::vector<Expr> getAlignments(int i = 0) { return {}; }$/;"	f	class:marian::DecoderTransformer
getAlignments	src/rnn/attention.h	/^  std::vector<Expr>& getAlignments() { return alignments_; }$/;"	f	class:marian::rnn::GlobalAttention
getAttended	src/models/experimental/pooling.h	/^  virtual Expr getAttended() { return attended_; }$/;"	f	class:marian::EncoderStatePooling
getAttended	src/models/states.h	/^  virtual Expr getAttended() { return context_; }$/;"	f	class:marian::EncoderState
getAttentionIndices	src/models/hardatt.h	/^  virtual std::vector<size_t>& getAttentionIndices() {$/;"	f	class:marian::DecoderStateHardAtt
getBackend	src/graph/expression_graph.h	/^  Ptr<Backend> getBackend() { return backend_; }$/;"	f	class:marian::ExpressionGraph
getBatchSize	src/data/batch_stats.h	/^  size_t getBatchSize(const std::vector<size_t>& lengths) {$/;"	f	class:marian::data::BatchStats
getConfig	src/common/config_parser.cpp	/^YAML::Node ConfigParser::getConfig() const {$/;"	f	class:marian::ConfigParser
getContext	src/models/experimental/pooling.h	/^  virtual Expr getContext() { return context_; }$/;"	f	class:marian::EncoderStatePooling
getContext	src/models/states.h	/^  virtual Expr getContext() { return context_; }$/;"	f	class:marian::EncoderState
getContext	src/rnn/attention.h	/^  Expr getContext() { return concatenate(contexts_, keywords::axis = -3); }$/;"	f	class:marian::rnn::GlobalAttention
getContexts	src/rnn/attention.h	/^  std::vector<Expr>& getContexts() { return contexts_; }$/;"	f	class:marian::rnn::GlobalAttention
getCublasHandle	src/graph/backend_gpu.h	/^  cublasHandle_t getCublasHandle() { return cublasHandle_; }$/;"	f	class:marian::BackendGPU
getCurandGenerator	src/graph/backend_gpu.h	/^  curandGenerator_t getCurandGenerator() { return curandGenerator_; }$/;"	f	class:marian::BackendGPU
getDecoders	src/models/encdec.h	/^  std::vector<Ptr<DecoderBase>>& getDecoders() { return decoders_; }$/;"	f	class:marian::EncoderDecoder
getDevice	src/graph/expression_graph.h	/^  size_t getDevice() { return device_; }$/;"	f	class:marian::ExpressionGraph
getDevice	src/kernels/sparse.h	/^  size_t getDevice() { return device_; }$/;"	f	class:marian::sparse::CSR
getDevice	src/tensors/allocator.h	/^  size_t getDevice() { return device_.getDevice(); }$/;"	f	class:marian::Allocator
getDevice	src/tensors/device_gpu.h	/^  size_t getDevice() { return device_; }$/;"	f	class:marian::DeviceGPU
getDevice	src/tensors/tensor.h	/^  size_t getDevice() { return device_; }$/;"	f	class:marian::TensorBase
getDevice	src/tests/allocator_test.cpp	/^  size_t getDevice() { return 0; }$/;"	f	class:DeviceCPU
getDevice	src/training/sparse_tensor.h	/^  size_t getDevice() { return device_; }$/;"	f	class:marian::SparseTensorBase
getEncoderStates	src/models/states.h	/^  virtual std::vector<Ptr<EncoderState>>& getEncoderStates() {$/;"	f	class:marian::DecoderState
getEncoders	src/models/encdec.h	/^  std::vector<Ptr<EncoderBase>>& getEncoders() { return encoders_; }$/;"	f	class:marian::EncoderDecoder
getFileDescriptor	src/common/file_stream.h	/^  int getFileDescriptor() { return fd_; }$/;"	f	class:TemporaryFile
getFileName	src/common/file_stream.h	/^  std::string getFileName() { return name_; }$/;"	f	class:TemporaryFile
getGap	src/tensors/allocator.h	/^  Gap getGap(size_t size) {$/;"	f	class:marian::Allocator
getGuidedAlignment	src/data/corpus.h	/^  std::vector<float>& getGuidedAlignment() { return guidedAlignment_; }$/;"	f	class:marian::data::CorpusBatch
getId	src/data/corpus.h	/^  size_t getId() const { return id_; }$/;"	f	class:marian::data::SentenceTuple
getId	src/graph/node.h	/^  virtual size_t getId() { return id_; }$/;"	f	class:marian::Node
getLazyInputs	src/rnn/types.h	/^  virtual std::vector<Expr> getLazyInputs(Ptr<rnn::RNN> parent) {$/;"	f	class:marian::rnn::Cell
getLazyInputs	src/rnn/types.h	/^  virtual std::vector<Expr> getLazyInputs(Ptr<rnn::RNN> parent) {$/;"	f	class:marian::rnn::StackedCell
getLearningRate	src/training/scheduler.h	/^  float getLearningRate(TrainingState& state) {$/;"	f	class:marian::Scheduler
getLf	src/models/experimental/lex_probs.h	/^  Ptr<sparse::CSR> getLf() { return lf_; }$/;"	f	class:marian::LexProbs
getMask	src/models/experimental/pooling.h	/^  virtual Expr getMask() { return mask_; }$/;"	f	class:marian::EncoderStatePooling
getMask	src/models/states.h	/^  virtual Expr getMask() { return mask_; }$/;"	f	class:marian::EncoderState
getName	src/3rd_party/catch.hpp	/^    template<> struct OperatorTraits<IsEqualTo>             { static const char* getName(){ return "=="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	src/3rd_party/catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThan>         { static const char* getName(){ return ">"; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	src/3rd_party/catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThanOrEqualTo>{ static const char* getName(){ return ">="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	src/3rd_party/catch.hpp	/^    template<> struct OperatorTraits<IsLessThan>            { static const char* getName(){ return "<"; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	src/3rd_party/catch.hpp	/^    template<> struct OperatorTraits<IsLessThanOrEqualTo>   { static const char* getName(){ return "<="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	src/3rd_party/catch.hpp	/^    template<> struct OperatorTraits<IsNotEqualTo>          { static const char* getName(){ return "!="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	src/3rd_party/catch.hpp	/^    template<Operator Op> struct OperatorTraits             { static const char* getName(){ return "*error*"; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	src/3rd_party/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsEqualTo>             { static const char* getName(){ return "=="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	src/3rd_party/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThan>         { static const char* getName(){ return ">"; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	src/3rd_party/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThanOrEqualTo>{ static const char* getName(){ return ">="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	src/3rd_party/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsLessThan>            { static const char* getName(){ return "<"; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	src/3rd_party/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsLessThanOrEqualTo>   { static const char* getName(){ return "<="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	src/3rd_party/spdlog/tests/catch.hpp	/^    template<> struct OperatorTraits<IsNotEqualTo>          { static const char* getName(){ return "!="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	src/3rd_party/spdlog/tests/catch.hpp	/^    template<Operator Op> struct OperatorTraits             { static const char* getName(){ return "*error*"; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	src/translator/scorers.h	/^  std::string getName() { return name_; }$/;"	f	class:marian::Scorer
getNumTasks	src/3rd_party/threadpool.h	/^    size_t getNumTasks() const {$/;"	f	class:marian::ThreadPool
getNumTasks	src/3rd_party/threadpool2.h	/^    size_t getNumTasks() const {$/;"	f	class:marian::ThreadPool2
getOptions	src/common/options.h	/^  YAML::Node& getOptions() { return options_; }$/;"	f	class:marian::Options
getOptions	src/layers/convolution.h	/^  Ptr<Options> getOptions() { return options_; }$/;"	f	class:marian::Convolution
getOptions	src/layers/factory.h	/^  Ptr<Options> getOptions() { return options_; }$/;"	f	class:marian::Factory
getOptions	src/rnn/rnn.h	/^  virtual Ptr<Options> getOptions() { return options_; }$/;"	f	class:marian::rnn::BaseRNN
getOptions	src/rnn/types.h	/^  Ptr<Options> getOptions() { return options_; }$/;"	f	class:marian::rnn::Stackable
getProbs	src/models/experimental/lex_probs.h	/^  Ptr<sparse::CSR> getProbs() { return lexProbs_; }$/;"	f	class:marian::LexProbs
getProbs	src/models/states.h	/^  virtual Expr getProbs() { return probs_; }$/;"	f	class:marian::DecoderState
getProbs	src/translator/scorers.h	/^  virtual Expr getProbs() { return penalties_; };$/;"	f	class:marian::WordPenaltyState
getProbs	src/translator/scorers.h	/^  virtual Expr getProbs() { return state_->getProbs(); };$/;"	f	class:marian::ScorerWrapperState
getSentenceIds	src/data/batch.h	/^  const std::vector<size_t>& getSentenceIds() const { return sentenceIds_; }$/;"	f	class:marian::data::Batch
getSourceWords	src/models/experimental/pooling.h	/^  virtual const std::vector<size_t>& getSourceWords() {$/;"	f	class:marian::EncoderStatePooling
getSourceWords	src/models/states.h	/^  virtual const std::vector<size_t>& getSourceWords() {$/;"	f	class:marian::DecoderState
getSourceWords	src/models/states.h	/^  virtual const std::vector<size_t>& getSourceWords() {$/;"	f	class:marian::EncoderState
getState	src/translator/scorers.h	/^  virtual Ptr<DecoderState> getState() { return state_; }$/;"	f	class:marian::ScorerWrapperState
getStates	src/models/states.h	/^  virtual const rnn::States& getStates() { return states_; }$/;"	f	class:marian::DecoderState
getStridedMask	src/models/charS2S.h	/^  Expr getStridedMask(Ptr<ExpressionGraph> graph, Ptr<data::CorpusBatch> batch,$/;"	f	class:marian::CharS2SEncoder
getTargetEmbeddings	src/models/states.h	/^  virtual Expr getTargetEmbeddings() { return targetEmbeddings_; };$/;"	f	class:marian::DecoderState
getTargetMask	src/models/states.h	/^  virtual Expr getTargetMask() { return targetMask_; };$/;"	f	class:marian::DecoderState
getVocabs	src/data/corpus.h	/^  std::vector<Ptr<Vocab>>& getVocabs() { return vocabs_; }$/;"	f	class:marian::data::Corpus
getWeight	src/translator/scorers.h	/^  float getWeight() { return weight_; }$/;"	f	class:marian::Scorer
get_allocator	src/3rd_party/spdlog/details/format.h	/^    Allocator get_allocator() const$/;"	f	class:fmt::internal::MemoryBuffer
get_allocator	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Allocator get_allocator() const$/;"	f	class:fmt::internal::MemoryBuffer
get_arg	src/3rd_party/spdlog/details/format.cc	/^Arg fmt::internal::PrintfFormatter<Char>::get_arg($/;"	f	class:fmt::internal::PrintfFormatter
get_arg	src/3rd_party/spdlog/details/format.h	/^    Arg get_arg(unsigned arg_index, const char *&error)$/;"	f	class:fmt::internal::FormatterBase
get_arg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^Arg fmt::internal::PrintfFormatter<Char>::get_arg($/;"	f	class:fmt::internal::PrintfFormatter
get_arg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Arg get_arg(unsigned arg_index, const char *&error)$/;"	f	class:fmt::internal::FormatterBase
get_cached_offset	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    int get_cached_offset(const log_msg& msg, const std::tm& tm_time)$/;"	f	class:spdlog::details::z_formatter
get_cached_offset	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^    int get_cached_offset(const log_msg& msg, const std::tm& tm_time)$/;"	f	class:spdlog::details::SPDLOG_FINAL
get_filesize	src/3rd_party/spdlog/tests/utils.cpp	/^std::size_t get_filesize(const std::string& filename)$/;"	f
get_idx	src/3rd_party/yaml-cpp/node/detail/impl.h	/^struct get_idx {$/;"	s	namespace:YAML::detail
get_idx	src/3rd_party/yaml-cpp/node/detail/impl.h	/^struct get_idx<Key, typename std::enable_if<std::is_signed<Key>::value>::type> {$/;"	s	namespace:YAML::detail
get_idx	src/3rd_party/yaml-cpp/node/detail/impl.h	/^struct get_idx<Key,$/;"	s	namespace:YAML::detail
get_time	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^inline std::tm spdlog::pattern_formatter::get_time(details::log_msg& msg)$/;"	f	class:spdlog::pattern_formatter
getpagesize	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	/^long fmt::getpagesize() {$/;"	f	class:fmt
globalVersionNumber	src/training/graph_group_async_drop.h	/^  std::vector<int> globalVersionNumber;$/;"	m	class:marian::AsyncGraphGroup
gmtime	src/3rd_party/spdlog/details/os.h	/^inline std::tm gmtime()$/;"	f	namespace:spdlog::details::os
gmtime	src/3rd_party/spdlog/details/os.h	/^inline std::tm gmtime(const std::time_t &time_tt)$/;"	f	namespace:spdlog::details::os
gmtime	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline std::tm gmtime()$/;"	f	namespace:spdlog::details::os
gmtime	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline std::tm gmtime(const std::time_t &time_tt)$/;"	f	namespace:spdlog::details::os
good	src/3rd_party/yaml-cpp/emitter.cpp	/^bool Emitter::good() const { return m_pState->good(); }$/;"	f	class:YAML::Emitter
good	src/3rd_party/yaml-cpp/emitterstate.h	/^  bool good() const { return m_isGood; }$/;"	f	class:YAML::EmitterState
gpu	src/gpu/array.h	/^namespace gpu {$/;"	n	namespace:marian
gpu	src/gpu/shape.h	/^namespace gpu {$/;"	n	namespace:marian
gpu	src/gpu/tensor.h	/^namespace gpu {$/;"	n	namespace:marian
gpu	src/gpu/tmp.h	/^namespace gpu {$/;"	n	namespace:marian
gpuAssert	src/kernels/cuda_helpers.h	/^inline void gpuAssert(cudaError_t code,$/;"	f
grad	src/graph/node.h	/^  virtual Tensor& grad() { return adj_; };$/;"	f	class:marian::Node
grad	src/graph/node_operators_unary.h	/^  Tensor& grad() {$/;"	f	class:marian::ReshapeNodeOp
grad	src/graph/node_operators_unary.h	/^  Tensor& grad() {$/;"	f	class:marian::StepNodeOp
grad_add_error	src/training/dropper.h	/^__global__ void grad_add_error(float* data, float* errors, int max_size) {$/;"	f	namespace:marian
grad_drop	src/training/dropper.h	/^__global__ void grad_drop(float* data,$/;"	f	namespace:marian
grad_drop_do	src/training/dropper.h	/^  void grad_drop_do(float* data,$/;"	f	class:marian::GradientDropBase
grads	src/graph/parameters.h	/^  Tensor grads() { return grads_->asTensor(); }$/;"	f	class:marian::Parameters
gradsAlloc_	src/training/graph_group_async.h	/^  std::vector<Ptr<TensorAllocator>> gradsAlloc_;$/;"	m	class:marian::AsyncGraphGroup
gradsAlloc_	src/training/graph_group_async_drop.h	/^  std::vector<Ptr<TensorAllocator>> gradsAlloc_;$/;"	m	class:marian::AsyncGraphGroup
grads_	src/graph/parameters.h	/^  Ptr<TensorAllocator> grads_;$/;"	m	class:marian::Parameters
grads_	src/training/graph_group_async.h	/^  std::vector<Tensor> grads_;$/;"	m	class:marian::AsyncGraphGroup
grads_	src/training/graph_group_async_drop.h	/^  std::vector<Tensor> grads_;$/;"	m	class:marian::AsyncGraphGroup
grads_	src/training/graph_group_sync.h	/^  std::vector<Tensor> grads_;$/;"	m	class:marian::SyncGraphGroup
graph	src/graph/node.h	/^  virtual Ptr<ExpressionGraph> graph() { return graph_.lock(); }$/;"	f	class:marian::Node
graph_	src/graph/node.h	/^  Weak<ExpressionGraph> graph_;$/;"	m	class:marian::Node
graph_	src/layers/constructors.h	/^  Ptr<ExpressionGraph> graph_;$/;"	m	class:marian::mlp::MLP
graph_	src/layers/factory.h	/^  Ptr<ExpressionGraph> graph_;$/;"	m	class:marian::Factory
graph_	src/layers/generic.h	/^  Ptr<ExpressionGraph> graph_;$/;"	m	class:marian::mlp::Layer
graph_	src/rnn/rnn.h	/^  Ptr<ExpressionGraph> graph_;$/;"	m	class:marian::rnn::BaseRNN
graph_	src/training/graph_group_singleton.h	/^  Ptr<ExpressionGraph> graph_;$/;"	m	class:marian::SingletonGraph
graph_t	src/tools/align2steps.cpp	/^    graph_t;$/;"	t	file:
graphs_	src/rescorer/rescorer.h	/^  std::vector<Ptr<ExpressionGraph>> graphs_;$/;"	m	class:marian::Rescore
graphs_	src/training/graph_group_async.h	/^  std::vector<Ptr<ExpressionGraph>> graphs_;$/;"	m	class:marian::AsyncGraphGroup
graphs_	src/training/graph_group_async_drop.h	/^  std::vector<Ptr<ExpressionGraph>> graphs_;$/;"	m	class:marian::AsyncGraphGroup
graphs_	src/training/graph_group_sync.h	/^  std::vector<Ptr<ExpressionGraph>> graphs_;$/;"	m	class:marian::SyncGraphGroup
graphs_	src/translator/translator.h	/^  std::vector<Ptr<ExpressionGraph>> graphs_;$/;"	m	class:marian::TranslateMultiGPU
graphs_	src/translator/translator.h	/^  std::vector<Ptr<ExpressionGraph>> graphs_;$/;"	m	class:marian::TranslateServiceMultiGPU
graphviz	src/graph/expression_graph.h	/^  std::string graphviz() {$/;"	f	class:marian::ExpressionGraph
graphviz	src/graph/expression_graph.h	/^  void graphviz(const std::string& filename) {$/;"	f	class:marian::ExpressionGraph
graphviz	src/graph/node.h	/^  virtual std::string graphviz() {$/;"	f	class:marian::Node
green	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string green = "\\033[32m";$/;"	m	class:spdlog::sinks::ansicolor_sink
green	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string green      = "\\033[32m";$/;"	m	class:spdlog::sinks::ansicolor_sink
grey	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string grey = "\\033[30m";$/;"	m	class:spdlog::sinks::ansicolor_sink
grey	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string grey       = "\\033[30m";$/;"	m	class:spdlog::sinks::ansicolor_sink
groundTruth	src/models/encdec.h	/^  virtual std::tuple<Expr, Expr> groundTruth(Ptr<DecoderState> state,$/;"	f	class:marian::DecoderBase
groundTruth	src/models/hardatt.h	/^  virtual std::tuple<Expr, Expr> groundTruth(Ptr<DecoderState> state,$/;"	f	class:marian::DecoderHardAtt
grow	src/3rd_party/spdlog/details/format.cc	/^void fmt::internal::FixedBuffer<Char>::grow(std::size_t)$/;"	f	class:fmt::internal::FixedBuffer
grow	src/3rd_party/spdlog/details/format.h	/^void MemoryBuffer<T, SIZE, Allocator>::grow(std::size_t size)$/;"	f	class:fmt::internal::MemoryBuffer
grow	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^void fmt::internal::FixedBuffer<Char>::grow(std::size_t) {$/;"	f	class:fmt::internal::FixedBuffer
grow	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^void MemoryBuffer<T, SIZE, Allocator>::grow(std::size_t size)$/;"	f	class:fmt::internal::MemoryBuffer
grow	src/tensors/allocator.h	/^  void grow(size_t add) {$/;"	f	class:marian::Allocator
grow_buffer	src/3rd_party/spdlog/details/format.h	/^    CharPtr grow_buffer(std::size_t n)$/;"	f	class:BasicWriter
grow_buffer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    CharPtr grow_buffer(std::size_t n)$/;"	f	class:BasicWriter
gstart_	src/training/sparse_tensor.h	/^  int* gstart_;$/;"	m	class:marian::SparseTensorBase
gt_	src/optimizers/optimizers.h	/^  Tensor gt_;$/;"	m	class:marian::Adagrad
guess_terminal_width	src/common/config_parser.cpp	/^uint16_t guess_terminal_width(uint16_t max_width) {$/;"	f	namespace:marian
guidedAlignment	src/data/corpus.h	/^  void guidedAlignment(Ptr<CorpusBatch> batch) {$/;"	f	class:marian::data::WordAlignment
guidedAlignmentCost	src/layers/guided_alignment.cpp	/^Expr guidedAlignmentCost(Ptr<ExpressionGraph> graph,$/;"	f	namespace:marian
guidedAlignment_	src/data/corpus.h	/^  std::vector<float> guidedAlignment_;$/;"	m	class:marian::data::CorpusBatch
h_res	src/translator/nth_element.h	/^  float* h_res;$/;"	m	class:marian::NthElement
h_res_idx	src/translator/nth_element.h	/^  int* h_res_idx;$/;"	m	class:marian::NthElement
handle	src/3rd_party/yaml-cpp/tag.h	/^  std::string handle, value;$/;"	m	struct:YAML::Tag
handle	src/kernels/sparse.h	/^  cusparseHandle_t handle() { return handle_; };$/;"	f	class:marian::sparse::CSR
handle_flag	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^inline void spdlog::pattern_formatter::handle_flag(char flag)$/;"	f	class:spdlog::pattern_formatter
handle_flag	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^inline void spdlog::pattern_formatter::handle_flag(char flag)$/;"	f	class:spdlog::pattern_formatter
handle_flush_interval	src/3rd_party/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::handle_flush_interval(log_clock::time_point& now, log_clock::time_point& last_flush)$/;"	f	class:spdlog::details::async_log_helper
handle_flush_interval	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::handle_flush_interval(log_clock::time_point& now, log_clock::time_point& last_flush)$/;"	f	class:spdlog::details::async_log_helper
handle_websocket	scripts/python/mariannmt_server.py	/^def handle_websocket():$/;"	f
handler_runner	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::shared_ptr<ScopeRunner> handler_runner;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
handler_runner	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    SocketServerBase(unsigned short port) noexcept : config(port), handler_runner(new ScopeRunner()) {}$/;"	f	class:SimpleWeb::SocketServerBase
handler_runner	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    std::shared_ptr<ScopeRunner> handler_runner;$/;"	m	class:SimpleWeb::SocketServerBase
has	src/common/config.cpp	/^bool Config::has(const std::string& key) const {$/;"	f	class:marian::Config
has	src/common/config_parser.cpp	/^bool ConfigParser::has(const std::string& key) const {$/;"	f	class:marian::ConfigParser
has	src/common/options.h	/^  bool has(const std::string& key) const { return options_[key]; }$/;"	f	class:marian::Options
hash	src/graph/node.h	/^  virtual size_t hash() {$/;"	f	struct:marian::NaryNodeOp
hash	src/graph/node_operators.h	/^  virtual size_t hash() {$/;"	f	struct:marian::ConstantNode
hash	src/graph/node_operators.h	/^  virtual size_t hash() {$/;"	f	struct:marian::ParamNode
hash	src/graph/node_operators_binary.h	/^  virtual size_t hash() {$/;"	f	struct:marian::ConcatenateNodeOp
hash	src/graph/node_operators_unary.h	/^  virtual size_t hash() {$/;"	f	class:marian::ReshapeNodeOp
hash	src/graph/node_operators_unary.h	/^  virtual size_t hash() {$/;"	f	class:marian::StepNodeOp
hash	src/graph/node_operators_unary.h	/^  virtual size_t hash() {$/;"	f	struct:marian::ColsNodeOp
hash	src/graph/node_operators_unary.h	/^  virtual size_t hash() {$/;"	f	struct:marian::MeanNodeOp
hash	src/graph/node_operators_unary.h	/^  virtual size_t hash() {$/;"	f	struct:marian::PReLUNodeOp
hash	src/graph/node_operators_unary.h	/^  virtual size_t hash() {$/;"	f	struct:marian::RowsNodeOp
hash	src/graph/node_operators_unary.h	/^  virtual size_t hash() {$/;"	f	struct:marian::ScalarAddNodeOp
hash	src/graph/node_operators_unary.h	/^  virtual size_t hash() {$/;"	f	struct:marian::ScalarMultNodeOp
hash	src/graph/node_operators_unary.h	/^  virtual size_t hash() {$/;"	f	struct:marian::SelectNodeOp
hash	src/graph/node_operators_unary.h	/^  virtual size_t hash() {$/;"	f	struct:marian::ShiftNodeOp
hash	src/graph/node_operators_unary.h	/^  virtual size_t hash() {$/;"	f	struct:marian::SoftmaxNodeOp
hash	src/graph/node_operators_unary.h	/^  virtual size_t hash() {$/;"	f	struct:marian::SqrtNodeOp
hash	src/graph/node_operators_unary.h	/^  virtual size_t hash() {$/;"	f	struct:marian::SumNodeOp
hash	src/graph/node_operators_unary.h	/^  virtual size_t hash() {$/;"	f	struct:marian::TransposeNodeOp
hashMap_	src/graph/expression_graph.h	/^  std::unordered_map<size_t, std::vector<WExpr>> hashMap_;$/;"	m	class:marian::ExpressionGraph
header	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      CaseInsensitiveMultimap header;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
header_stream	src/3rd_party/simple-websocket-server/server_ws.hpp	/^        std::shared_ptr<SendStream> header_stream;$/;"	m	class:SimpleWeb::SocketServerBase::Connection::SendData
hist_rec	src/3rd_party/svd/defs_and_types.h	/^typedef struct hist_rec {$/;"	s
hist_rec	src/3rd_party/svd/defs_and_types.h	/^} hist_rec;$/;"	t	typeref:struct:hist_rec
history_	src/translator/history.h	/^  std::vector<Beam> history_;$/;"	m	class:marian::History
http_version	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::string method, path, query_string, http_version;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
i	src/3rd_party/spdlog/example/example.cpp	/^    int i;$/;"	m	struct:my_type	file:
i	src/3rd_party/spdlog/example/jni/example.cpp	/^    int i;$/;"	m	struct:my_type	file:
i	src/translator/history.h	/^    size_t i;$/;"	m	struct:marian::History::HypothesisCoord
i2f	src/functional/floats.h	/^    constexpr float i2f(float x) {$/;"	f	namespace:marian::functional
icoords	src/3rd_party/svd/defs_and_types.h	/^} icoords;$/;"	t	typeref:struct:__anon3
id	src/common/keywords.h	/^  unsigned id() const { return key; }$/;"	f	class:marian::keywords::Keyword
id2str_	src/data/vocab.h	/^  Id2Str id2str_;$/;"	m	class:marian::Vocab
id_	src/data/corpus.h	/^  size_t id_;$/;"	m	class:marian::data::SentenceTuple
ids_	src/data/corpus.h	/^  std::vector<size_t> ids_;$/;"	m	class:marian::data::Corpus
ifstream_	src/common/file_stream.h	/^  boost::filesystem::ifstream ifstream_;$/;"	m	class:InputFileStream
in_terminal	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline bool in_terminal(FILE* file)$/;"	f	namespace:spdlog::details::os
increaseEdges	src/graph/node.h	/^  virtual void increaseEdges(size_t edges = 1) { edges_ += edges; };$/;"	f	class:marian::Node
increaseEpoch	src/training/scheduler.h	/^  void increaseEpoch() {$/;"	f	class:marian::Scheduler
increment	src/data/corpus.cpp	/^void CorpusIterator::increment() {$/;"	f	class:marian::data::CorpusIterator
increment	src/data/text_input.cpp	/^void TextIterator::increment() {$/;"	f	class:marian::data::TextIterator
increment_until_defined	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  MapIter increment_until_defined(MapIter it) {$/;"	f	class:YAML::detail::node_iterator_base
indeces	src/data/filter.h	/^  std::vector<Word>& indeces() { return indeces_; }$/;"	f	class:marian::FilterInfo
indeces_	src/data/filter.h	/^  std::vector<Word> indeces_;$/;"	m	class:marian::FilterInfo
indent	src/3rd_party/yaml-cpp/emitterstate.h	/^    std::size_t indent;$/;"	m	struct:YAML::EmitterState::Group
indent	src/3rd_party/yaml-cpp/scanscalar.h	/^  int indent;         \/\/ what level of indentation should be eaten and ignored?$/;"	m	struct:YAML::ScanScalarParams
index	src/functional/operands.h	/^      static constexpr auto index = N;$/;"	m	struct:marian::functional::Var
index	src/gpu/shape.h	/^  __HDI__ int index(const Array<int, N>& d) const {$/;"	f	struct:marian::gpu::ConstantShape
indices	src/data/corpus.h	/^  std::vector<Word>& indices() { return indices_; }$/;"	f	class:marian::data::SubBatch
indices	src/training/sparse_tensor.h	/^  int* indices() { return indices_; }$/;"	f	class:marian::SparseTensorBase
indices_	src/data/corpus.h	/^  std::vector<Word> indices_;$/;"	m	class:marian::data::SubBatch
indices_	src/graph/node_operators_unary.h	/^  std::vector<size_t> indices_;$/;"	m	struct:marian::ColsNodeOp
indices_	src/graph/node_operators_unary.h	/^  std::vector<size_t> indices_;$/;"	m	struct:marian::RowsNodeOp
indices_	src/graph/node_operators_unary.h	/^  std::vector<size_t> indices_;$/;"	m	struct:marian::SelectNodeOp
indices_	src/training/sparse_tensor.h	/^  int* indices_;$/;"	m	class:marian::SparseTensorBase
info	scripts/contrib/fix_hard.py	/^   info = info.replace("layers-dec", "dec-depth")$/;"	v
info	scripts/contrib/fix_hard.py	/^   info = info.replace("layers-enc", "enc-depth")$/;"	v
info	scripts/contrib/fix_hard.py	/^   info = m[k].tobytes()$/;"	v
info	src/3rd_party/spdlog/common.h	/^    info = 2,$/;"	e	enum:spdlog::level::__anon38
info	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::info()$/;"	f	class:spdlog::logger
info	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::info(const T& msg)$/;"	f	class:spdlog::logger
info	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::info(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
info	src/3rd_party/spdlog/include/spdlog/common.h	/^    info = 2,$/;"	e	enum:spdlog::level::__anon40
info	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::info(const T& msg)$/;"	f	class:spdlog::logger
info	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::info(const char* fmt, const Arg1 &arg1, const Args&... args)$/;"	f	class:spdlog::logger
info	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::info(const wchar_t* fmt, const Args&... args)$/;"	f	class:spdlog::logger
info_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::info_if(const bool flag, const T& msg)$/;"	f	class:spdlog::logger
info_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::info_if(const bool flag, const char* fmt, const Arg1 &arg1, const Args&... args)$/;"	f	class:spdlog::logger
info_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::info_if(const bool flag, const wchar_t* fmt, const Args&... args)$/;"	f	class:spdlog::logger
information_continue	src/3rd_party/simple-websocket-server/status_code.hpp	/^    information_continue = 100,$/;"	m	class:SimpleWeb::StatusCode
information_processing	src/3rd_party/simple-websocket-server/status_code.hpp	/^    information_processing,$/;"	m	class:SimpleWeb::StatusCode
information_switching_protocols	src/3rd_party/simple-websocket-server/status_code.hpp	/^    information_switching_protocols,$/;"	m	class:SimpleWeb::StatusCode
init	src/3rd_party/spdlog/bench/boost-bench-mt.cpp	/^void init()$/;"	f
init	src/3rd_party/spdlog/bench/boost-bench.cpp	/^void init()$/;"	f
init	src/3rd_party/spdlog/details/format.cc	/^FMT_FUNC void fmt::SystemError::init($/;"	f	class:fmt::SystemError
init	src/3rd_party/spdlog/details/format.cc	/^FMT_FUNC void fmt::WindowsError::init($/;"	f	class:fmt::WindowsError
init	src/3rd_party/spdlog/details/format.cc	/^void fmt::internal::ArgMap<Char>::init(const ArgList &args)$/;"	f	class:fmt::internal::ArgMap
init	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^FMT_FUNC void fmt::SystemError::init($/;"	f	class:fmt::SystemError
init	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^FMT_FUNC void fmt::WindowsError::init($/;"	f	class:fmt::WindowsError
init	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^void fmt::internal::ArgMap<Char>::init(const ArgList &args) {$/;"	f	class:fmt::internal::ArgMap
init	src/graph/node.h	/^  virtual void init(){};$/;"	f	class:marian::Node
init	src/graph/parameters.h	/^  void init(size_t device) {$/;"	f	class:marian::Parameters
init	src/python/marian.cpp	/^void init(const std::string& argopts) {$/;"	f
init	src/python/mariannmt.cpp	/^void init(const std::string& argopts) {$/;"	f
init	src/translator/scorers.h	/^  virtual void init(Ptr<ExpressionGraph> graph) {$/;"	f	class:marian::ScorerWrapper
init	src/translator/scorers.h	/^  virtual void init(Ptr<ExpressionGraph> graph) {}$/;"	f	class:marian::Scorer
init	src/translator/translator.h	/^  void init() {$/;"	f	class:marian::TranslateServiceMultiGPU
init_	src/graph/node_operators.h	/^  std::function<void(Tensor&)> init_;$/;"	m	struct:marian::ParamNode
init_	src/graph/node_operators.h	/^  std::function<void(Tensor)> init_;$/;"	m	struct:marian::ConstantNode
init_dependent	src/graph/chainable.h	/^  virtual void init_dependent() {}$/;"	f	struct:marian::Chainable
init_dependent	src/graph/node_operators_unary.h	/^  void init_dependent() { reshapee_->init_dependent(); }$/;"	f	class:marian::ReshapeNodeOp
init_dependent	src/graph/node_operators_unary.h	/^  void init_dependent() { stepNode_->init_dependent(); }$/;"	f	class:marian::StepNodeOp
initialize	src/common/config.h	/^  void initialize(int argc,$/;"	f	class:marian::Config
initialized_	src/graph/node_operators.h	/^  bool initialized_;$/;"	m	struct:marian::ConstantNode
initialized_	src/graph/node_operators.h	/^  bool initialized_;$/;"	m	struct:marian::ParamNode
inits	src/layers/param_initializers.h	/^namespace inits {$/;"	n	namespace:marian
inputs	src/data/dataset.h	/^  const std::vector<Input>& inputs() const { return inputs_; }$/;"	f	class:marian::data::DataBatch
inputs	src/data/dataset.h	/^  std::vector<Input>& inputs() { return inputs_; }$/;"	f	class:marian::data::DataBatch
inputs_	src/data/dataset.h	/^  std::vector<Input> inputs_;$/;"	m	class:marian::data::DataBatch
inputs_	src/rnn/constructors.h	/^  std::vector<std::function<Expr(Ptr<rnn::RNN>)>> inputs_;$/;"	m	class:marian::rnn::CellFactory
inputs_	src/rnn/types.h	/^  std::vector<Ptr<CellInput>> inputs_;$/;"	m	class:marian::rnn::MultiCellInput
insert	src/3rd_party/yaml-cpp/node/detail/node.h	/^  void insert(node& key, node& value, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node
insert	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void insert(node& key, node& value, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_ref
insert	src/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::insert(node& key, node& value, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_data
insert	src/tensors/memory_piece.h	/^  void insert(T* ptr, size_t num) {$/;"	f	class:marian::MemoryPiece
insertGap	src/tensors/allocator.h	/^  void insertGap(Gap gap, bool consolidate = true) {$/;"	f	class:marian::Allocator
insert_map_pair	src/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::insert_map_pair(node& key, node& value) {$/;"	f	class:YAML::detail::node_data
instance	src/3rd_party/spdlog/details/registry.h	/^    static registry_t<Mutex>& instance()$/;"	f	class:spdlog::details::registry_t
instance	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    static registry_t<Mutex>& instance()$/;"	f	class:spdlog::details::registry_t
instance	src/3rd_party/spdlog/include/spdlog/sinks/stdout_sinks.h	/^    static std::shared_ptr<MyType> instance()$/;"	f	class:spdlog::sinks::SPDLOG_FINAL
instance	src/3rd_party/spdlog/sinks/stdout_sinks.h	/^    static std::shared_ptr<MyType> instance()$/;"	f	class:spdlog::sinks::stderr_sink
instance	src/3rd_party/spdlog/sinks/stdout_sinks.h	/^    static std::shared_ptr<MyType> instance()$/;"	f	class:spdlog::sinks::stdout_sink
int_type	src/3rd_party/spdlog/details/format.h	/^    typedef typename std::basic_streambuf<Char>::int_type int_type;$/;"	t	class:fmt::FormatBuf
int_type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.h	/^    typedef typename std::basic_streambuf<Char>::int_type int_type;$/;"	t	class:fmt::internal::FormatBuf
int_value	src/3rd_party/spdlog/details/format.h	/^        int int_value;$/;"	m	union:fmt::internal::Value::__anon21
int_value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        int int_value;$/;"	m	union:fmt::internal::Value::__anon59
internal	src/3rd_party/spdlog/details/format.cc	/^	namespace internal {$/;"	n	namespace:fmt	file:
internal	src/3rd_party/spdlog/details/format.h	/^namespace internal$/;"	n	namespace:fmt
internal	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^namespace internal {$/;"	n	namespace:fmt	file:
internal	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^namespace internal$/;"	n	namespace:fmt
internal	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.h	/^namespace internal$/;"	n	namespace:fmt
internal_io_service	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    bool internal_io_service = false;$/;"	m	class:SimpleWeb::SocketServerBase
intmax_t	src/3rd_party/spdlog/details/format.h	/^typedef __int64          intmax_t;$/;"	t
intmax_t	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef __int64          intmax_t;$/;"	t
inverse_	src/models/experimental/s2s_symmetric.h	/^  Ptr<EncDec> inverse_;$/;"	m	class:marian::EncoderDecoderSymmetric
invoke	src/3rd_party/catch.hpp	/^    virtual void invoke() const {$/;"	f	class:Catch::MethodTestCase
invoke	src/3rd_party/spdlog/tests/catch.hpp	/^    virtual void invoke() const {$/;"	f	class:Catch::MethodTestCase
io_service	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    std::shared_ptr<asio::io_service> io_service;$/;"	m	class:SimpleWeb::SocketServerBase
is	src/3rd_party/yaml-cpp/node/detail/node.h	/^  bool is(const node& rhs) const { return m_pRef == rhs.m_pRef; }$/;"	f	class:YAML::detail::node
is	src/3rd_party/yaml-cpp/node/impl.h	/^inline bool Node::is(const Node& rhs) const {$/;"	f	class:YAML::Node
is	src/layers/constructors.h	/^  inline bool is() {$/;"	f	struct:marian::mlp::LayerFactory
is	src/rnn/constructors.h	/^  inline bool is() {$/;"	f	struct:marian::rnn::StackableFactory
is	src/rnn/types.h	/^  inline bool is() {$/;"	f	class:marian::rnn::Stackable
isBinaryExpression	src/3rd_party/catch.hpp	/^        virtual bool isBinaryExpression() const {$/;"	f	struct:Catch::DecomposedExpression
isDefault	src/3rd_party/yaml-cpp/directives.h	/^  bool isDefault;$/;"	m	struct:YAML::Version
isEven_	src/graph/node_operators_unary.h	/^    bool isEven_;$/;"	m	class:marian::PoolingWithMaskingOp
isFalseTest	src/3rd_party/catch.hpp	/^    inline bool isFalseTest( int flags )                { return ( flags & ResultDisposition::FalseTest ) != 0; }$/;"	f	namespace:Catch
isFalseTest	src/3rd_party/spdlog/tests/catch.hpp	/^    inline bool isFalseTest( int flags )                { return ( flags & ResultDisposition::FalseTest ) != 0; }$/;"	f	namespace:Catch
isJustInfo	src/3rd_party/catch.hpp	/^    inline bool isJustInfo( int flags ) {$/;"	f	namespace:Catch
isJustInfo	src/3rd_party/spdlog/tests/catch.hpp	/^    inline bool isJustInfo( int flags ) {$/;"	f	namespace:Catch
isMap	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^    bool isMap() const { return pPrevKeyNode != &sequenceMarker; }$/;"	f	struct:YAML::GraphBuilderAdapter::ContainerFrame
isNodeValid	src/3rd_party/yaml-cpp/node/convert.h	/^  static bool isNodeValid(const Node& node) {$/;"	f	struct:YAML::convert
isOk	src/3rd_party/catch.hpp	/^    inline bool isOk( ResultWas::OfType resultType ) {$/;"	f	namespace:Catch
isOk	src/3rd_party/spdlog/tests/catch.hpp	/^    inline bool isOk( ResultWas::OfType resultType ) {$/;"	f	namespace:Catch
isPow2	src/3rd_party/reduce_all.h	/^bool isPow2(unsigned int x)$/;"	f	namespace:marian
isTrue	src/3rd_party/catch.hpp	/^    inline bool isTrue( bool value ){ return value; }$/;"	f	namespace:Catch
isTrue	src/3rd_party/spdlog/tests/catch.hpp	/^    inline bool isTrue( bool value ){ return value; }$/;"	f	namespace:Catch
is_color_terminal	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline bool is_color_terminal()$/;"	f	namespace:spdlog::details::os
is_defined	src/3rd_party/yaml-cpp/node/detail/node.h	/^  bool is_defined() const { return m_pRef->is_defined(); }$/;"	f	class:YAML::detail::node
is_defined	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  bool is_defined() const { return m_isDefined; }$/;"	f	class:YAML::detail::node_data
is_defined	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  bool is_defined(MapIter it) const {$/;"	f	class:YAML::detail::node_iterator_base
is_defined	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  bool is_defined() const { return m_pData->is_defined(); }$/;"	f	class:YAML::detail::node_ref
is_enabled	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline bool spdlog::details::line_logger::is_enabled() const$/;"	f	class:spdlog::details::line_logger
is_negative	src/3rd_party/spdlog/details/format.h	/^    static bool is_negative(T value)$/;"	f	struct:fmt::internal::SignChecker
is_negative	src/3rd_party/spdlog/details/format.h	/^    static bool is_negative(T)$/;"	f	struct:fmt::internal::SignChecker
is_negative	src/3rd_party/spdlog/details/format.h	/^inline bool is_negative(T value)$/;"	f	namespace:fmt::internal
is_negative	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static bool is_negative(T value)$/;"	f	struct:fmt::internal::SignChecker
is_negative	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static bool is_negative(T)$/;"	f	struct:fmt::internal::SignChecker
is_negative	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline bool is_negative(T value)$/;"	f	namespace:fmt::internal
is_null	src/3rd_party/yaml-cpp/mark.h	/^  bool is_null() const { return pos == -1 && line == -1 && column == -1; }$/;"	f	struct:YAML::Mark
is_numeric	src/3rd_party/yaml-cpp/traits.h	/^struct is_numeric {$/;"	s	namespace:YAML
is_numeric	src/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<__int64> {$/;"	s	namespace:YAML
is_numeric	src/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<char> {$/;"	s	namespace:YAML
is_numeric	src/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<double> {$/;"	s	namespace:YAML
is_numeric	src/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<float> {$/;"	s	namespace:YAML
is_numeric	src/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<int> {$/;"	s	namespace:YAML
is_numeric	src/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<long double> {$/;"	s	namespace:YAML
is_numeric	src/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<long int> {$/;"	s	namespace:YAML
is_numeric	src/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<long long> {$/;"	s	namespace:YAML
is_numeric	src/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<short int> {$/;"	s	namespace:YAML
is_numeric	src/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<unsigned __int64> {$/;"	s	namespace:YAML
is_numeric	src/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<unsigned char> {$/;"	s	namespace:YAML
is_numeric	src/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<unsigned int> {$/;"	s	namespace:YAML
is_numeric	src/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<unsigned long int> {$/;"	s	namespace:YAML
is_numeric	src/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<unsigned long long> {$/;"	s	namespace:YAML
is_numeric	src/3rd_party/yaml-cpp/traits.h	/^struct is_numeric<unsigned short int> {$/;"	s	namespace:YAML
is_one_of	src/common/keywords.h	/^struct is_one_of {$/;"	s	namespace:marian::keywords
is_one_of	src/common/keywords.h	/^struct is_one_of<F, S, T...> {$/;"	s	namespace:marian::keywords
is_same	src/3rd_party/spdlog/details/format.cc	/^		struct is_same$/;"	s	namespace:fmt::__anon34	file:
is_same	src/3rd_party/spdlog/details/format.cc	/^		struct is_same<T, T>$/;"	s	namespace:fmt::__anon34	file:
is_same	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^struct is_same {$/;"	s	namespace:fmt::__anon71	file:
is_same	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^struct is_same<T, T> {$/;"	s	namespace:fmt::__anon71	file:
isinf	src/3rd_party/spdlog/details/format.h	/^inline DummyInt isinf(...)$/;"	f	namespace:fmt::internal
isinf	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline DummyInt isinf(...)$/;"	f	namespace:fmt::internal
isinfinity	src/3rd_party/spdlog/details/format.h	/^    static bool isinfinity(T x)$/;"	f	class:std::numeric_limits
isinfinity	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static bool isinfinity(T x)$/;"	f	class:std::numeric_limits
isnan	src/3rd_party/spdlog/details/format.h	/^inline DummyInt isnan(...)$/;"	f	namespace:fmt::internal
isnan	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline DummyInt isnan(...)$/;"	f	namespace:fmt::internal
isnegative	src/3rd_party/spdlog/details/format.h	/^    static bool isnegative(double x)$/;"	f	class:std::numeric_limits
isnegative	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static bool isnegative(double x)$/;"	f	class:std::numeric_limits
isnotanumber	src/3rd_party/spdlog/details/format.h	/^    static bool isnotanumber(T x)$/;"	f	class:std::numeric_limits
isnotanumber	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static bool isnotanumber(T x)$/;"	f	class:std::numeric_limits
istream_	src/common/file_stream.h	/^  io::filtering_istream istream_;$/;"	m	class:InputFileStream
iterator	src/3rd_party/yaml-cpp/node/detail/iterator_fwd.h	/^typedef detail::iterator_base<detail::iterator_value> iterator;$/;"	t	namespace:YAML
iterator	src/3rd_party/yaml-cpp/node/node.h	/^  typedef YAML::iterator iterator;$/;"	t	class:YAML::Node
iterator	src/data/dataset.h	/^  typedef Data::iterator iterator;$/;"	t	class:marian::data::Input
iterator	src/data/dataset.h	/^  typedef Iterator iterator;$/;"	t	class:marian::data::DatasetBase
iterator_base	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^  explicit iterator_base(base_type rhs, shared_memory_holder pMemory)$/;"	f	class:YAML::detail::iterator_base
iterator_base	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^  iterator_base() : m_iterator(), m_pMemory() {}$/;"	f	class:YAML::detail::iterator_base
iterator_base	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^  iterator_base(const iterator_base<W>& rhs,$/;"	f	class:YAML::detail::iterator_base
iterator_base	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^class iterator_base : public std::iterator<std::forward_iterator_tag, V,$/;"	c	namespace:YAML::detail
iterator_type	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^struct iterator_type {$/;"	s	namespace:YAML::detail
iterator_value	src/3rd_party/yaml-cpp/node/iterator.h	/^  explicit iterator_value(const Node& key, const Node& value)$/;"	f	struct:YAML::detail::iterator_value
iterator_value	src/3rd_party/yaml-cpp/node/iterator.h	/^  explicit iterator_value(const Node& rhs)$/;"	f	struct:YAML::detail::iterator_value
iterator_value	src/3rd_party/yaml-cpp/node/iterator.h	/^  iterator_value() {}$/;"	f	struct:YAML::detail::iterator_value
iterator_value	src/3rd_party/yaml-cpp/node/iterator.h	/^struct iterator_value : public Node, std::pair<Node, Node> {$/;"	s	namespace:YAML::detail
j	src/translator/history.h	/^    size_t j;$/;"	m	struct:marian::History::HypothesisCoord
json	scripts/contrib/inject_model_params.py	/^import json$/;"	i
json	scripts/embeddings/prepare_corpus.py	/^import json$/;"	i
json	scripts/embeddings/process_word2vec.py	/^import json$/;"	i
keepBest	src/examples/mnist/validator.h	/^  virtual void keepBest(const std::vector<Ptr<ExpressionGraph>>& graphs) {$/;"	f	class:marian::AccuracyValidator
keepBest	src/training/validator.h	/^  virtual void keepBest(const std::vector<Ptr<ExpressionGraph>>& graphs) {$/;"	f	class:marian::Validator
keepGoing	src/training/scheduler.h	/^  bool keepGoing() {$/;"	f	class:marian::Scheduler
kernelDesc_	src/kernels/cudnn_wrappers.h	/^  cudnnFilterDescriptor_t kernelDesc_;$/;"	m	class:marian::ConvolutionWrapper
kernelHeight_	src/layers/convolution.h	/^  int kernelHeight_;$/;"	m	class:marian::CharConvPooling
kernelNums_	src/layers/convolution.h	/^  std::vector<int> kernelNums_;$/;"	m	class:marian::CharConvPooling
kernelWidths_	src/layers/convolution.h	/^  std::vector<int> kernelWidths_;$/;"	m	class:marian::CharConvPooling
key	src/3rd_party/yaml-cpp/exceptions.h	/^  T key;$/;"	m	class:YAML::TypedKeyNotFound
keywords	src/common/definitions.h	/^namespace keywords {$/;"	n	namespace:marian
keywords	src/common/keywords.h	/^namespace keywords {$/;"	n	namespace:marian
kv	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typedef std::pair<V*, V*> kv;$/;"	t	struct:YAML::detail::node_iterator_value
kv_pair	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  typedef std::pair<node*, node*> kv_pair;$/;"	t	class:YAML::detail::node_data
kv_pairs	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  typedef std::list<kv_pair> kv_pairs;$/;"	t	class:YAML::detail::node_data
label	src/graph/node.h	/^  virtual const std::string label() {$/;"	f	class:marian::Node
labels	src/data/dataset.h	/^  Data& labels() { return inputs_.back().data(); }$/;"	f	class:marian::data::DataBatch
lastBest_	src/training/validator.h	/^  float lastBest_;$/;"	m	class:marian::ValidatorBase
lastCellStates	src/rnn/rnn.h	/^  States lastCellStates() { return last_; }$/;"	f	class:marian::rnn::SingleLayerRNN
lastCellStates	src/rnn/rnn.h	/^  States lastCellStates() {$/;"	f	class:marian::rnn::RNN
lastInputs_	src/rnn/types.h	/^  std::vector<Expr> lastInputs_;$/;"	m	class:marian::rnn::StackedCell
lastN	src/translator/nth_element.h	/^  size_t lastN;$/;"	m	class:marian::NthElement
last_	src/rnn/rnn.h	/^  States last_;$/;"	m	class:marian::rnn::SingleLayerRNN
layerFactories_	src/rnn/constructors.h	/^  std::vector<Ptr<CellFactory>> layerFactories_;$/;"	m	class:marian::rnn::RNNFactory
layerNorm_	src/rnn/attention.h	/^  bool layerNorm_;$/;"	m	class:marian::rnn::GlobalAttention
layerNorm_	src/rnn/cells.h	/^  bool layerNorm_;$/;"	m	class:marian::rnn::FastLSTM
layerNorm_	src/rnn/cells.h	/^  bool layerNorm_;$/;"	m	class:marian::rnn::GRU
layerNorm_	src/rnn/cells.h	/^  bool layerNorm_;$/;"	m	class:marian::rnn::GRUNematus
layerNorm_	src/rnn/cells.h	/^  bool layerNorm_;$/;"	m	class:marian::rnn::Tanh
layers_	src/layers/constructors.h	/^  std::vector<Ptr<Layer>> layers_;$/;"	m	class:marian::mlp::MLP
layers_	src/layers/constructors.h	/^  std::vector<Ptr<LayerFactory>> layers_;$/;"	m	class:marian::mlp::MLPFactory
lazyInputs_	src/rnn/types.h	/^  std::vector<std::function<Expr(Ptr<rnn::RNN>)>> lazyInputs_;$/;"	m	class:marian::rnn::Cell
lcoords	src/3rd_party/svd/defs_and_types.h	/^} lcoords;$/;"	t	typeref:struct:__anon2
leadingSpaces	src/3rd_party/yaml-cpp/scanscalar.h	/^  bool leadingSpaces;$/;"	m	struct:YAML::ScanScalarParams
length	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      size_t length;$/;"	m	class:SimpleWeb::SocketServerBase::Message
level	src/3rd_party/spdlog/common.h	/^namespace level$/;"	n	namespace:spdlog
level	src/3rd_party/spdlog/details/async_log_helper.h	/^        level::level_enum level;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
level	src/3rd_party/spdlog/details/log_msg.h	/^    level::level_enum level;$/;"	m	struct:spdlog::details::log_msg
level	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::level::level_enum spdlog::logger::level() const$/;"	f	class:spdlog::logger
level	src/3rd_party/spdlog/include/spdlog/common.h	/^namespace level$/;"	n	namespace:spdlog
level	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^        level::level_enum level;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
level	src/3rd_party/spdlog/include/spdlog/details/log_msg.h	/^    level::level_enum level;$/;"	m	struct:spdlog::details::log_msg
level	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline spdlog::level::level_enum spdlog::logger::level() const$/;"	f	class:spdlog::logger
level	src/3rd_party/spdlog/include/spdlog/sinks/sink.h	/^inline level::level_enum sink::level() const$/;"	f	class:spdlog::sinks::sink
level_enum	src/3rd_party/spdlog/common.h	/^} level_enum;$/;"	t	namespace:spdlog::level	typeref:enum:spdlog::level::__anon38
level_enum	src/3rd_party/spdlog/include/spdlog/common.h	/^} level_enum;$/;"	t	namespace:spdlog::level	typeref:enum:spdlog::level::__anon40
level_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class level_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
level_formatter	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class level_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
lexProbs_	src/models/experimental/lex_probs.h	/^  static thread_local Ptr<sparse::CSR> lexProbs_;$/;"	m	class:marian::LexProbs
lf_	src/models/experimental/lex_probs.h	/^  static thread_local Ptr<sparse::CSR> lf_;$/;"	m	class:marian::LexProbs
lhs	src/3rd_party/spdlog/tests/catch.hpp	/^            std::string lhs, rhs, op;$/;"	m	struct:Catch::ResultBuilder::ExprComponents
lims	src/3rd_party/svd/defs_and_types.h	/^} lims;$/;"	t	typeref:struct:__anon4
line	src/3rd_party/catch.hpp	/^        std::size_t line;$/;"	m	struct:Catch::SourceLineInfo
line	src/3rd_party/spdlog/tests/catch.hpp	/^        std::size_t line;$/;"	m	struct:Catch::SourceLineInfo
line	src/3rd_party/yaml-cpp/mark.h	/^  int line, column;$/;"	m	struct:YAML::Mark
line	src/3rd_party/yaml-cpp/stream.h	/^  int line() const { return m_mark.line; }$/;"	f	class:YAML::Stream
lineInfo	src/3rd_party/catch.hpp	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::AssertionInfo
lineInfo	src/3rd_party/spdlog/tests/catch.hpp	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::AssertionInfo
lineNo_	src/translator/history.h	/^  size_t lineNo_;$/;"	m	class:marian::History
line_logger	src/3rd_party/spdlog/details/line_logger_fwd.h	/^class line_logger$/;"	c	namespace:spdlog::details
line_logger	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger::line_logger(line_logger&& other) :$/;"	f	class:spdlog::details::line_logger
line_logger	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger::line_logger(logger* callback_logger, level::level_enum msg_level, bool enabled):$/;"	f	class:spdlog::details::line_logger
linear	src/layers/generic.h	/^enum struct act : int { linear, tanh, logit, ReLU, LeakyReLU, PReLU, swish };$/;"	m	struct:marian::mlp::act
load	src/3rd_party/spdlog/details/null_mutex.h	/^    int load(std::memory_order) const$/;"	f	struct:spdlog::details::null_atomic_int
load	src/3rd_party/spdlog/include/spdlog/details/null_mutex.h	/^    int load(std::memory_order) const$/;"	f	struct:spdlog::details::null_atomic_int
load	src/data/filter.h	/^  void load(const std::string& fname) {$/;"	f	class:marian::Filter
load	src/data/vocab.cpp	/^int Vocab::load(const std::string& vocabPath, int max) {$/;"	f	class:marian::Vocab
load	src/examples/mnist/model.h	/^  void load(Ptr<ExpressionGraph> graph, const std::string& name) {$/;"	f	class:marian::models::MnistFeedForwardNet
load	src/graph/expression_graph.h	/^  void load(const std::string& name, bool markReloaded) {$/;"	f	class:marian::ExpressionGraph
load	src/models/amun.h	/^  void load(Ptr<ExpressionGraph> graph, const std::string& name) {$/;"	f	class:marian::Amun
load	src/models/encdec.h	/^  virtual void load(Ptr<ExpressionGraph> graph, const std::string& name) {$/;"	f	class:marian::EncoderDecoder
load	src/models/nematus.h	/^  void load(Ptr<ExpressionGraph> graph, const std::string& name) {$/;"	f	class:marian::Nematus
load	src/rescorer/rescorer.h	/^  void load(Ptr<ExpressionGraph> graph, const std::string& modelFile) {$/;"	f	class:marian::Rescorer
load	src/training/graph_group_async.h	/^  void load() {$/;"	f	class:marian::AsyncGraphGroup
load	src/training/graph_group_async_drop.h	/^  void load() {$/;"	f	class:marian::AsyncGraphGroup
load	src/training/graph_group_singleton.h	/^  void load() {$/;"	f	class:marian::SingletonGraph
load	src/training/graph_group_sync.h	/^  void load() {$/;"	f	class:marian::SyncGraphGroup
load	src/training/scheduler.h	/^  void load(const std::string& name) {$/;"	f	class:marian::Scheduler
loadData	src/examples/mnist/dataset.h	/^  void loadData() {$/;"	f	class:marian::data::MNISTData
loadModelParameters	src/common/config.cpp	/^void Config::loadModelParameters(const std::string& name) {$/;"	f	class:marian::Config
loadOrCreate	src/data/vocab.cpp	/^int Vocab::loadOrCreate(const std::string& vocabPath,$/;"	f	class:marian::Vocab
load_the_npy_file	src/3rd_party/cnpy/cnpy.cpp	/^cnpy::NpyArray load_the_npy_file(FILE* fp) {$/;"	f
load_yaml	scripts/embeddings/prepare_corpus.py	/^def load_yaml(lines):$/;"	f
load_yaml	scripts/embeddings/process_word2vec.py	/^def load_yaml(lines):$/;"	f
local	src/3rd_party/spdlog/include/spdlog/common.h	/^    local, \/\/ log localtime$/;"	m	class:spdlog::pattern_time_type
localSparseDelta	src/training/graph_group_async_drop.h	/^  std::vector<std::vector<SparseTensor>> localSparseDelta;$/;"	m	class:marian::AsyncGraphGroup
localSparseGrads_	src/training/graph_group_async_drop.h	/^  std::vector<SparseTensor> localSparseGrads_;$/;"	m	class:marian::AsyncGraphGroup
localVersionNumbers	src/training/graph_group_async_drop.h	/^  std::vector<std::vector<int>> localVersionNumbers;$/;"	m	class:marian::AsyncGraphGroup
locale_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    locale_t locale_;$/;"	m	class:fmt::Locale
locale_t	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    typedef _locale_t locale_t;$/;"	t	class:fmt::Locale
localtime	src/3rd_party/spdlog/details/os.h	/^inline std::tm localtime()$/;"	f	namespace:spdlog::details::os
localtime	src/3rd_party/spdlog/details/os.h	/^inline std::tm localtime(const std::time_t &time_tt)$/;"	f	namespace:spdlog::details::os
localtime	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline std::tm localtime()$/;"	f	namespace:spdlog::details::os
localtime	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline std::tm localtime(const std::time_t &time_tt)$/;"	f	namespace:spdlog::details::os
lock	src/3rd_party/spdlog/details/null_mutex.h	/^    void lock() {}$/;"	f	struct:spdlog::details::null_mutex
lock	src/3rd_party/spdlog/include/spdlog/details/null_mutex.h	/^    void lock() {}$/;"	f	struct:spdlog::details::null_mutex
log	src/3rd_party/spdlog/details/async_log_helper.h	/^        log,$/;"	m	class:spdlog::details::async_log_helper::async_msg_type
log	src/3rd_party/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::log(const details::log_msg& msg)$/;"	f	class:spdlog::details::async_log_helper
log	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^        log,$/;"	m	class:spdlog::details::async_log_helper::async_msg_type
log	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::log(const details::log_msg& msg)$/;"	f	class:spdlog::details::async_log_helper
log	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const T& msg)$/;"	f	class:spdlog::logger
log	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
log	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const char* msg)$/;"	f	class:spdlog::logger
log	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const wchar_t* fmt, const Args&... args)$/;"	f	class:spdlog::logger
log	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const wchar_t* msg)$/;"	f	class:spdlog::logger
log	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^inline void ansicolor_sink::log(const details::log_msg& msg)$/;"	f	class:spdlog::sinks::ansicolor_sink
log	src/common/config.cpp	/^void Config::log() {$/;"	f	class:marian::Config
log_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log_if(const bool flag, level::level_enum lvl, const T& msg)$/;"	f	class:spdlog::logger
log_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log_if(const bool flag, level::level_enum lvl, const char* msg)$/;"	f	class:spdlog::logger
log_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log_if(const bool flag, level::level_enum lvl, const wchar_t* fmt, const Args&... args)$/;"	f	class:spdlog::logger
log_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log_if(const bool flag, level::level_enum lvl, const wchar_t* msg)$/;"	f	class:spdlog::logger
log_info	src/3rd_party/spdlog/tests/format.cpp	/^std::string log_info(const T& what, spdlog::level::level_enum logger_level = spdlog::level::info)$/;"	f
log_msg	src/3rd_party/spdlog/details/log_msg.h	/^    log_msg(const log_msg& other) :$/;"	f	struct:spdlog::details::log_msg
log_msg	src/3rd_party/spdlog/details/log_msg.h	/^    log_msg(level::level_enum l):$/;"	f	struct:spdlog::details::log_msg
log_msg	src/3rd_party/spdlog/details/log_msg.h	/^    log_msg(log_msg&& other) :$/;"	f	struct:spdlog::details::log_msg
log_msg	src/3rd_party/spdlog/details/log_msg.h	/^struct log_msg$/;"	s	namespace:spdlog::details
log_msg	src/3rd_party/spdlog/include/spdlog/details/log_msg.h	/^    log_msg(const std::string *loggers_name, level::level_enum lvl) :$/;"	f	struct:spdlog::details::log_msg
log_msg	src/3rd_party/spdlog/include/spdlog/details/log_msg.h	/^struct log_msg$/;"	s	namespace:spdlog::details
logger	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(const std::string& logger_name, const It& begin, const It& end) :$/;"	f	class:spdlog::logger
logger	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(const std::string& logger_name, sinks_init_list sinks_list) :$/;"	f	class:spdlog::logger
logger	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(const std::string& logger_name, spdlog::sink_ptr single_sink) :$/;"	f	class:spdlog::logger
logger	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(const std::string& logger_name, const It& begin, const It& end):$/;"	f	class:spdlog::logger
logger	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(const std::string& logger_name, sinks_init_list sinks_list):$/;"	f	class:spdlog::logger
logger	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(const std::string& logger_name, spdlog::sink_ptr single_sink):$/;"	f	class:spdlog::logger
logger	src/3rd_party/spdlog/include/spdlog/logger.h	/^class logger$/;"	c	namespace:spdlog
logger	src/3rd_party/spdlog/logger.h	/^class logger$/;"	c	namespace:spdlog
logger_name	src/3rd_party/spdlog/details/async_log_helper.h	/^        std::string logger_name;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
logger_name	src/3rd_party/spdlog/details/log_msg.h	/^    std::string logger_name;$/;"	m	struct:spdlog::details::log_msg
logger_name	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^        std::string logger_name;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
logger_name	src/3rd_party/spdlog/include/spdlog/details/log_msg.h	/^    const std::string *logger_name;$/;"	m	struct:spdlog::details::log_msg
logit	src/layers/generic.h	/^enum struct act : int { linear, tanh, logit, ReLU, LeakyReLU, PReLU, swish };$/;"	m	struct:marian::mlp::act
longKey	src/3rd_party/yaml-cpp/emitterstate.h	/^    bool longKey;$/;"	m	struct:YAML::EmitterState::Group
long_double_value	src/3rd_party/spdlog/details/format.h	/^        long double long_double_value;$/;"	m	union:fmt::internal::Value::__anon21
long_double_value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        long double long_double_value;$/;"	m	union:fmt::internal::Value::__anon59
long_long_value	src/3rd_party/spdlog/details/format.h	/^        LongLong long_long_value;$/;"	m	union:fmt::internal::Value::__anon21
long_long_value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        LongLong long_long_value;$/;"	m	union:fmt::internal::Value::__anon59
lookup	src/models/encdec.h	/^  virtual std::tuple<Expr, Expr> lookup(Expr srcEmbeddings,$/;"	f	class:marian::EncoderBase
loops	src/gpu/tmp.h	/^__HDI__ float loops(Functor functor,$/;"	f	namespace:marian::gpu
m	scripts/contrib/fix_hard.py	/^m = np.load(sys.argv[1])$/;"	v
m_a	src/3rd_party/yaml-cpp/regex_yaml.h	/^  char m_a, m_z;$/;"	m	class:YAML::RegEx
m_anchorByIdentity	src/3rd_party/yaml-cpp/nodeevents.h	/^    AnchorByIdentity m_anchorByIdentity;$/;"	m	class:YAML::NodeEvents::AliasManager
m_anchors	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  AnchorMap m_anchors;$/;"	m	class:YAML::GraphBuilderAdapter
m_anchors	src/3rd_party/yaml-cpp/nodebuilder.h	/^  Nodes m_anchors;$/;"	m	class:YAML::NodeBuilder
m_anchors	src/3rd_party/yaml-cpp/singledocparser.h	/^  Anchors m_anchors;$/;"	m	class:YAML::SingleDocParser
m_assertionInfo	src/3rd_party/catch.hpp	/^        AssertionInfo m_assertionInfo;$/;"	m	class:Catch::ResultBuilder
m_assertionInfo	src/3rd_party/spdlog/tests/catch.hpp	/^        AssertionInfo m_assertionInfo;$/;"	m	class:Catch::ResultBuilder
m_boolCaseFmt	src/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_boolCaseFmt;$/;"	m	class:YAML::EmitterState
m_boolFmt	src/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_boolFmt;$/;"	m	class:YAML::EmitterState
m_boolLengthFmt	src/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_boolLengthFmt;$/;"	m	class:YAML::EmitterState
m_buffer	src/3rd_party/yaml-cpp/ostream_wrapper.h	/^  mutable std::vector<char> m_buffer;$/;"	m	class:YAML::ostream_wrapper
m_builder	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  GraphBuilderInterface& m_builder;$/;"	m	class:YAML::GraphBuilderAdapter
m_cachedToString	src/3rd_party/catch.hpp	/^            mutable std::string m_cachedToString;$/;"	m	class:Catch::Matchers::Impl::MatcherUntypedBase
m_canBeJSONFlow	src/3rd_party/yaml-cpp/scanner.h	/^  bool m_canBeJSONFlow;$/;"	m	class:YAML::Scanner
m_charSet	src/3rd_party/yaml-cpp/stream.h	/^  CharacterSet m_charSet;$/;"	m	class:YAML::Stream
m_charset	src/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_charset;$/;"	m	class:YAML::EmitterState
m_col	src/3rd_party/yaml-cpp/ostream_wrapper.h	/^  std::size_t m_row, m_col;$/;"	m	class:YAML::ostream_wrapper
m_comment	src/3rd_party/yaml-cpp/ostream_wrapper.h	/^  bool m_comment;$/;"	m	class:YAML::ostream_wrapper
m_containers	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  ContainerStack m_containers;$/;"	m	class:YAML::GraphBuilderAdapter
m_count	src/3rd_party/catch.hpp	/^        std::size_t m_count;$/;"	m	struct:Catch::pluralise
m_count	src/3rd_party/spdlog/tests/catch.hpp	/^        std::size_t m_count;$/;"	m	struct:Catch::pluralise
m_curAnchor	src/3rd_party/yaml-cpp/nodeevents.h	/^    anchor_t m_curAnchor;$/;"	m	class:YAML::NodeEvents::AliasManager
m_curAnchor	src/3rd_party/yaml-cpp/singledocparser.h	/^  anchor_t m_curAnchor;$/;"	m	class:YAML::SingleDocParser
m_curIndent	src/3rd_party/yaml-cpp/emitterstate.h	/^  std::size_t m_curIndent;$/;"	m	class:YAML::EmitterState
m_data	src/3rd_party/catch.hpp	/^        AssertionResultData m_data;$/;"	m	class:Catch::ResultBuilder
m_data	src/3rd_party/spdlog/tests/catch.hpp	/^        AssertionResultData m_data;$/;"	m	class:Catch::ResultBuilder
m_data	src/3rd_party/yaml-cpp/binary.h	/^  std::vector<unsigned char> m_data;$/;"	m	class:YAML::Binary
m_data	src/3rd_party/yaml-cpp/contrib/anchordict.h	/^  std::vector<T> m_data;$/;"	m	class:YAML::AnchorDict
m_data	src/3rd_party/yaml-cpp/ptr_vector.h	/^  std::vector<std::unique_ptr<T>> m_data;$/;"	m	class:YAML::ptr_vector
m_dependencies	src/3rd_party/yaml-cpp/node/detail/node.h	/^  nodes m_dependencies;$/;"	m	class:YAML::detail::node
m_directives	src/3rd_party/yaml-cpp/singledocparser.h	/^  const Directives& m_directives;$/;"	m	class:YAML::SingleDocParser
m_docCount	src/3rd_party/yaml-cpp/emitterstate.h	/^  std::size_t m_docCount;$/;"	m	class:YAML::EmitterState
m_doublePrecision	src/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<std::size_t> m_doublePrecision;$/;"	m	class:YAML::EmitterState
m_emitter	src/3rd_party/yaml-cpp/emitfromevents.h	/^  Emitter& m_emitter;$/;"	m	class:YAML::EmitFromEvents
m_endedStream	src/3rd_party/yaml-cpp/scanner.h	/^  bool m_startedStream, m_endedStream;$/;"	m	class:YAML::Scanner
m_exprComponents	src/3rd_party/spdlog/tests/catch.hpp	/^        } m_exprComponents;$/;"	m	class:Catch::ResultBuilder	typeref:struct:Catch::ResultBuilder::ExprComponents
m_floatPrecision	src/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<std::size_t> m_floatPrecision;$/;"	m	class:YAML::EmitterState
m_flows	src/3rd_party/yaml-cpp/scanner.h	/^  std::stack<FLOW_MARKER> m_flows;$/;"	m	class:YAML::Scanner
m_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class m_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
m_globalModifiedSettings	src/3rd_party/yaml-cpp/emitterstate.h	/^  SettingChanges m_globalModifiedSettings;$/;"	m	class:YAML::EmitterState
m_groups	src/3rd_party/yaml-cpp/emitterstate.h	/^  std::vector<std::unique_ptr<Group>> m_groups;$/;"	m	class:YAML::EmitterState
m_guardException	src/3rd_party/catch.hpp	/^        bool m_guardException;$/;"	m	class:Catch::ResultBuilder
m_hasAnchor	src/3rd_party/yaml-cpp/emitterstate.h	/^  bool m_hasAnchor;$/;"	m	class:YAML::EmitterState
m_hasNonContent	src/3rd_party/yaml-cpp/emitterstate.h	/^  bool m_hasNonContent;$/;"	m	class:YAML::EmitterState
m_hasTag	src/3rd_party/yaml-cpp/emitterstate.h	/^  bool m_hasTag;$/;"	m	class:YAML::EmitterState
m_impl	src/3rd_party/yaml-cpp/contrib/graphbuilder.h	/^  Impl &m_impl;$/;"	m	class:YAML::GraphBuilder
m_indent	src/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<std::size_t> m_indent;$/;"	m	class:YAML::EmitterState
m_indentRefs	src/3rd_party/yaml-cpp/scanner.h	/^  ptr_vector<IndentMarker> m_indentRefs;  \/\/ for "garbage collection"$/;"	m	class:YAML::Scanner
m_indents	src/3rd_party/yaml-cpp/scanner.h	/^  std::stack<IndentMarker *> m_indents;$/;"	m	class:YAML::Scanner
m_info	src/3rd_party/catch.hpp	/^        AssertionInfo m_info;$/;"	m	class:Catch::AssertionResult
m_info	src/3rd_party/spdlog/tests/catch.hpp	/^        AssertionInfo m_info;$/;"	m	class:Catch::AssertionResult
m_input	src/3rd_party/yaml-cpp/stream.h	/^  std::istream& m_input;$/;"	m	class:YAML::Stream
m_intFmt	src/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_intFmt;$/;"	m	class:YAML::EmitterState
m_isDefined	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  bool m_isDefined;$/;"	m	class:YAML::detail::node_data
m_isGood	src/3rd_party/yaml-cpp/emitterstate.h	/^  bool m_isGood;$/;"	m	class:YAML::EmitterState
m_isValid	src/3rd_party/yaml-cpp/node/node.h	/^  bool m_isValid;$/;"	m	class:YAML::Node
m_iterator	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^  base_type m_iterator;$/;"	m	class:YAML::detail::iterator_base
m_keys	src/3rd_party/yaml-cpp/nodebuilder.h	/^  std::vector<PushedKey> m_keys;$/;"	m	class:YAML::NodeBuilder
m_label	src/3rd_party/catch.hpp	/^        std::string m_label;$/;"	m	struct:Catch::pluralise
m_label	src/3rd_party/spdlog/tests/catch.hpp	/^        std::string m_label;$/;"	m	struct:Catch::pluralise
m_lastError	src/3rd_party/yaml-cpp/emitterstate.h	/^  std::string m_lastError;$/;"	m	class:YAML::EmitterState
m_lineInfo	src/3rd_party/catch.hpp	/^        SourceLineInfo m_lineInfo;$/;"	m	class:Catch::NotImplementedException
m_lineInfo	src/3rd_party/spdlog/tests/catch.hpp	/^        SourceLineInfo m_lineInfo;$/;"	m	class:Catch::NotImplementedException
m_map	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  node_map m_map;$/;"	m	class:YAML::detail::node_data
m_mapDepth	src/3rd_party/yaml-cpp/nodebuilder.h	/^  std::size_t m_mapDepth;$/;"	m	class:YAML::NodeBuilder
m_mapEnd	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  MapIter m_mapIt, m_mapEnd;$/;"	m	class:YAML::detail::node_iterator_base
m_mapFmt	src/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_mapFmt;$/;"	m	class:YAML::EmitterState
m_mapIt	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  MapIter m_mapIt, m_mapEnd;$/;"	m	class:YAML::detail::node_iterator_base
m_mapKeyFmt	src/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_mapKeyFmt;$/;"	m	class:YAML::EmitterState
m_mark	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  Mark m_mark;$/;"	m	class:YAML::detail::node_data
m_mark	src/3rd_party/yaml-cpp/stream.h	/^  Mark m_mark;$/;"	m	class:YAML::Stream
m_matchers	src/3rd_party/catch.hpp	/^            std::vector<MatcherBase<ArgT> const*> m_matchers;$/;"	m	struct:Catch::Matchers::Impl::MatchAllOf
m_matchers	src/3rd_party/catch.hpp	/^            std::vector<MatcherBase<ArgT> const*> m_matchers;$/;"	m	struct:Catch::Matchers::Impl::MatchAnyOf
m_method	src/3rd_party/catch.hpp	/^    void (C::*m_method)();$/;"	m	class:Catch::MethodTestCase
m_method	src/3rd_party/spdlog/tests/catch.hpp	/^    void (C::*m_method)();$/;"	m	class:Catch::MethodTestCase
m_modifiedSettings	src/3rd_party/yaml-cpp/emitterstate.h	/^  SettingChanges m_modifiedSettings;$/;"	m	class:YAML::EmitterState
m_nPrefetchedAvailable	src/3rd_party/yaml-cpp/stream.h	/^  mutable size_t m_nPrefetchedAvailable;$/;"	m	class:YAML::Stream
m_nPrefetchedUsed	src/3rd_party/yaml-cpp/stream.h	/^  mutable size_t m_nPrefetchedUsed;$/;"	m	class:YAML::Stream
m_nodes	src/3rd_party/yaml-cpp/node/detail/memory.h	/^  Nodes m_nodes;$/;"	m	class:YAML::detail::memory
m_offset	src/3rd_party/yaml-cpp/streamcharsource.h	/^  std::size_t m_offset;$/;"	m	class:YAML::StreamCharSource
m_offset	src/3rd_party/yaml-cpp/stringsource.h	/^  std::size_t m_offset;$/;"	m	class:YAML::StringCharSource
m_oldSetting	src/3rd_party/yaml-cpp/setting.h	/^  Setting<T> m_oldSetting;$/;"	m	class:YAML::SettingChange
m_op	src/3rd_party/yaml-cpp/regex_yaml.h	/^  REGEX_OP m_op;$/;"	m	class:YAML::RegEx
m_p	src/3rd_party/catch.hpp	/^        T* m_p;$/;"	m	class:Catch::Ptr
m_p	src/3rd_party/spdlog/tests/catch.hpp	/^        T* m_p;$/;"	m	class:Catch::Ptr
m_pCollectionStack	src/3rd_party/yaml-cpp/singledocparser.h	/^  std::unique_ptr<CollectionStack> m_pCollectionStack;$/;"	m	class:YAML::SingleDocParser
m_pCurSetting	src/3rd_party/yaml-cpp/setting.h	/^  Setting<T>* m_pCurSetting;$/;"	m	class:YAML::SettingChange
m_pData	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  shared_node_data m_pData;$/;"	m	class:YAML::detail::node_ref
m_pDirectives	src/3rd_party/yaml-cpp/parser.h	/^  std::unique_ptr<Directives> m_pDirectives;$/;"	m	class:YAML::Parser
m_pKeyNode	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  void* m_pKeyNode;$/;"	m	class:YAML::GraphBuilderAdapter
m_pMemory	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^  shared_memory_holder m_pMemory;$/;"	m	class:YAML::detail::iterator_base
m_pMemory	src/3rd_party/yaml-cpp/node/detail/memory.h	/^  shared_memory m_pMemory;$/;"	m	class:YAML::detail::memory_holder
m_pMemory	src/3rd_party/yaml-cpp/node/node.h	/^  mutable detail::shared_memory_holder m_pMemory;$/;"	m	class:YAML::Node
m_pMemory	src/3rd_party/yaml-cpp/nodebuilder.h	/^  detail::shared_memory_holder m_pMemory;$/;"	m	class:YAML::NodeBuilder
m_pMemory	src/3rd_party/yaml-cpp/nodeevents.h	/^  detail::shared_memory_holder m_pMemory;$/;"	m	class:YAML::NodeEvents
m_pNode	src/3rd_party/yaml-cpp/node/node.h	/^  mutable detail::node* m_pNode;$/;"	m	class:YAML::Node
m_pPrefetched	src/3rd_party/yaml-cpp/stream.h	/^  unsigned char* const m_pPrefetched;$/;"	m	class:YAML::Stream
m_pRef	src/3rd_party/yaml-cpp/node/detail/node.h	/^  shared_node_ref m_pRef;$/;"	m	class:YAML::detail::node
m_pRoot	src/3rd_party/yaml-cpp/nodebuilder.h	/^  detail::node* m_pRoot;$/;"	m	class:YAML::NodeBuilder
m_pRootNode	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^  void* m_pRootNode;$/;"	m	class:YAML::GraphBuilderAdapter
m_pScanner	src/3rd_party/yaml-cpp/parser.h	/^  std::unique_ptr<Scanner> m_pScanner;$/;"	m	class:YAML::Parser
m_pState	src/3rd_party/yaml-cpp/emitter.h	/^  std::unique_ptr<EmitterState> m_pState;$/;"	m	class:YAML::Emitter
m_pStream	src/3rd_party/yaml-cpp/ostream_wrapper.h	/^  std::ostream* const m_pStream;$/;"	m	class:YAML::ostream_wrapper::std
m_params	src/3rd_party/yaml-cpp/regex_yaml.h	/^  std::vector<RegEx> m_params;$/;"	m	class:YAML::RegEx
m_pos	src/3rd_party/yaml-cpp/ostream_wrapper.h	/^  std::size_t m_pos;$/;"	m	class:YAML::ostream_wrapper
m_postCommentIndent	src/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<std::size_t> m_preCommentIndent, m_postCommentIndent;$/;"	m	class:YAML::EmitterState
m_preCommentIndent	src/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<std::size_t> m_preCommentIndent, m_postCommentIndent;$/;"	m	class:YAML::EmitterState
m_rc	src/3rd_party/catch.hpp	/^        mutable unsigned int m_rc;$/;"	m	struct:Catch::SharedImpl
m_rc	src/3rd_party/spdlog/tests/catch.hpp	/^        mutable unsigned int m_rc;$/;"	m	struct:Catch::SharedImpl
m_readahead	src/3rd_party/yaml-cpp/stream.h	/^  mutable std::deque<char> m_readahead;$/;"	m	class:YAML::Stream
m_ref	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^    V m_ref;$/;"	m	struct:YAML::detail::iterator_base::proxy
m_ref	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^    node_iterator_value<V> m_ref;$/;"	m	struct:YAML::detail::node_iterator_base::proxy
m_refCount	src/3rd_party/yaml-cpp/nodeevents.h	/^  RefCount m_refCount;$/;"	m	class:YAML::NodeEvents
m_resultData	src/3rd_party/catch.hpp	/^        AssertionResultData m_resultData;$/;"	m	class:Catch::AssertionResult
m_resultData	src/3rd_party/spdlog/tests/catch.hpp	/^        AssertionResultData m_resultData;$/;"	m	class:Catch::AssertionResult
m_root	src/3rd_party/yaml-cpp/nodeevents.h	/^  detail::node* m_root;$/;"	m	class:YAML::NodeEvents
m_row	src/3rd_party/yaml-cpp/ostream_wrapper.h	/^  std::size_t m_row, m_col;$/;"	m	class:YAML::ostream_wrapper
m_scalar	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  std::string m_scalar;$/;"	m	class:YAML::detail::node_data
m_scanner	src/3rd_party/yaml-cpp/singledocparser.h	/^  Scanner& m_scanner;$/;"	m	class:YAML::SingleDocParser
m_seqFmt	src/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_seqFmt;$/;"	m	class:YAML::EmitterState
m_seqIt	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  SeqIter m_seqIt;$/;"	m	class:YAML::detail::node_iterator_base
m_seqSize	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  mutable std::size_t m_seqSize;$/;"	m	class:YAML::detail::node_data
m_sequence	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  node_seq m_sequence;$/;"	m	class:YAML::detail::node_data
m_settingChanges	src/3rd_party/yaml-cpp/setting.h	/^  setting_changes m_settingChanges;$/;"	m	class:YAML::SettingChanges
m_shouldDebugBreak	src/3rd_party/catch.hpp	/^        bool m_shouldDebugBreak;$/;"	m	class:Catch::ResultBuilder
m_shouldDebugBreak	src/3rd_party/spdlog/tests/catch.hpp	/^        bool m_shouldDebugBreak;$/;"	m	class:Catch::ResultBuilder
m_shouldThrow	src/3rd_party/catch.hpp	/^        bool m_shouldThrow;$/;"	m	class:Catch::ResultBuilder
m_shouldThrow	src/3rd_party/spdlog/tests/catch.hpp	/^        bool m_shouldThrow;$/;"	m	class:Catch::ResultBuilder
m_simpleKeyAllowed	src/3rd_party/yaml-cpp/scanner.h	/^  bool m_simpleKeyAllowed;$/;"	m	class:YAML::Scanner
m_simpleKeys	src/3rd_party/yaml-cpp/scanner.h	/^  std::stack<SimpleKey> m_simpleKeys;$/;"	m	class:YAML::Scanner
m_size	src/3rd_party/yaml-cpp/stringsource.h	/^  std::size_t m_size;$/;"	m	class:YAML::StringCharSource
m_stack	src/3rd_party/yaml-cpp/nodebuilder.h	/^  Nodes m_stack;$/;"	m	class:YAML::NodeBuilder
m_startedStream	src/3rd_party/yaml-cpp/scanner.h	/^  bool m_startedStream, m_endedStream;$/;"	m	class:YAML::Scanner
m_stateStack	src/3rd_party/yaml-cpp/emitfromevents.h	/^  std::stack<State::value> m_stateStack;$/;"	m	class:YAML::EmitFromEvents
m_str	src/3rd_party/yaml-cpp/stringsource.h	/^  const char* m_str;$/;"	m	class:YAML::StringCharSource
m_strFmt	src/3rd_party/yaml-cpp/emitterstate.h	/^  Setting<EMITTER_MANIP> m_strFmt;$/;"	m	class:YAML::EmitterState
m_stream	src/3rd_party/catch.hpp	/^        CopyableStream m_stream;$/;"	m	class:Catch::ResultBuilder
m_stream	src/3rd_party/spdlog/tests/catch.hpp	/^        CopyableStream m_stream;$/;"	m	class:Catch::ResultBuilder
m_stream	src/3rd_party/yaml-cpp/emitter.h	/^  ostream_wrapper m_stream;$/;"	m	class:YAML::Emitter
m_stream	src/3rd_party/yaml-cpp/streamcharsource.h	/^  const Stream& m_stream;$/;"	m	class:YAML::StreamCharSource
m_style	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  EmitterStyle::value m_style;$/;"	m	class:YAML::detail::node_data
m_tag	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  std::string m_tag;$/;"	m	class:YAML::detail::node_data
m_tokens	src/3rd_party/yaml-cpp/scanner.h	/^  std::queue<Token> m_tokens;$/;"	m	class:YAML::Scanner
m_type	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  NodeType::value m_type;$/;"	m	class:YAML::detail::node_data
m_type	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typename iterator_type::value m_type;$/;"	m	class:YAML::detail::node_iterator_base
m_undefinedPairs	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  mutable kv_pairs m_undefinedPairs;$/;"	m	class:YAML::detail::node_data
m_underlyingMatcher	src/3rd_party/catch.hpp	/^            MatcherBase<ArgT> const& m_underlyingMatcher;$/;"	m	struct:Catch::Matchers::Impl::MatchNotOf
m_unownedData	src/3rd_party/yaml-cpp/binary.h	/^  const unsigned char *m_unownedData;$/;"	m	class:YAML::Binary
m_unownedSize	src/3rd_party/yaml-cpp/binary.h	/^  std::size_t m_unownedSize;$/;"	m	class:YAML::Binary
m_value	src/3rd_party/yaml-cpp/setting.h	/^  T m_value;$/;"	m	class:YAML::Setting
m_what	src/3rd_party/catch.hpp	/^        std::string m_what;$/;"	m	class:Catch::NotImplementedException
m_what	src/3rd_party/spdlog/tests/catch.hpp	/^        std::string m_what;$/;"	m	class:Catch::NotImplementedException
m_z	src/3rd_party/yaml-cpp/regex_yaml.h	/^  char m_a, m_z;$/;"	m	class:YAML::RegEx
macroName	src/3rd_party/catch.hpp	/^        std::string macroName;$/;"	m	struct:Catch::AssertionInfo
macroName	src/3rd_party/spdlog/tests/catch.hpp	/^        std::string macroName;$/;"	m	struct:Catch::AssertionInfo
magenta	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string magenta = "\\033[35m";$/;"	m	class:spdlog::sinks::ansicolor_sink
magenta	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string magenta    = "\\033[35m";$/;"	m	class:spdlog::sinks::ansicolor_sink
main	scripts/contrib/inject_model_params.py	/^def main():$/;"	f
main	scripts/embeddings/export_embeddings.py	/^def main():$/;"	f
main	scripts/embeddings/prepare_corpus.py	/^def main():$/;"	f
main	scripts/embeddings/process_word2vec.py	/^def main():$/;"	f
main	src/3rd_party/spdlog/bench/boost-bench-mt.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/3rd_party/spdlog/bench/boost-bench.cpp	/^int main(int argc, char* [])$/;"	f
main	src/3rd_party/spdlog/bench/easylogging-bench-mt.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/3rd_party/spdlog/bench/easylogging-bench.cpp	/^int main(int, char* [])$/;"	f
main	src/3rd_party/spdlog/bench/g2log-async.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/3rd_party/spdlog/bench/glog-bench-mt.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/3rd_party/spdlog/bench/glog-bench.cpp	/^int main(int, char* argv[])$/;"	f
main	src/3rd_party/spdlog/bench/latency/g3log-crush.cpp	/^int main(int argc, char** argv)$/;"	f
main	src/3rd_party/spdlog/bench/latency/g3log-latency.cpp	/^int main(int argc, char** argv)$/;"	f
main	src/3rd_party/spdlog/bench/latency/spdlog-latency.cpp	/^int main(int argc, char** argv)$/;"	f
main	src/3rd_party/spdlog/bench/spdlog-async.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/3rd_party/spdlog/bench/spdlog-bench-mt.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/3rd_party/spdlog/bench/spdlog-bench.cpp	/^int main(int, char* [])$/;"	f
main	src/3rd_party/spdlog/bench/spdlog-null-async.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/3rd_party/spdlog/example/bench.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/3rd_party/spdlog/example/example.cpp	/^int main(int, char*[])$/;"	f
main	src/3rd_party/spdlog/example/jni/example.cpp	/^int main(int, char*[])$/;"	f
main	src/3rd_party/spdlog/example/multisink.cpp	/^int main(int, char*[])$/;"	f
main	src/command/marian.cpp	/^int main(int argc, char** argv) {$/;"	f
main	src/command/marian_decoder.cpp	/^int main(int argc, char** argv) {$/;"	f
main	src/command/marian_scorer.cpp	/^int main(int argc, char** argv) {$/;"	f
main	src/command/marian_server.cpp	/^int main(int argc, char **argv) {$/;"	f
main	src/command/marian_vocab.cpp	/^int main(int argc, char** argv) {$/;"	f
main	src/examples/iris/iris.cpp	/^int main() {$/;"	f
main	src/examples/mnist/mnist_ffnn.cpp	/^int main(int argc, char** argv) {$/;"	f
main	src/python/marian_test.cpp	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/allocator_test.cpp	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/logger_test.cpp	/^int main() {$/;"	f
main	src/tools/align2steps.cpp	/^int main(int argc, char** argv) {$/;"	f
major	src/3rd_party/yaml-cpp/directives.h	/^  int major, minor;$/;"	m	struct:YAML::Version
make	src/3rd_party/spdlog/details/format.h	/^    static Arg make(const T &value)$/;"	f	struct:fmt::ArgArray
make	src/3rd_party/spdlog/details/format.h	/^static Value make(const T &value)$/;"	f	namespace:fmt::internal
make	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static Arg make(const T &value)$/;"	f	struct:fmt::ArgArray
make	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^static Value make(const T &value)$/;"	f	namespace:fmt::internal
makeSafe	src/3rd_party/catch.hpp	/^        static type makeSafe( bool value ) {$/;"	f	class:Catch::SafeBool
makeSafe	src/3rd_party/spdlog/tests/catch.hpp	/^        static type makeSafe( bool value ) {$/;"	f	class:Catch::SafeBool
make_ptr	src/3rd_party/spdlog/details/format.h	/^inline T *make_ptr(T *ptr, std::size_t)$/;"	f	namespace:fmt::internal
make_ptr	src/3rd_party/spdlog/details/format.h	/^inline stdext::checked_array_iterator<T*> make_ptr(T *ptr, std::size_t size)$/;"	f	namespace:fmt::internal
make_ptr	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline T *make_ptr(T *ptr, std::size_t)$/;"	f	namespace:fmt::internal
make_ptr	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline stdext::checked_array_iterator<T*> make_ptr(T *ptr, std::size_t size)$/;"	f	namespace:fmt::internal
make_type	src/3rd_party/spdlog/details/format.h	/^inline uint64_t make_type()$/;"	f	namespace:fmt::internal
make_type	src/3rd_party/spdlog/details/format.h	/^inline uint64_t make_type(const Arg &first, const Args & ... tail)$/;"	f	namespace:fmt
make_type	src/3rd_party/spdlog/details/format.h	/^inline uint64_t make_type(const T &arg)$/;"	f	namespace:fmt::internal
make_type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline uint64_t make_type()$/;"	f	namespace:fmt::internal
make_type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline uint64_t make_type(const Arg &first, const Args & ... tail)$/;"	f	namespace:fmt
make_type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline uint64_t make_type(const T &arg)$/;"	f	namespace:fmt::internal
mantissa	src/functional/floats.h	/^      constexpr unsigned mantissa(float x, int exp) {$/;"	f	namespace:marian::functional::float2unsigned
map	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typedef node_map::const_iterator map;$/;"	t	struct:YAML::detail::node_iterator_type
map	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typedef node_map::iterator map;$/;"	t	struct:YAML::detail::node_iterator_type
map_	src/3rd_party/spdlog/details/format.h	/^    MapType map_;$/;"	m	class:fmt::internal::ArgMap
map_	src/3rd_party/spdlog/details/format.h	/^    internal::ArgMap<Char> map_;$/;"	m	class:fmt::BasicFormatter
map_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    MapType map_;$/;"	m	class:fmt::internal::ArgMap
map_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    internal::ArgMap<Char> map_;$/;"	m	class:fmt::BasicFormatter
map_	src/data/batch_stats.h	/^  std::map<std::vector<size_t>, size_t> map_;$/;"	m	class:marian::data::BatchStats
map_type	src/3rd_party/cnpy/cnpy.cpp	/^char cnpy::map_type(const std::type_info& t)$/;"	f	class:cnpy
mappedContext_	src/rnn/attention.h	/^  Expr mappedContext_;$/;"	m	class:marian::rnn::GlobalAttention
mappedIndeces	src/data/filter.h	/^  std::vector<Word>& mappedIndeces() { return mappedIndeces_; }$/;"	f	class:marian::FilterInfo
mappedIndeces_	src/data/filter.h	/^  std::vector<Word> mappedIndeces_;$/;"	m	class:marian::FilterInfo
marian	src/3rd_party/reduce_all.h	/^namespace marian {$/;"	n
marian	src/3rd_party/threadpool.h	/^namespace marian {$/;"	n
marian	src/3rd_party/threadpool2.h	/^namespace marian {$/;"	n
marian	src/common/config.cpp	/^namespace marian {$/;"	n	file:
marian	src/common/config.h	/^namespace marian {$/;"	n
marian	src/common/config_parser.cpp	/^namespace marian {$/;"	n	file:
marian	src/common/config_parser.h	/^namespace marian {$/;"	n
marian	src/common/definitions.h	/^namespace marian {$/;"	n
marian	src/common/keywords.h	/^namespace marian {$/;"	n
marian	src/common/logging.h	/^namespace marian {$/;"	n
marian	src/common/options.h	/^namespace marian {$/;"	n
marian	src/common/shape.h	/^namespace marian {$/;"	n
marian	src/data/batch.h	/^namespace marian {$/;"	n
marian	src/data/batch_generator.h	/^namespace marian {$/;"	n
marian	src/data/batch_stats.h	/^namespace marian {$/;"	n
marian	src/data/corpus.cpp	/^namespace marian {$/;"	n	file:
marian	src/data/corpus.h	/^namespace marian {$/;"	n
marian	src/data/dataset.h	/^namespace marian {$/;"	n
marian	src/data/filter.h	/^namespace marian {$/;"	n
marian	src/data/text_input.cpp	/^namespace marian {$/;"	n	file:
marian	src/data/text_input.h	/^namespace marian {$/;"	n
marian	src/data/types.h	/^namespace marian {$/;"	n
marian	src/data/vocab.cpp	/^namespace marian {$/;"	n	file:
marian	src/data/vocab.h	/^namespace marian {$/;"	n
marian	src/examples/mnist/dataset.h	/^namespace marian {$/;"	n
marian	src/examples/mnist/model.h	/^namespace marian {$/;"	n
marian	src/examples/mnist/model_lenet.h	/^namespace marian {$/;"	n
marian	src/examples/mnist/training.h	/^namespace marian {$/;"	n
marian	src/examples/mnist/validator.h	/^namespace marian {$/;"	n
marian	src/functional/floats.h	/^namespace marian {$/;"	n
marian	src/functional/functional.h	/^namespace marian {$/;"	n
marian	src/functional/operands.h	/^namespace marian {$/;"	n
marian	src/functional/predicates.h	/^namespace marian {$/;"	n
marian	src/gpu/array.h	/^namespace marian {$/;"	n
marian	src/gpu/shape.h	/^namespace marian {$/;"	n
marian	src/gpu/tensor.h	/^namespace marian {$/;"	n
marian	src/gpu/tmp.h	/^namespace marian {$/;"	n
marian	src/graph/backend.h	/^namespace marian {$/;"	n
marian	src/graph/backend_gpu.h	/^namespace marian {$/;"	n
marian	src/graph/chainable.h	/^namespace marian {$/;"	n
marian	src/graph/expression_graph.h	/^namespace marian {$/;"	n
marian	src/graph/expression_operators.h	/^namespace marian {$/;"	n
marian	src/graph/node.h	/^namespace marian {$/;"	n
marian	src/graph/node_operators.h	/^namespace marian {$/;"	n
marian	src/graph/node_operators_binary.h	/^namespace marian {$/;"	n
marian	src/graph/node_operators_unary.h	/^namespace marian {$/;"	n
marian	src/graph/parameters.h	/^namespace marian {$/;"	n
marian	src/kernels/cudnn_wrappers.h	/^namespace marian {$/;"	n
marian	src/kernels/dropout.h	/^namespace marian {$/;"	n
marian	src/kernels/sparse.h	/^namespace marian {$/;"	n
marian	src/kernels/tensor_operators.h	/^namespace marian {$/;"	n
marian	src/layers/constructors.h	/^namespace marian {$/;"	n
marian	src/layers/convolution.h	/^namespace marian {$/;"	n
marian	src/layers/factory.h	/^namespace marian {$/;"	n
marian	src/layers/generic.cpp	/^namespace marian {$/;"	n	file:
marian	src/layers/generic.h	/^namespace marian {$/;"	n
marian	src/layers/guided_alignment.cpp	/^namespace marian {$/;"	n	file:
marian	src/layers/guided_alignment.h	/^namespace marian {$/;"	n
marian	src/layers/param_initializers.h	/^namespace marian {$/;"	n
marian	src/layers/word2vec_reader.h	/^namespace marian {$/;"	n
marian	src/models/amun.h	/^namespace marian {$/;"	n
marian	src/models/charS2S.h	/^namespace marian {$/;"	n
marian	src/models/encdec.h	/^namespace marian {$/;"	n
marian	src/models/experimental/lex_probs.h	/^namespace marian {$/;"	n
marian	src/models/experimental/pooling.h	/^namespace marian {$/;"	n
marian	src/models/experimental/s2s_rec.h	/^namespace marian {$/;"	n
marian	src/models/experimental/s2s_symmetric.h	/^namespace marian {$/;"	n
marian	src/models/hardatt.h	/^namespace marian {$/;"	n
marian	src/models/model_base.h	/^namespace marian {$/;"	n
marian	src/models/model_factory.cpp	/^namespace marian {$/;"	n	file:
marian	src/models/model_factory.h	/^namespace marian {$/;"	n
marian	src/models/model_task.h	/^namespace marian {$/;"	n
marian	src/models/nematus.h	/^namespace marian {$/;"	n
marian	src/models/s2s.h	/^namespace marian {$/;"	n
marian	src/models/states.h	/^namespace marian {$/;"	n
marian	src/models/transformer.h	/^namespace marian {$/;"	n
marian	src/optimizers/clippers.h	/^namespace marian {$/;"	n
marian	src/optimizers/optimizers.h	/^namespace marian {$/;"	n
marian	src/rescorer/rescorer.h	/^namespace marian {$/;"	n
marian	src/rescorer/score_collector.cpp	/^namespace marian {$/;"	n	file:
marian	src/rescorer/score_collector.h	/^namespace marian {$/;"	n
marian	src/rnn/attention.h	/^namespace marian {$/;"	n
marian	src/rnn/cells.h	/^namespace marian {$/;"	n
marian	src/rnn/constructors.h	/^namespace marian {$/;"	n
marian	src/rnn/rnn.h	/^namespace marian {$/;"	n
marian	src/rnn/types.h	/^namespace marian {$/;"	n
marian	src/tensors/allocator.h	/^namespace marian {$/;"	n
marian	src/tensors/device_gpu.h	/^namespace marian {$/;"	n
marian	src/tensors/memory_piece.h	/^namespace marian {$/;"	n
marian	src/tensors/tensor.h	/^namespace marian {$/;"	n
marian	src/tensors/tensor_allocator.h	/^namespace marian {$/;"	n
marian	src/tensors/tensor_cpu.h	/^namespace marian {$/;"	n
marian	src/training/dropper.h	/^namespace marian {$/;"	n
marian	src/training/graph_group.h	/^namespace marian {$/;"	n
marian	src/training/graph_group_async.h	/^namespace marian {$/;"	n
marian	src/training/graph_group_async_drop.h	/^namespace marian {$/;"	n
marian	src/training/graph_group_singleton.h	/^namespace marian {$/;"	n
marian	src/training/graph_group_sync.h	/^namespace marian {$/;"	n
marian	src/training/scheduler.h	/^namespace marian {$/;"	n
marian	src/training/sparse_tensor.h	/^namespace marian {$/;"	n
marian	src/training/training.h	/^namespace marian {$/;"	n
marian	src/training/training_state.h	/^namespace marian {$/;"	n
marian	src/training/validator.cpp	/^namespace marian {$/;"	n	file:
marian	src/training/validator.h	/^namespace marian {$/;"	n
marian	src/translator/beam_search.h	/^namespace marian {$/;"	n
marian	src/translator/helpers.h	/^namespace marian {$/;"	n
marian	src/translator/history.cpp	/^namespace marian {$/;"	n	file:
marian	src/translator/history.h	/^namespace marian {$/;"	n
marian	src/translator/hypothesis.h	/^namespace marian {$/;"	n
marian	src/translator/nth_element.h	/^namespace marian {$/;"	n
marian	src/translator/output_collector.cpp	/^namespace marian {$/;"	n	file:
marian	src/translator/output_collector.h	/^namespace marian {$/;"	n
marian	src/translator/printer.cpp	/^namespace marian {$/;"	n	file:
marian	src/translator/printer.h	/^namespace marian {$/;"	n
marian	src/translator/scorers.cpp	/^namespace marian {$/;"	n	file:
marian	src/translator/scorers.h	/^namespace marian {$/;"	n
marian	src/translator/translator.h	/^namespace marian {$/;"	n
mark	src/3rd_party/yaml-cpp/exceptions.h	/^  Mark mark;$/;"	m	class:YAML::Exception
mark	src/3rd_party/yaml-cpp/node/detail/node.h	/^  const Mark& mark() const { return m_pRef->mark(); }$/;"	f	class:YAML::detail::node
mark	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  const Mark& mark() const { return m_mark; }$/;"	f	class:YAML::detail::node_data
mark	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  const Mark& mark() const { return m_pData->mark(); }$/;"	f	class:YAML::detail::node_ref
mark	src/3rd_party/yaml-cpp/scanner.cpp	/^Mark Scanner::mark() const { return INPUT.mark(); }$/;"	f	class:YAML::Scanner
mark	src/3rd_party/yaml-cpp/scanner.h	/^    Mark mark;$/;"	m	struct:YAML::Scanner::SimpleKey
mark	src/3rd_party/yaml-cpp/stream.h	/^  const Mark mark() const { return m_mark; }$/;"	f	class:YAML::Stream
mark	src/3rd_party/yaml-cpp/token.h	/^  Mark mark;$/;"	m	struct:YAML::Token
mark_defined	src/3rd_party/yaml-cpp/node/detail/node.h	/^  void mark_defined() {$/;"	f	class:YAML::detail::node
mark_defined	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void mark_defined() { m_pData->mark_defined(); }$/;"	f	class:YAML::detail::node_ref
mark_defined	src/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::mark_defined() {$/;"	f	class:YAML::detail::node_data
marked_for_debug	src/graph/node.h	/^  virtual bool marked_for_debug() { return markedForDebug_; }$/;"	f	class:marian::Node
mask	src/data/corpus.h	/^  std::vector<float>& mask() { return mask_; }$/;"	f	class:marian::data::SubBatch
mask_	src/data/corpus.h	/^  std::vector<float> mask_;$/;"	m	class:marian::data::SubBatch
mask_	src/graph/node_operators_unary.h	/^    Expr mask_;$/;"	m	class:marian::PoolingWithMaskingOp
mask_	src/graph/node_operators_unary.h	/^  Expr mask_;$/;"	m	struct:marian::SoftmaxNodeOp
mask_	src/models/experimental/pooling.h	/^  Expr mask_;$/;"	m	class:marian::EncoderStatePooling
mask_	src/models/states.h	/^  Expr mask_;$/;"	m	class:marian::EncoderState
max	src/3rd_party/svd/defs_and_types.h	/^	float min, max;$/;"	m	struct:__anon4
maxId_	src/translator/output_collector.h	/^  long maxId_;$/;"	m	class:marian::StringCollector
maxLengthCrop_	src/data/corpus.h	/^  bool maxLengthCrop_;$/;"	m	class:marian::data::Corpus
maxLength_	src/data/corpus.h	/^  size_t maxLength_;$/;"	m	class:marian::data::Corpus
max_size_	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^    size_t const max_size_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
maxiBatchSize_	src/data/batch_generator.h	/^  size_t maxiBatchSize_;$/;"	m	class:marian::data::BatchGenerator
memory	src/3rd_party/yaml-cpp/node/detail/memory.h	/^class YAML_CPP_API memory {$/;"	c	namespace:YAML::detail
memory	src/tensors/allocator.h	/^  Ptr<MemoryPiece> memory() {$/;"	f	class:marian::Allocator
memory	src/tensors/tensor.h	/^  virtual Ptr<MemoryPiece> memory() { return memory_; }$/;"	f	class:marian::TensorBase
memory_	src/tensors/tensor.h	/^  Ptr<MemoryPiece> memory_;$/;"	m	class:marian::TensorBase
memory_holder	src/3rd_party/yaml-cpp/node/detail/memory.h	/^  memory_holder() : m_pMemory(new memory) {}$/;"	f	class:YAML::detail::memory_holder
memory_holder	src/3rd_party/yaml-cpp/node/detail/memory.h	/^class YAML_CPP_API memory_holder {$/;"	c	namespace:YAML::detail
merge	src/3rd_party/yaml-cpp/memory.cpp	/^void memory::merge(const memory& rhs) {$/;"	f	class:YAML::detail::memory
merge	src/3rd_party/yaml-cpp/memory.cpp	/^void memory_holder::merge(memory_holder& rhs) {$/;"	f	class:YAML::detail::memory_holder
merge	src/common/options.h	/^  void merge(Ptr<Config> config) { merge(config->get()); }$/;"	f	class:marian::Options
merge	src/common/options.h	/^  void merge(Ptr<Options> options) { merge(options->getOptions()); }$/;"	f	class:marian::Options
merge	src/common/options.h	/^  void merge(YAML::Node& node) {$/;"	f	class:marian::Options
message	src/3rd_party/catch.hpp	/^        std::string message;$/;"	m	struct:Catch::AssertionResultData
message	src/3rd_party/spdlog/tests/catch.hpp	/^        std::string message;$/;"	m	struct:Catch::AssertionResultData
message_stream	src/3rd_party/simple-websocket-server/server_ws.hpp	/^        std::shared_ptr<SendStream> message_stream;$/;"	m	class:SimpleWeb::SocketServerBase::Connection::SendData
method	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::string method, path, query_string, http_version;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
min	src/3rd_party/svd/defs_and_types.h	/^	float min, max;$/;"	m	struct:__anon4
minor	src/3rd_party/yaml-cpp/directives.h	/^  int major, minor;$/;"	m	struct:YAML::Version
mkstemp_and_unlink	src/common/file_stream.h	/^  int mkstemp_and_unlink(char* tmpl) {$/;"	f	class:TemporaryFile
mlp	src/layers/constructors.h	/^namespace mlp {$/;"	n	namespace:marian
mlp	src/layers/constructors.h	/^typedef Accumulator<MLPFactory> mlp;$/;"	t	namespace:marian::mlp
mlp	src/layers/generic.h	/^namespace mlp {$/;"	n	namespace:marian
mode_	src/common/config_parser.h	/^  ConfigMode mode_;$/;"	m	class:marian::ConfigParser
modelFeatures_	src/models/encdec.h	/^  std::vector<std::string> modelFeatures_;$/;"	m	class:marian::EncoderDecoder
model_	src/data/npz_converter.h	/^  cnpy::npz_t model_;$/;"	m	class:NpzConverter
models	src/examples/mnist/model.h	/^namespace models {$/;"	n	namespace:marian
models	src/examples/mnist/model_lenet.h	/^namespace models {$/;"	n	namespace:marian
models	src/models/model_base.h	/^namespace models {$/;"	n	namespace:marian
models	src/models/model_factory.cpp	/^namespace models {$/;"	n	namespace:marian	file:
models	src/models/model_factory.h	/^namespace models {$/;"	n	namespace:marian
models_	src/rescorer/rescorer.h	/^  std::vector<Ptr<Model>> models_;$/;"	m	class:marian::Rescore
modifiedSettings	src/3rd_party/yaml-cpp/emitterstate.h	/^    SettingChanges modifiedSettings;$/;"	m	struct:YAML::EmitterState::Group
months	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^static const months_array& months()$/;"	f	namespace:spdlog::details
move	src/3rd_party/simple-websocket-server/server_ws.hpp	/^            : header_stream(std::move(header_stream)), message_stream(std::move(message_stream)), callback(std::move(callback)) {}$/;"	f	class:SimpleWeb::SocketServerBase::Connection::SendData
move	src/3rd_party/spdlog/details/async_log_helper.h	/^                    msg_type(std::move(other.msg_type))$/;"	f	struct:spdlog::details::async_log_helper::async_msg
move	src/3rd_party/spdlog/details/format.h	/^    void move(MemoryBuffer &other)$/;"	f	class:fmt::internal::MemoryBuffer
move	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void move(MemoryBuffer &other)$/;"	f	class:fmt::internal::MemoryBuffer
move	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^inline fmt::BufferedFile &move(fmt::BufferedFile &f)$/;"	f	namespace:std
move	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^inline fmt::File &move(fmt::File &f)$/;"	f	namespace:std
mpmc_bounded_queue	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    mpmc_bounded_queue(size_t buffer_size)$/;"	f	class:spdlog::details::mpmc_bounded_queue
mpmc_bounded_queue	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^class mpmc_bounded_queue$/;"	c	namespace:spdlog::details
mpmc_bounded_queue	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^    mpmc_bounded_queue(size_t buffer_size)$/;"	f	class:spdlog::details::mpmc_bounded_queue
mpmc_bounded_queue	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^class mpmc_bounded_queue$/;"	c	namespace:spdlog::details
msg	src/3rd_party/yaml-cpp/exceptions.h	/^  std::string msg;$/;"	m	class:YAML::Exception
msg_id	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^                    msg_id(other.msg_id)$/;"	f	struct:spdlog::details::async_log_helper::async_msg
msg_id	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^        size_t msg_id;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
msg_id	src/3rd_party/spdlog/include/spdlog/details/log_msg.h	/^    size_t msg_id;$/;"	m	struct:spdlog::details::log_msg
msg_type	src/3rd_party/spdlog/details/async_log_helper.h	/^        async_msg_type msg_type;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
msg_type	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^        async_msg_type msg_type;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
msvc_sink	src/3rd_party/spdlog/include/spdlog/sinks/msvc_sink.h	/^    explicit msvc_sink()$/;"	f	class:spdlog::sinks::msvc_sink
msvc_sink	src/3rd_party/spdlog/include/spdlog/sinks/msvc_sink.h	/^class msvc_sink : public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
msvc_sink	src/3rd_party/spdlog/sinks/msvc_sink.h	/^    explicit msvc_sink()$/;"	f	class:spdlog::sinks::msvc_sink
msvc_sink	src/3rd_party/spdlog/sinks/msvc_sink.h	/^class msvc_sink : public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
msvc_sink_mt	src/3rd_party/spdlog/include/spdlog/sinks/msvc_sink.h	/^typedef msvc_sink<std::mutex> msvc_sink_mt;$/;"	t	namespace:spdlog::sinks
msvc_sink_mt	src/3rd_party/spdlog/sinks/msvc_sink.h	/^typedef msvc_sink<std::mutex> msvc_sink_mt;$/;"	t	namespace:spdlog::sinks
msvc_sink_st	src/3rd_party/spdlog/include/spdlog/sinks/msvc_sink.h	/^typedef msvc_sink<details::null_mutex> msvc_sink_st;$/;"	t	namespace:spdlog::sinks
msvc_sink_st	src/3rd_party/spdlog/sinks/msvc_sink.h	/^typedef msvc_sink<details::null_mutex> msvc_sink_st;$/;"	t	namespace:spdlog::sinks
mt_	src/optimizers/optimizers.h	/^  Tensor mt_;$/;"	m	class:marian::Adam
multiplyFactor_	src/optimizers/optimizers.h	/^  float multiplyFactor_;$/;"	m	class:marian::OptimizerBase
mutex_	src/rescorer/score_collector.h	/^  boost::mutex mutex_;$/;"	m	class:marian::ScoreCollector
mutex_	src/training/validator.h	/^  std::mutex mutex_;$/;"	m	class:marian::ValidatorBase
mutex_	src/translator/output_collector.h	/^  boost::mutex mutex_;$/;"	m	class:marian::OutputCollector
mutex_	src/translator/output_collector.h	/^  boost::mutex mutex_;$/;"	m	class:marian::StringCollector
mvAvgGraph_	src/training/graph_group_singleton.h	/^  Ptr<ExpressionGraph> mvAvgGraph_;$/;"	m	class:marian::SingletonGraph
my_type	src/3rd_party/spdlog/example/example.cpp	/^struct my_type$/;"	s	file:
my_type	src/3rd_party/spdlog/example/jni/example.cpp	/^struct my_type$/;"	s	file:
n	src/3rd_party/yaml-cpp/indentation.h	/^  std::size_t n;$/;"	m	struct:YAML::IndentTo
n	src/3rd_party/yaml-cpp/indentation.h	/^  std::size_t n;$/;"	m	struct:YAML::Indentation
name	src/3rd_party/catch.hpp	/^    const char* name;$/;"	m	struct:Catch::NameAndDesc
name	src/3rd_party/spdlog/details/format.h	/^    BasicStringRef<Char> name;$/;"	m	struct:fmt::internal::NamedArg
name	src/3rd_party/spdlog/details/logger_impl.h	/^inline const std::string& spdlog::logger::name() const$/;"	f	class:spdlog::logger
name	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline const std::string& spdlog::logger::name() const$/;"	f	class:spdlog::logger
name	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicStringRef<Char> name;$/;"	m	struct:fmt::internal::NamedArg
name	src/3rd_party/spdlog/tests/catch.hpp	/^    const char* name;$/;"	m	struct:Catch::NameAndDesc
name	src/graph/node.h	/^  const std::string& name() const { return name_; }$/;"	f	class:marian::Node
nameMapRev_	src/models/nematus.h	/^  std::map<std::string, std::string> nameMapRev_;$/;"	m	class:marian::Nematus
nameMap_	src/models/nematus.h	/^  std::map<std::string, std::string> nameMap_;$/;"	m	class:marian::Nematus
name_	src/common/file_stream.h	/^  std::string name_;$/;"	m	class:TemporaryFile
name_	src/layers/convolution.h	/^  std::string name_;$/;"	m	class:marian::CharConvPooling
name_	src/translator/scorers.h	/^  std::string name_;$/;"	m	class:marian::Scorer
name_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class name_formatter :public flag_formatter$/;"	c	namespace:spdlog::details::__anon37
name_formatter	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class name_formatter:public flag_formatter$/;"	c	namespace:spdlog::details::__anon39
named_	src/graph/parameters.h	/^  std::map<std::string, Expr> named_;$/;"	m	class:marian::Parameters
namespace_	src/graph/expression_graph.h	/^  std::string namespace_;$/;"	m	class:marian::ExpressionGraph
negate	src/3rd_party/catch.hpp	/^        void negate( bool parenthesize ) {$/;"	f	struct:Catch::AssertionResultData
negated	src/3rd_party/catch.hpp	/^        bool negated;$/;"	m	struct:Catch::AssertionResultData
nematusNorm_	src/rnn/attention.h	/^  bool nematusNorm_;$/;"	m	class:marian::rnn::GlobalAttention
newBatch	src/training/training_state.h	/^  void newBatch() {$/;"	f	class:marian::TrainingState
newEpoch	src/training/training_state.h	/^  void newEpoch() {$/;"	f	class:marian::TrainingState
newShape	src/graph/node_operators_binary.h	/^  Shape newShape(Expr a) {$/;"	f	struct:marian::CrossEntropyNodeOp
newShape	src/graph/node_operators_binary.h	/^  Shape newShape(Expr a, Expr b) {$/;"	f	struct:marian::ElementBinaryNodeOp
newShape	src/graph/node_operators_binary.h	/^  Shape newShape(Expr a, Expr b, Args... args) {$/;"	f	struct:marian::ScalarProductNodeOp
newShape	src/graph/node_operators_binary.h	/^  Shape newShape(Expr a, Expr b, bool transA, bool transB) {$/;"	f	class:marian::DotBatchedNodeOp
newShape	src/graph/node_operators_binary.h	/^  Shape newShape(Expr a, Expr b, bool transA, bool transB) {$/;"	f	class:marian::DotNodeOp
newShape	src/graph/node_operators_binary.h	/^  Shape newShape(const std::vector<Expr>& nodes) {$/;"	f	struct:marian::AffineNodeOp
newShape	src/graph/node_operators_binary.h	/^  Shape newShape(const std::vector<Expr>& nodes, int ax) {$/;"	f	struct:marian::ConcatenateNodeOp
newShape	src/graph/node_operators_unary.h	/^  Shape newShape(Expr a, Args... args) {$/;"	f	struct:marian::MeanNodeOp
newShape	src/graph/node_operators_unary.h	/^  Shape newShape(Expr a, Args... args) {$/;"	f	struct:marian::SumNodeOp
newShape	src/graph/node_operators_unary.h	/^  Shape newShape(Expr a, const std::vector<int>& axes) {$/;"	f	struct:marian::TransposeNodeOp
newShape	src/graph/node_operators_unary.h	/^  Shape newShape(Expr a, const std::vector<size_t>& indeces) {$/;"	f	struct:marian::ColsNodeOp
newShape	src/graph/node_operators_unary.h	/^  Shape newShape(Expr a, const std::vector<size_t>& indeces) {$/;"	f	struct:marian::RowsNodeOp
newShape	src/graph/node_operators_unary.h	/^  Shape newShape(Expr a, int axis) {$/;"	f	class:marian::StepNodeOp
newShape	src/graph/node_operators_unary.h	/^  Shape newShape(Expr a, int axis, const std::vector<size_t>& indeces) {$/;"	f	struct:marian::SelectNodeOp
newShape	src/graph/node_operators_unary.h	/^  Shape newShape(const std::vector<Expr>& nodes) {$/;"	f	struct:marian::TanhNodeOp
newStalled	src/training/training_state.h	/^  void newStalled(int num) {$/;"	f	class:marian::TrainingState
newTensor	src/training/graph_group_async_drop.h	/^  Tensor newTensor(int size, int device) {$/;"	f	class:marian::AsyncGraphGroup
newlocale	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    static locale_t newlocale(int category_mask, const char *locale, locale_t)$/;"	f	class:fmt::Locale
next	src/3rd_party/svd/defs_and_types.h	/^  struct hist_rec *prev, *next;$/;"	m	struct:hist_rec	typeref:struct:hist_rec::
next	src/data/batch_generator.h	/^  BatchPtr next() {$/;"	f	class:marian::data::BatchGenerator
next	src/data/corpus.cpp	/^SentenceTuple Corpus::next() {$/;"	f	class:marian::data::Corpus
next	src/data/text_input.cpp	/^SentenceTuple TextInput::next() {$/;"	f	class:marian::data::TextInput
nextId_	src/translator/output_collector.h	/^  long nextId_;$/;"	m	class:marian::OutputCollector
next_arg	src/3rd_party/spdlog/details/format.h	/^    Arg next_arg(const char *&error)$/;"	f	class:fmt::internal::FormatterBase
next_arg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Arg next_arg(const char *&error)$/;"	f	class:fmt::internal::FormatterBase
next_arg_index_	src/3rd_party/spdlog/details/format.h	/^    int next_arg_index_;$/;"	m	class:fmt::internal::FormatterBase
next_arg_index_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    int next_arg_index_;$/;"	m	class:fmt::internal::FormatterBase
nmt	scripts/python/example.py	/^import libmariannmt as nmt$/;"	i
nmt	scripts/python/mariannmt_server.py	/^import libmariannmt as nmt$/;"	i
nnz	src/kernels/sparse.h	/^  int nnz() { return nnz_; }$/;"	f	class:marian::sparse::CSR
node	src/3rd_party/yaml-cpp/node/detail/node.h	/^  node() : m_pRef(new node_ref) {}$/;"	f	class:YAML::detail::node
node	src/3rd_party/yaml-cpp/node/detail/node.h	/^class node {$/;"	c	namespace:YAML::detail
node	src/3rd_party/yaml-cpp/node/impl.h	/^  const Node& node;$/;"	m	struct:YAML::as_if
node_data	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^class YAML_CPP_API node_data {$/;"	c	namespace:YAML::detail
node_data	src/3rd_party/yaml-cpp/node_data.cpp	/^node_data::node_data()$/;"	f	class:YAML::detail::node_data
node_iterator	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^typedef node_iterator_base<node> node_iterator;$/;"	t	namespace:YAML::detail
node_iterator_base	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  explicit node_iterator_base(MapIter mapIt, MapIter mapEnd)$/;"	f	class:YAML::detail::node_iterator_base
node_iterator_base	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  explicit node_iterator_base(SeqIter seqIt)$/;"	f	class:YAML::detail::node_iterator_base
node_iterator_base	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  node_iterator_base()$/;"	f	class:YAML::detail::node_iterator_base
node_iterator_base	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  node_iterator_base(const node_iterator_base<W>& rhs,$/;"	f	class:YAML::detail::node_iterator_base
node_iterator_base	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^class node_iterator_base$/;"	c	namespace:YAML::detail
node_iterator_type	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^struct node_iterator_type {$/;"	s	namespace:YAML::detail
node_iterator_type	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^struct node_iterator_type<const V> {$/;"	s	namespace:YAML::detail
node_iterator_value	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  explicit node_iterator_value(V& key, V& value) : kv(&key, &value), pNode(0) {}$/;"	f	struct:YAML::detail::node_iterator_value
node_iterator_value	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  explicit node_iterator_value(V& rhs) : kv(), pNode(&rhs) {}$/;"	f	struct:YAML::detail::node_iterator_value
node_iterator_value	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  node_iterator_value() : kv(), pNode(0) {}$/;"	f	struct:YAML::detail::node_iterator_value
node_iterator_value	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^struct node_iterator_value : public std::pair<V*, V*> {$/;"	s	namespace:YAML::detail
node_map	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  typedef std::vector<std::pair<node*, node*>> node_map;$/;"	t	class:YAML::detail::node_data
node_map	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^typedef std::vector<std::pair<node*, node*>> node_map;$/;"	t	namespace:YAML::detail
node_ref	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  node_ref() : m_pData(new node_data) {}$/;"	f	class:YAML::detail::node_ref
node_ref	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^class node_ref {$/;"	c	namespace:YAML::detail
node_seq	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  typedef std::vector<node*> node_seq;$/;"	t	class:YAML::detail::node_data
node_seq	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^typedef std::vector<node*> node_seq;$/;"	t	namespace:YAML::detail
nodes	src/3rd_party/yaml-cpp/node/detail/node.h	/^  typedef std::set<node*> nodes;$/;"	t	class:YAML::detail::node
nodesBackward_	src/graph/expression_graph.h	/^  std::list<Expr> nodesBackward_;$/;"	m	class:marian::ExpressionGraph
nodesForward_	src/graph/expression_graph.h	/^  std::list<Expr> nodesForward_;$/;"	m	class:marian::ExpressionGraph
noexcept	src/3rd_party/yaml-cpp/exceptions.h	/^  virtual ~BadConversion() noexcept;$/;"	m	class:YAML::BadConversion
noexcept	src/3rd_party/yaml-cpp/exceptions.h	/^  virtual ~BadDereference() noexcept;$/;"	m	class:YAML::BadDereference
noexcept	src/3rd_party/yaml-cpp/exceptions.h	/^  virtual ~BadFile() noexcept;$/;"	m	class:YAML::BadFile
noexcept	src/3rd_party/yaml-cpp/exceptions.h	/^  virtual ~BadInsert() noexcept;$/;"	m	class:YAML::BadInsert
noexcept	src/3rd_party/yaml-cpp/exceptions.h	/^  virtual ~BadPushback() noexcept;$/;"	m	class:YAML::BadPushback
noexcept	src/3rd_party/yaml-cpp/exceptions.h	/^  virtual ~BadSubscript() noexcept;$/;"	m	class:YAML::BadSubscript
noexcept	src/3rd_party/yaml-cpp/exceptions.h	/^  virtual ~EmitterException() noexcept;$/;"	m	class:YAML::EmitterException
noexcept	src/3rd_party/yaml-cpp/exceptions.h	/^  virtual ~Exception() noexcept;$/;"	m	class:YAML::Exception
noexcept	src/3rd_party/yaml-cpp/exceptions.h	/^  virtual ~InvalidNode() noexcept;$/;"	m	class:YAML::InvalidNode
noexcept	src/3rd_party/yaml-cpp/exceptions.h	/^  virtual ~InvalidScalar() noexcept;$/;"	m	class:YAML::InvalidScalar
noexcept	src/3rd_party/yaml-cpp/exceptions.h	/^  virtual ~KeyNotFound() noexcept;$/;"	m	class:YAML::KeyNotFound
noexcept	src/3rd_party/yaml-cpp/exceptions.h	/^  virtual ~ParserException() noexcept;$/;"	m	class:YAML::ParserException
noexcept	src/3rd_party/yaml-cpp/exceptions.h	/^  virtual ~RepresentationException() noexcept;$/;"	m	class:YAML::RepresentationException
noncopyable	src/3rd_party/yaml-cpp/noncopyable.h	/^  noncopyable() {}$/;"	f	class:YAML::noncopyable
noncopyable	src/3rd_party/yaml-cpp/noncopyable.h	/^class YAML_CPP_API noncopyable {$/;"	c	namespace:YAML
notice	src/3rd_party/spdlog/common.h	/^    notice = 3,$/;"	e	enum:spdlog::level::__anon38
notice	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::notice()$/;"	f	class:spdlog::logger
notice	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::notice(const T& msg)$/;"	f	class:spdlog::logger
notice	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::notice(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
notify_others	src/3rd_party/threadpool.h	/^    void notify_others() {$/;"	f	class:marian::ThreadPool
notify_others	src/3rd_party/threadpool2.h	/^    void notify_others() {$/;"	f	class:marian::ThreadPool2
now	src/3rd_party/spdlog/details/os.h	/^inline spdlog::log_clock::time_point now()$/;"	f	namespace:spdlog::details::os
now	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline spdlog::log_clock::time_point now()$/;"	f	namespace:spdlog::details::os
np	scripts/contrib/fix_hard.py	/^import numpy as np$/;"	i
np	scripts/contrib/inject_model_params.py	/^import numpy as np$/;"	i
np	scripts/embeddings/export_embeddings.py	/^import numpy as np$/;"	i
npy_	src/data/npz_converter.h	/^    const cnpy::NpyArray& npy_;$/;"	m	class:NpzConverter::NpyMatrixWrapper
npy_load	src/3rd_party/cnpy/cnpy.cpp	/^cnpy::NpyArray cnpy::npy_load(std::string fname) {$/;"	f	class:cnpy
npy_save	src/3rd_party/cnpy/cnpy.h	/^    template<typename T> void npy_save(std::string fname, const T* data, const unsigned int* shape, const unsigned int ndims, std::string mode = "w") {$/;"	f	namespace:cnpy
npz_load	src/3rd_party/cnpy/cnpy.cpp	/^cnpy::NpyArray cnpy::npz_load(std::string fname, std::string varname) {$/;"	f	class:cnpy
npz_load	src/3rd_party/cnpy/cnpy.cpp	/^cnpy::npz_t cnpy::npz_load(std::string fname) {$/;"	f	class:cnpy
npz_save	src/3rd_party/cnpy/cnpy.h	/^    template<typename T> void npz_save(std::string zipname, std::string fname, const T* data, const unsigned int* shape, const unsigned int ndims, std::string mode = "w")$/;"	f	namespace:cnpy
npz_t	src/3rd_party/cnpy/cnpy.h	/^    struct npz_t : public std::map<std::string, NpyArray>$/;"	s	namespace:cnpy
null_atomic_int	src/3rd_party/spdlog/details/null_mutex.h	/^    null_atomic_int(int val):value(val)$/;"	f	struct:spdlog::details::null_atomic_int
null_atomic_int	src/3rd_party/spdlog/details/null_mutex.h	/^struct null_atomic_int$/;"	s	namespace:spdlog::details
null_atomic_int	src/3rd_party/spdlog/include/spdlog/details/null_mutex.h	/^    null_atomic_int(int val):value(val)$/;"	f	struct:spdlog::details::null_atomic_int
null_atomic_int	src/3rd_party/spdlog/include/spdlog/details/null_mutex.h	/^struct null_atomic_int$/;"	s	namespace:spdlog::details
null_mark	src/3rd_party/yaml-cpp/mark.h	/^  static const Mark null_mark() { return Mark(-1, -1, -1); }$/;"	f	struct:YAML::Mark
null_mutex	src/3rd_party/spdlog/details/null_mutex.h	/^struct null_mutex$/;"	s	namespace:spdlog::details
null_mutex	src/3rd_party/spdlog/include/spdlog/details/null_mutex.h	/^struct null_mutex$/;"	s	namespace:spdlog::details
null_sink	src/3rd_party/spdlog/include/spdlog/sinks/null_sink.h	/^class null_sink : public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
null_sink	src/3rd_party/spdlog/sinks/null_sink.h	/^class null_sink : public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
null_sink_mt	src/3rd_party/spdlog/include/spdlog/sinks/null_sink.h	/^typedef null_sink<details::null_mutex> null_sink_mt;$/;"	t	namespace:spdlog::sinks
null_sink_mt	src/3rd_party/spdlog/sinks/null_sink.h	/^typedef null_sink<std::mutex> null_sink_mt;$/;"	t	namespace:spdlog::sinks
null_sink_st	src/3rd_party/spdlog/include/spdlog/sinks/null_sink.h	/^typedef null_sink<details::null_mutex> null_sink_st;$/;"	t	namespace:spdlog::sinks
null_sink_st	src/3rd_party/spdlog/sinks/null_sink.h	/^typedef null_sink<details::null_mutex> null_sink_st;$/;"	t	namespace:spdlog::sinks
numberOfBatches	src/training/scheduler.h	/^  size_t numberOfBatches() { return state_->batches; }$/;"	f	class:marian::Scheduler
numeric_limits	src/3rd_party/spdlog/details/format.h	/^class numeric_limits<fmt::internal::DummyInt>:$/;"	c	namespace:std
numeric_limits	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^class numeric_limits<fmt::internal::DummyInt> :$/;"	c	namespace:std
observers_	src/training/training_state.h	/^  std::vector<Ptr<TrainingObserver>> observers_;$/;"	m	class:marian::TrainingState
off	src/3rd_party/spdlog/common.h	/^    off = 9$/;"	e	enum:spdlog::level::__anon38
off	src/3rd_party/spdlog/include/spdlog/common.h	/^    off = 6$/;"	e	enum:spdlog::level::__anon40
ofstream_	src/common/file_stream.h	/^  boost::filesystem::ofstream ofstream_;$/;"	m	class:OutputFileStream
onDocIndicator	src/3rd_party/yaml-cpp/scanscalar.h	/^  ACTION onDocIndicator;      \/\/ what do we do if we see a document indicator?$/;"	m	struct:YAML::ScanScalarParams
onTabInIndentation	src/3rd_party/yaml-cpp/scanscalar.h	/^  ACTION onTabInIndentation;  \/\/ what do we do if we see a tab where we should$/;"	m	struct:YAML::ScanScalarParams
on_blue	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_blue = "\\033[44m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_blue	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_blue    = "\\033[44m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_close	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::function<void(std::shared_ptr<Connection>, int, const std::string &)> on_close;$/;"	m	class:SimpleWeb::SocketServerBase::Endpoint
on_cyan	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_cyan = "\\033[46m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_cyan	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_cyan    = "\\033[46m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_error	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::function<void(std::shared_ptr<Connection>, const error_code &)> on_error;$/;"	m	class:SimpleWeb::SocketServerBase::Endpoint
on_green	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_green = "\\033[42m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_green	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_green   = "\\033[42m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_grey	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_grey = "\\033[40m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_grey	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_grey    = "\\033[40m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_magenta	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_magenta = "\\033[45m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_magenta	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_magenta = "\\033[45m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_message	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::function<void(std::shared_ptr<Connection>, std::shared_ptr<Message>)> on_message;$/;"	m	class:SimpleWeb::SocketServerBase::Endpoint
on_open	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::function<void(std::shared_ptr<Connection>)> on_open;$/;"	m	class:SimpleWeb::SocketServerBase::Endpoint
on_red	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_red = "\\033[41m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_red	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_red     = "\\033[41m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_white	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_white = "\\033[47m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_white	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_white   = "\\033[47m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_yellow	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_yellow = "\\033[43m";$/;"	m	class:spdlog::sinks::ansicolor_sink
on_yellow	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_yellow  = "\\033[43m";$/;"	m	class:spdlog::sinks::ansicolor_sink
ones	src/graph/expression_graph.h	/^  Expr ones(Args... args) {$/;"	f	class:marian::ExpressionGraph
op	src/3rd_party/spdlog/tests/catch.hpp	/^            std::string lhs, rhs, op;$/;"	m	struct:Catch::ResultBuilder::ExprComponents
opCast	src/3rd_party/catch.hpp	/^    inline T& opCast(T const& t) { return const_cast<T&>(t); }$/;"	f	namespace:Catch::Internal
opCast	src/3rd_party/catch.hpp	/^    inline std::nullptr_t opCast(std::nullptr_t) { return nullptr; }$/;"	f	namespace:Catch::Internal
opCast	src/3rd_party/spdlog/tests/catch.hpp	/^    inline T& opCast(T const& t) { return const_cast<T&>(t); }$/;"	f	namespace:Catch::Internal
opCast	src/3rd_party/spdlog/tests/catch.hpp	/^    inline std::nullptr_t opCast(std::nullptr_t) { return nullptr; }$/;"	f	namespace:Catch::Internal
open	src/3rd_party/spdlog/details/file_helper.h	/^    void open(const filename_t& fname, bool truncate = false)$/;"	f	class:spdlog::details::file_helper
open	src/3rd_party/spdlog/include/spdlog/details/file_helper.h	/^    void open(const filename_t& fname, bool truncate = false)$/;"	f	class:spdlog::details::file_helper
open_interval	src/3rd_party/spdlog/details/file_helper.h	/^    const int open_interval = 10;$/;"	m	class:spdlog::details::file_helper
open_interval	src/3rd_party/spdlog/include/spdlog/details/file_helper.h	/^    const int open_interval = 10;$/;"	m	class:spdlog::details::file_helper
open_tries	src/3rd_party/spdlog/details/file_helper.h	/^    const int open_tries = 5;$/;"	m	class:spdlog::details::file_helper
open_tries	src/3rd_party/spdlog/include/spdlog/details/file_helper.h	/^    const int open_tries = 5;$/;"	m	class:spdlog::details::file_helper
operator !	src/3rd_party/catch.hpp	/^        MatchNotOf<ComparatorT> MatcherBase<ObjectT, ComparatorT>::operator ! () const {$/;"	f	class:Catch::Matchers::Impl::MatcherBase
operator !	src/3rd_party/catch.hpp	/^        bool operator !() const { return m_p == CATCH_NULL; }$/;"	f	class:Catch::Ptr
operator !	src/3rd_party/spdlog/tests/catch.hpp	/^        bool operator !() const { return m_p == NULL; }$/;"	f	class:Catch::Ptr
operator !	src/3rd_party/yaml-cpp/node/node.h	/^  bool operator!() const { return !IsDefined(); }$/;"	f	class:YAML::Node
operator !	src/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx operator!(const RegEx& ex) {$/;"	f	namespace:YAML
operator !	src/3rd_party/yaml-cpp/stream.h	/^  bool operator!() const { return !static_cast<bool>(*this); }$/;"	f	class:YAML::Stream
operator !	src/3rd_party/yaml-cpp/streamcharsource.h	/^  bool operator!() const { return !static_cast<bool>(*this); }$/;"	f	class:YAML::StreamCharSource
operator !	src/3rd_party/yaml-cpp/stringsource.h	/^  bool operator!() const { return !static_cast<bool>(*this); }$/;"	f	class:YAML::StringCharSource
operator !=	src/3rd_party/spdlog/details/format.h	/^    friend bool operator!=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator !=	src/3rd_party/spdlog/details/os.h	/^inline bool operator!=(const std::tm& tm1, const std::tm& tm2)$/;"	f	namespace:spdlog::details::os
operator !=	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline bool operator!=(const std::tm& tm1, const std::tm& tm2)$/;"	f	namespace:spdlog::details::os
operator !=	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    friend bool operator!=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator !=	src/3rd_party/yaml-cpp/binary.h	/^  bool operator!=(const Binary &rhs) const { return !(*this == rhs); }$/;"	f	class:YAML::Binary
operator !=	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^  bool operator!=(const iterator_base<W>& rhs) const {$/;"	f	class:YAML::detail::iterator_base
operator !=	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  bool operator!=(const node_iterator_base<W>& rhs) const {$/;"	f	class:YAML::detail::node_iterator_base
operator !=	src/3rd_party/yaml-cpp/null.h	/^inline bool operator!=(const _Null&, const _Null&) { return false; }$/;"	f	namespace:YAML
operator !=	src/common/shape.h	/^    bool operator!=(const Shape& other) const { return !(*this == other); }$/;"	f	struct:marian::Shape
operator !=	src/gpu/shape.h	/^  __HDI__ bool operator!=(const ConstantShape& other) const {$/;"	f	struct:marian::gpu::ConstantShape
operator &&	src/3rd_party/catch.hpp	/^            MatchAllOf<ArgT>& operator && ( MatcherBase<ArgT> const& other ) {$/;"	f	struct:Catch::Matchers::Impl::MatchAllOf
operator &&	src/3rd_party/catch.hpp	/^        MatchAllOf<ComparatorT> MatcherBase<ObjectT, ComparatorT>::operator && ( MatcherBase const& other ) const {$/;"	f	class:Catch::Matchers::Impl::MatcherBase
operator &&	src/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx operator&&(const RegEx& ex1, const RegEx& ex2) {$/;"	f	namespace:YAML
operator ()	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void operator()(Char *&buffer)$/;"	f	class:fmt::internal::ThousandsSep
operator ()	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void operator()(Char *) {}$/;"	f	struct:fmt::internal::NoThousandsSep
operator ()	src/3rd_party/yaml-cpp/node/impl.h	/^  T operator()() const {$/;"	f	struct:YAML::as_if
operator ()	src/3rd_party/yaml-cpp/node/impl.h	/^  T operator()(const S& fallback) const {$/;"	f	struct:YAML::as_if
operator ()	src/3rd_party/yaml-cpp/node/impl.h	/^  const T& operator()() const { return t; }$/;"	f	struct:YAML::detail::to_value_t
operator ()	src/3rd_party/yaml-cpp/node/impl.h	/^  const std::string operator()() const { return t; }$/;"	f	struct:YAML::detail::to_value_t
operator ()	src/3rd_party/yaml-cpp/node/impl.h	/^  std::string operator()() const {$/;"	f	struct:YAML::as_if
operator ()	src/3rd_party/yaml-cpp/node/impl.h	/^  std::string operator()(const S& fallback) const {$/;"	f	struct:YAML::as_if
operator ()	src/common/keywords.h	/^  const Value& operator()() const { return value_; }$/;"	f	class:marian::keywords::Keyword
operator ()	src/data/npz_converter.cpp	/^mblas::Matrix NpzConverter::operator()(const std::string& key,$/;"	f	class:NpzConverter
operator ()	src/data/npz_converter.h	/^    float operator()(size_t i, size_t j) const {$/;"	f	class:NpzConverter::NpyMatrixWrapper
operator ()	src/data/vocab.cpp	/^  bool operator()(const std::string& a, const std::string& b) const {$/;"	f	class:marian::Vocab::VocabFreqOrderer
operator ()	src/data/vocab.cpp	/^Words Vocab::operator()(const std::string& line, bool addEOS) const {$/;"	f	class:marian::Vocab
operator ()	src/data/vocab.cpp	/^Words Vocab::operator()(const std::vector<std::string>& lineTokens,$/;"	f	class:marian::Vocab
operator ()	src/data/vocab.cpp	/^std::vector<std::string> Vocab::operator()(const Words& sentence,$/;"	f	class:marian::Vocab
operator ()	src/functional/floats.h	/^      __HDI__ constexpr float operator()(Args&&... args) const {$/;"	f	struct:marian::functional::F
operator ()	src/functional/operands.h	/^      __HDI__ float operator()(Args&&... args) { return V; }$/;"	f	struct:marian::functional::C
operator ()	src/functional/operands.h	/^      __HDI__ float operator()(Args&&... args) { return value; }$/;"	f	struct:marian::functional::Capture
operator ()	src/functional/operands.h	/^      __HDI__ float& operator()(Args&&... args) {$/;"	f	struct:marian::functional::Var
operator ()	src/functional/predicates.h	/^      __HDI__ float operator()(Args&&... args) {$/;"	f	struct:marian::functional::Assign
operator ()	src/functional/predicates.h	/^      __HDI__ float operator()(Args&&... args) {$/;"	f	struct:marian::functional::BinaryFunctor
operator ()	src/functional/predicates.h	/^      __HDI__ float operator()(Args&&... args) {$/;"	f	struct:marian::functional::TernaryFunctor
operator ()	src/functional/predicates.h	/^      __HDI__ float operator()(Args&&... args) {$/;"	f	struct:marian::functional::UnaryFunctor
operator ()	src/functional/predicates.h	/^      __HDI__ float& operator()(Args&&... args) {$/;"	f	struct:marian::functional::Assignee
operator ()	src/layers/convolution.h	/^    Expr operator()(Expr x, Expr mask) {$/;"	f	class:marian::CharConvPooling
operator ()	src/layers/factory.h	/^  Accumulator& operator()(Ptr<Config> config) {$/;"	f	class:marian::Accumulator
operator ()	src/layers/factory.h	/^  Accumulator& operator()(Ptr<Options> options) {$/;"	f	class:marian::Accumulator
operator ()	src/layers/factory.h	/^  Accumulator& operator()(YAML::Node yaml) {$/;"	f	class:marian::Accumulator
operator ()	src/layers/factory.h	/^  Accumulator& operator()(const std::string& key, T value) {$/;"	f	class:marian::Accumulator
operator ()	src/layers/factory.h	/^  Accumulator& operator()(const std::string& yaml) {$/;"	f	class:marian::Accumulator
operator *	src/3rd_party/catch.hpp	/^        T& operator*() const { return *m_p; }$/;"	f	class:Catch::Ptr
operator *	src/3rd_party/spdlog/tests/catch.hpp	/^        T& operator*() const { return *m_p; }$/;"	f	class:Catch::Ptr
operator *	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^  value_type operator*() const {$/;"	f	class:YAML::detail::iterator_base
operator *	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  V& operator*() const { return *pNode; }$/;"	f	struct:YAML::detail::node_iterator_value
operator *	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  value_type operator*() const {$/;"	f	class:YAML::detail::node_iterator_base
operator +	src/3rd_party/catch.hpp	/^        std::string operator+() {$/;"	f	struct:Catch::StreamEndStop
operator +	src/3rd_party/catch.hpp	/^    T const& operator + ( T const& value, StreamEndStop ) {$/;"	f	namespace:Catch
operator +	src/3rd_party/spdlog/tests/catch.hpp	/^        std::string operator+() {$/;"	f	struct:Catch::StreamEndStop
operator +	src/3rd_party/spdlog/tests/catch.hpp	/^    T const& operator + ( T const& value, StreamEndStop ) {$/;"	f	namespace:Catch
operator +	src/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx operator+(const RegEx& ex1, const RegEx& ex2) {$/;"	f	namespace:YAML
operator +	src/3rd_party/yaml-cpp/streamcharsource.h	/^inline const StreamCharSource StreamCharSource::operator+(int i) const {$/;"	f	class:YAML::StreamCharSource
operator +	src/3rd_party/yaml-cpp/stringsource.h	/^  const StringCharSource operator+(int i) const {$/;"	f	class:YAML::StringCharSource
operator +	src/tensors/allocator.h	/^  friend Gap operator+(const Gap& mp1, const Gap& mp2) {$/;"	f	class:marian::Gap
operator ++	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^  iterator_base<V> operator++(int) {$/;"	f	class:YAML::detail::iterator_base
operator ++	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^  iterator_base<V>& operator++() {$/;"	f	class:YAML::detail::iterator_base
operator ++	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  node_iterator_base<V> operator++(int) {$/;"	f	class:YAML::detail::node_iterator_base
operator ++	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  node_iterator_base<V>& operator++() {$/;"	f	class:YAML::detail::node_iterator_base
operator ++	src/3rd_party/yaml-cpp/stringsource.h	/^  StringCharSource& operator++() {$/;"	f	class:YAML::StringCharSource
operator +=	src/3rd_party/cnpy/cnpy.cpp	/^template<> std::vector<char>& cnpy::operator+=(std::vector<char>& lhs, const char* rhs) {$/;"	f	class:cnpy
operator +=	src/3rd_party/cnpy/cnpy.cpp	/^template<> std::vector<char>& cnpy::operator+=(std::vector<char>& lhs, const std::string rhs) {$/;"	f	class:cnpy
operator +=	src/3rd_party/cnpy/cnpy.h	/^    template<typename T> std::vector<char>& operator+=(std::vector<char>& lhs, const T rhs) {$/;"	f	namespace:cnpy
operator +=	src/3rd_party/yaml-cpp/stringsource.h	/^  StringCharSource& operator+=(std::size_t offset) {$/;"	f	class:YAML::StringCharSource
operator ->	src/3rd_party/catch.hpp	/^        T* operator->() const { return m_p; }$/;"	f	class:Catch::Ptr
operator ->	src/3rd_party/spdlog/tests/catch.hpp	/^        T* operator->() const { return m_p; }$/;"	f	class:Catch::Ptr
operator ->	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^    V* operator->() { return std::addressof(m_ref); }$/;"	f	struct:YAML::detail::iterator_base::proxy
operator ->	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^  proxy operator->() const { return proxy(**this); }$/;"	f	class:YAML::detail::iterator_base
operator ->	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^    node_iterator_value<V>* operator->() { return std::addressof(m_ref); }$/;"	f	struct:YAML::detail::node_iterator_base::proxy
operator ->	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  V& operator->() const { return *pNode; }$/;"	f	struct:YAML::detail::node_iterator_value
operator ->	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  proxy operator->() const { return proxy(**this); }$/;"	f	class:YAML::detail::node_iterator_base
operator ->	src/layers/constructors.h	/^  Ptr<MLP> operator->() { return construct(); }$/;"	f	class:marian::mlp::MLPFactory
operator ->	src/rnn/constructors.h	/^  Ptr<RNN> operator->() { return construct(); }$/;"	f	class:marian::rnn::RNNFactory
operator <	src/3rd_party/spdlog/details/format.h	/^    friend bool operator<(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator <	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    friend bool operator<(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator <	src/tensors/allocator.h	/^  bool operator<(const Gap& mp) const {$/;"	f	class:marian::Gap
operator <	src/translator/history.h	/^    bool operator<(const HypothesisCoord& hc) const { return cost < hc.cost; }$/;"	f	struct:marian::History::HypothesisCoord
operator <<	src/3rd_party/catch.hpp	/^        ResultBuilder& operator << ( T const& value ) {$/;"	f	class:Catch::ResultBuilder
operator <<	src/3rd_party/exception.h	/^template <class Except, class Data> typename Except::template ExceptionTag<Except&>::Identity operator<<(Except &e, const Data &data) {$/;"	f	namespace:util
operator <<	src/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<($/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(IntFormatSpec<T, Spec, FillChar> spec)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(LongLong value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(ULongLong value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(char value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(const StrFormatSpec<StrChar> &spec)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(double value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(fmt::BasicStringRef<Char> value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(int value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(long double value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(long value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(unsigned long value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/details/format.h	/^    BasicWriter &operator<<(unsigned value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(char what)$/;"	f	class:spdlog::details::line_logger
operator <<	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(const T& what)$/;"	f	class:spdlog::details::line_logger
operator <<	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(const char* what)$/;"	f	class:spdlog::details::line_logger
operator <<	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(const std::string& what)$/;"	f	class:spdlog::details::line_logger
operator <<	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(double what)$/;"	f	class:spdlog::details::line_logger
operator <<	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(float what)$/;"	f	class:spdlog::details::line_logger
operator <<	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(int what)$/;"	f	class:spdlog::details::line_logger
operator <<	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(long double what)$/;"	f	class:spdlog::details::line_logger
operator <<	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(long long what)$/;"	f	class:spdlog::details::line_logger
operator <<	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(long what)$/;"	f	class:spdlog::details::line_logger
operator <<	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(unsigned int what)$/;"	f	class:spdlog::details::line_logger
operator <<	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(unsigned long long what)$/;"	f	class:spdlog::details::line_logger
operator <<	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger& spdlog::details::line_logger::operator<<(unsigned long what)$/;"	f	class:spdlog::details::line_logger
operator <<	src/3rd_party/spdlog/example/example.cpp	/^    friend OStream& operator<<(OStream& os, const my_type &c)$/;"	f	struct:my_type
operator <<	src/3rd_party/spdlog/example/jni/example.cpp	/^    friend OStream& operator<<(OStream& os, const my_type &c)$/;"	f	struct:my_type
operator <<	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<($/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(IntFormatSpec<T, Spec, FillChar> spec)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(LongLong value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(ULongLong value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(char value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(const StrFormatSpec<StrChar> &spec)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(double value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(fmt::BasicStringRef<Char> value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(int value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(long double value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(long value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(unsigned long value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(unsigned value)$/;"	f	class:BasicWriter
operator <<	src/3rd_party/spdlog/tests/catch.hpp	/^        ResultBuilder& operator << ( T const& value ) {$/;"	f	class:Catch::ResultBuilder
operator <<	src/3rd_party/yaml-cpp/emit.cpp	/^Emitter& operator<<(Emitter& out, const Node& node) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emit.cpp	/^std::ostream& operator<<(std::ostream& out, const Node& node) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, EMITTER_MANIP value) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, _Indent indent) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, _Precision precision) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, bool v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, char v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, const Binary& b) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, const _Alias& v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, const _Anchor& v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, const _Comment& v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, const _Null& v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, const _Tag& v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, const char* v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, const std::string& v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, double v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, float v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, int v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, long long v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, long v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, short v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, unsigned char v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, unsigned int v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, unsigned long long v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, unsigned long v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/emitter.h	/^inline Emitter& operator<<(Emitter& emitter, unsigned short v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/indentation.h	/^inline ostream_wrapper& operator<<(ostream_wrapper& out,$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/ostream_wrapper.h	/^inline ostream_wrapper& operator<<(ostream_wrapper& stream, char ch) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/ostream_wrapper.h	/^inline ostream_wrapper& operator<<(ostream_wrapper& stream,$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/stlemitter.h	/^inline Emitter& operator<<(Emitter& emitter, const std::list<T>& v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/stlemitter.h	/^inline Emitter& operator<<(Emitter& emitter, const std::map<K, V>& m) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/stlemitter.h	/^inline Emitter& operator<<(Emitter& emitter, const std::set<T>& v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/stlemitter.h	/^inline Emitter& operator<<(Emitter& emitter, const std::vector<T>& v) {$/;"	f	namespace:YAML
operator <<	src/3rd_party/yaml-cpp/token.h	/^  friend std::ostream& operator<<(std::ostream& out, const Token& token) {$/;"	f	struct:YAML::Token
operator <<	src/common/config.h	/^  friend std::ostream& operator<<(std::ostream& out, const Config& config) {$/;"	f	class:marian::Config
operator <<	src/common/file_stream.h	/^  friend OutputFileStream& operator<<(OutputFileStream& stream, const T& t) {$/;"	f	class:OutputFileStream
operator <<	src/common/shape.h	/^    friend std::ostream& operator<<(std::ostream& strm, const Shape& shape) {$/;"	f	struct:marian::Shape
operator <<	src/tensors/allocator.h	/^  friend std::ostream& operator<<(std::ostream& out, const Gap& gap) {$/;"	f	class:marian::Gap
operator <<	src/tensors/memory_piece.h	/^  friend std::ostream& operator<<(std::ostream& out, const MemoryPiece mp) {$/;"	f	class:marian::MemoryPiece
operator <=	src/3rd_party/spdlog/details/format.h	/^    friend bool operator<=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator <=	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    friend bool operator<=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator =	src/3rd_party/catch.hpp	/^        CopyableStream& operator=( CopyableStream const& other ) {$/;"	f	struct:Catch::CopyableStream
operator =	src/3rd_party/catch.hpp	/^        Ptr& operator = ( Ptr const& other ){$/;"	f	class:Catch::Ptr
operator =	src/3rd_party/catch.hpp	/^        Ptr& operator = ( T* p ){$/;"	f	class:Catch::Ptr
operator =	src/3rd_party/spdlog/details/format.h	/^    BasicMemoryWriter &operator=(BasicMemoryWriter &&other)$/;"	f	class:BasicMemoryWriter
operator =	src/3rd_party/spdlog/details/format.h	/^    MemoryBuffer &operator=(MemoryBuffer &&other)$/;"	f	class:fmt::internal::MemoryBuffer
operator =	src/3rd_party/spdlog/details/log_msg.h	/^    log_msg& operator=(log_msg&& other)$/;"	f	struct:spdlog::details::log_msg
operator =	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicMemoryWriter &operator=(BasicMemoryWriter &&other)$/;"	f	class:BasicMemoryWriter
operator =	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    MemoryBuffer &operator=(MemoryBuffer &&other)$/;"	f	class:fmt::internal::MemoryBuffer
operator =	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    BufferedFile &operator=(BufferedFile &other)$/;"	f	class:fmt::BufferedFile
operator =	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    BufferedFile &operator=(Proxy p)$/;"	f	class:fmt::BufferedFile
operator =	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    BufferedFile& operator=(BufferedFile &&other)$/;"	f	class:fmt::BufferedFile
operator =	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    File &operator=(File &other)$/;"	f	class:fmt::File
operator =	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    File &operator=(Proxy p)$/;"	f	class:fmt::File
operator =	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    File& operator=(File &&other)$/;"	f	class:fmt::File
operator =	src/3rd_party/spdlog/tests/catch.hpp	/^        CopyableStream& operator=( CopyableStream const& other ) {$/;"	f	struct:Catch::CopyableStream
operator =	src/3rd_party/spdlog/tests/catch.hpp	/^        Ptr& operator = ( Ptr const& other ){$/;"	f	class:Catch::Ptr
operator =	src/3rd_party/spdlog/tests/catch.hpp	/^        Ptr& operator = ( T* p ){$/;"	f	class:Catch::Ptr
operator =	src/3rd_party/yaml-cpp/node/impl.h	/^inline Node& Node::operator=(const Node& rhs) {$/;"	f	class:YAML::Node
operator =	src/3rd_party/yaml-cpp/node/impl.h	/^inline Node& Node::operator=(const T& rhs) {$/;"	f	class:YAML::Node
operator =	src/3rd_party/yaml-cpp/setting.h	/^  SettingChanges& operator=(SettingChanges&& rhs) {$/;"	f	class:YAML::SettingChanges
operator =	src/common/keywords.h	/^  Keyword<key, Value> operator=(Value value) const {$/;"	f	class:marian::keywords::Keyword
operator =	src/functional/predicates.h	/^      Assign<Var<N>, Capture> operator=(Capture x) {$/;"	f	struct:marian::functional::Assignee
operator =	src/functional/predicates.h	/^      Assign<Var<N>, IsClass<X>> operator=(X x) {$/;"	f	struct:marian::functional::Assignee
operator ==	src/3rd_party/spdlog/details/format.h	/^    friend bool operator==(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator ==	src/3rd_party/spdlog/details/os.h	/^inline bool operator==(const std::tm& tm1, const std::tm& tm2)$/;"	f	namespace:spdlog::details::os
operator ==	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline bool operator==(const std::tm& tm1, const std::tm& tm2)$/;"	f	namespace:spdlog::details::os
operator ==	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    friend bool operator==(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator ==	src/3rd_party/yaml-cpp/binary.h	/^  bool operator==(const Binary &rhs) const {$/;"	f	class:YAML::Binary
operator ==	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^  bool operator==(const iterator_base<W>& rhs) const {$/;"	f	class:YAML::detail::iterator_base
operator ==	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  bool operator==(const node_iterator_base<W>& rhs) const {$/;"	f	class:YAML::detail::node_iterator_base
operator ==	src/3rd_party/yaml-cpp/node/impl.h	/^inline bool operator==(const Node& lhs, const Node& rhs) { return lhs.is(rhs); }$/;"	f	namespace:YAML
operator ==	src/3rd_party/yaml-cpp/null.h	/^inline bool operator==(const _Null&, const _Null&) { return true; }$/;"	f	namespace:YAML
operator ==	src/common/shape.h	/^    bool operator==(const Shape& other) const {$/;"	f	struct:marian::Shape
operator ==	src/gpu/shape.h	/^  __HDI__ bool operator==(const ConstantShape& other) const {$/;"	f	struct:marian::gpu::ConstantShape
operator ==	src/tensors/allocator.h	/^  bool operator==(const Gap& mp) const {$/;"	f	class:marian::Gap
operator >	src/3rd_party/spdlog/details/format.h	/^    friend bool operator>(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator >	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    friend bool operator>(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator >=	src/3rd_party/spdlog/details/format.h	/^    friend bool operator>=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator >=	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    friend bool operator>=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	class:fmt::BasicStringRef
operator >>	src/common/file_stream.h	/^  friend InputFileStream& operator>>(InputFileStream& stream, T& t) {$/;"	f	class:InputFileStream
operator SafeBool::type	src/3rd_party/catch.hpp	/^        operator SafeBool::type() const { return SafeBool::makeSafe( m_p != CATCH_NULL ); }$/;"	f	class:Catch::Ptr
operator SafeBool::type	src/3rd_party/spdlog/tests/catch.hpp	/^        operator SafeBool::type() const { return SafeBool::makeSafe( m_p != NULL ); }$/;"	f	class:Catch::Ptr
operator StringRef	src/3rd_party/spdlog/details/format.h	/^    operator StringRef() const$/;"	f	class:fmt::internal::UTF16ToUTF8
operator StringRef	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    operator StringRef() const$/;"	f	class:fmt::internal::UTF16ToUTF8
operator V*	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^    operator V*() { return std::addressof(m_ref); }$/;"	f	struct:YAML::detail::iterator_base::proxy
operator WStringRef	src/3rd_party/spdlog/details/format.h	/^    operator WStringRef() const$/;"	f	class:fmt::internal::UTF8ToUTF16
operator WStringRef	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    operator WStringRef() const$/;"	f	class:fmt::internal::UTF8ToUTF16
operator []	src/3rd_party/spdlog/details/format.h	/^    T &operator[](std::size_t index)$/;"	f	class:fmt::Buffer
operator []	src/3rd_party/spdlog/details/format.h	/^    const T &operator[](std::size_t index) const$/;"	f	class:fmt::Buffer
operator []	src/3rd_party/spdlog/details/format.h	/^    internal::Arg operator[](unsigned index) const$/;"	f	class:fmt::ArgList
operator []	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    T &operator[](std::size_t index)$/;"	f	class:fmt::Buffer
operator []	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    const T &operator[](std::size_t index) const$/;"	f	class:fmt::Buffer
operator []	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    internal::Arg operator[](unsigned index) const$/;"	f	class:fmt::ArgList
operator []	src/3rd_party/yaml-cpp/node/impl.h	/^inline Node Node::operator[](const Key& key) {$/;"	f	class:YAML::Node
operator []	src/3rd_party/yaml-cpp/node/impl.h	/^inline Node Node::operator[](const Node& key) {$/;"	f	class:YAML::Node
operator []	src/3rd_party/yaml-cpp/node/impl.h	/^inline const Node Node::operator[](const Key& key) const {$/;"	f	class:YAML::Node
operator []	src/3rd_party/yaml-cpp/node/impl.h	/^inline const Node Node::operator[](const Node& key) const {$/;"	f	class:YAML::Node
operator []	src/3rd_party/yaml-cpp/ptr_vector.h	/^  T& operator[](std::size_t i) { return *m_data[i]; }$/;"	f	class:YAML::ptr_vector
operator []	src/3rd_party/yaml-cpp/ptr_vector.h	/^  const T& operator[](std::size_t i) const { return *m_data[i]; }$/;"	f	class:YAML::ptr_vector
operator []	src/3rd_party/yaml-cpp/streamcharsource.h	/^  char operator[](std::size_t i) const { return m_stream.CharAt(m_offset + i); }$/;"	f	class:YAML::StreamCharSource
operator []	src/3rd_party/yaml-cpp/stringsource.h	/^  char operator[](std::size_t i) const { return m_str[m_offset + i]; }$/;"	f	class:YAML::StringCharSource
operator []	src/common/config.h	/^  YAML::Node operator[](const std::string& key) const { return get(key); }$/;"	f	class:marian::Config
operator []	src/common/shape.h	/^    inline int operator[](int i) const { return dim(i); }$/;"	f	struct:marian::Shape
operator []	src/common/shape.h	/^    inline int operator[](int i) { return dim(i); }$/;"	f	struct:marian::Shape
operator []	src/data/corpus.h	/^  Ptr<SubBatch> operator[](size_t i) const { return batches_[i]; }$/;"	f	class:marian::data::CorpusBatch
operator []	src/data/corpus.h	/^  Words& operator[](size_t i) { return tuple_[i]; }$/;"	f	class:marian::data::SentenceTuple
operator []	src/data/corpus.h	/^  const Words& operator[](size_t i) const { return tuple_[i]; }$/;"	f	class:marian::data::SentenceTuple
operator []	src/data/npz_converter.cpp	/^mblas::Matrix NpzConverter::operator[](const std::string& key) const {$/;"	f	class:NpzConverter
operator []	src/data/vocab.cpp	/^const std::string& Vocab::operator[](size_t id) const {$/;"	f	class:marian::Vocab
operator []	src/data/vocab.cpp	/^size_t Vocab::operator[](const std::string& word) const {$/;"	f	class:marian::Vocab
operator []	src/gpu/array.h	/^  __HDI__ T& operator[](size_t i) { return data_[i]; }$/;"	f	struct:marian::gpu::Array
operator []	src/gpu/array.h	/^  __HDI__ const T& operator[](size_t i) const { return data_[i]; }$/;"	f	struct:marian::gpu::Array
operator []	src/gpu/shape.h	/^  __HDI__ int operator[](int i) const { return dim(i); }$/;"	f	struct:marian::gpu::ConstantShape
operator []	src/gpu/shape.h	/^  __HDI__ int operator[](int i) { return dim(i); }$/;"	f	struct:marian::gpu::ConstantShape
operator []	src/gpu/tensor.h	/^  __HDI__ const float& operator[](const gpu::Array<int, gpu::Shape::size()>& indices) const {$/;"	f	struct:marian::gpu::Tensor
operator []	src/gpu/tensor.h	/^  __HDI__ const float& operator[](size_t i) const { return data_[i]; }$/;"	f	struct:marian::gpu::Tensor
operator []	src/gpu/tensor.h	/^  __HDI__ float& operator[](const gpu::Array<int, gpu::Shape::size()>& indices) {$/;"	f	struct:marian::gpu::Tensor
operator []	src/gpu/tensor.h	/^  __HDI__ float& operator[](size_t i) { return data_[i]; }$/;"	f	struct:marian::gpu::Tensor
operator []	src/rnn/types.h	/^  Ptr<Stackable> operator[](int i) { return stackables_[i]; }$/;"	f	class:marian::rnn::StackedCell
operator []	src/rnn/types.h	/^  State& operator[](size_t i) { return states_[i]; };$/;"	f	class:marian::rnn::States
operator []	src/rnn/types.h	/^  const State& operator[](size_t i) const { return states_[i]; };$/;"	f	class:marian::rnn::States
operator bool	src/3rd_party/yaml-cpp/parser.cpp	/^Parser::operator bool() const {$/;"	f	class:YAML::Parser
operator bool	src/3rd_party/yaml-cpp/stream.cpp	/^Stream::operator bool() const {$/;"	f	class:YAML::Stream
operator bool	src/3rd_party/yaml-cpp/streamcharsource.h	/^inline StreamCharSource::operator bool() const {$/;"	f	class:YAML::StreamCharSource
operator bool	src/3rd_party/yaml-cpp/stringsource.h	/^  operator bool() const { return m_offset < m_size; }$/;"	f	class:YAML::StringCharSource
operator bool	src/common/file_stream.h	/^  operator bool() { return (bool)istream_; }$/;"	f	class:InputFileStream
operator bool	src/common/file_stream.h	/^  operator bool() { return (bool)ostream_; }$/;"	f	class:OutputFileStream
operator bool	src/data/batch_generator.h	/^  operator bool() const { return !bufferedBatches_.empty(); }$/;"	f	class:marian::data::BatchGenerator
operator int	src/3rd_party/spdlog/details/format.h	/^    operator int() const$/;"	f	struct:fmt::internal::DummyInt
operator int	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    operator int() const$/;"	f	struct:fmt::internal::DummyInt
operator node_iterator_value<V>*	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^    operator node_iterator_value<V>*() { return std::addressof(m_ref); }$/;"	f	struct:YAML::detail::node_iterator_base::proxy
operator std::istream&	src/common/file_stream.h	/^  operator std::istream&() { return istream_; }$/;"	f	class:InputFileStream
operator std::ostream&	src/common/file_stream.h	/^  operator std::ostream&() { return ostream_; }$/;"	f	class:OutputFileStream
operator std::string	src/common/shape.h	/^    operator std::string() const {$/;"	f	struct:marian::Shape
operator |	src/3rd_party/catch.hpp	/^    inline ResultDisposition::Flags operator | ( ResultDisposition::Flags lhs, ResultDisposition::Flags rhs ) {$/;"	f	namespace:Catch
operator |	src/3rd_party/spdlog/tests/catch.hpp	/^    inline ResultDisposition::Flags operator | ( ResultDisposition::Flags lhs, ResultDisposition::Flags rhs ) {$/;"	f	namespace:Catch
operator ||	src/3rd_party/catch.hpp	/^            MatchAnyOf<ArgT>& operator || ( MatcherBase<ArgT> const& other ) {$/;"	f	struct:Catch::Matchers::Impl::MatchAnyOf
operator ||	src/3rd_party/catch.hpp	/^        MatchAnyOf<ComparatorT> MatcherBase<ObjectT, ComparatorT>::operator || ( MatcherBase const& other ) const {$/;"	f	class:Catch::Matchers::Impl::MatcherBase
operator ||	src/3rd_party/yaml-cpp/regex_yaml.cpp	/^RegEx operator||(const RegEx& ex1, const RegEx& ex2) {$/;"	f	namespace:YAML
opt	src/common/keywords.h	/^typename Match::value_type opt(False foo,$/;"	f	namespace:marian::keywords
opt	src/common/keywords.h	/^typename Match::value_type opt(True foo,$/;"	f	namespace:marian::keywords
opt	src/layers/factory.h	/^  T opt(const std::string& key) {$/;"	f	class:marian::Factory
opt	src/layers/factory.h	/^  T opt(const std::string& key, T defaultValue) {$/;"	f	class:marian::Factory
opt	src/layers/generic.h	/^  T opt(const std::string key) {$/;"	f	class:marian::mlp::Layer
opt	src/layers/generic.h	/^  T opt(const std::string key, T defaultValue) {$/;"	f	class:marian::mlp::Layer
opt	src/models/encdec.h	/^  T opt(const std::string& key) {$/;"	f	class:marian::DecoderBase
opt	src/models/encdec.h	/^  T opt(const std::string& key) {$/;"	f	class:marian::EncoderBase
opt	src/models/encdec.h	/^  T opt(const std::string& key) {$/;"	f	class:marian::EncoderDecoder
opt	src/rnn/types.h	/^  T opt(const std::string& key) {$/;"	f	class:marian::rnn::Stackable
opt	src/rnn/types.h	/^  T opt(const std::string& key, T defaultValue) {$/;"	f	class:marian::rnn::Stackable
opt_	src/training/graph_group.h	/^  Ptr<OptimizerBase> opt_;$/;"	m	class:marian::GraphGroup
options_	src/common/options.h	/^  YAML::Node options_;$/;"	m	class:marian::Options
options_	src/data/batch_generator.h	/^  Ptr<Config> options_;$/;"	m	class:marian::data::BatchGenerator
options_	src/data/corpus.h	/^  Ptr<Config> options_;$/;"	m	class:marian::data::Corpus
options_	src/data/filter.h	/^  Ptr<Config> options_;$/;"	m	class:marian::Filter
options_	src/data/text_input.h	/^  Ptr<Config> options_;$/;"	m	class:marian::data::TextInput
options_	src/examples/mnist/model.h	/^  Ptr<Options> options_;$/;"	m	class:marian::models::MnistFeedForwardNet
options_	src/examples/mnist/training.h	/^  Ptr<Config> options_;$/;"	m	class:marian::TrainMNIST
options_	src/layers/constructors.h	/^  Ptr<Options> options_;$/;"	m	class:marian::mlp::MLP
options_	src/layers/factory.h	/^  Ptr<Options> options_;$/;"	m	class:marian::Factory
options_	src/layers/generic.h	/^  Ptr<Options> options_;$/;"	m	class:marian::mlp::Layer
options_	src/models/encdec.h	/^  Ptr<Options> options_;$/;"	m	class:marian::DecoderBase
options_	src/models/encdec.h	/^  Ptr<Options> options_;$/;"	m	class:marian::EncoderBase
options_	src/models/encdec.h	/^  Ptr<Options> options_;$/;"	m	class:marian::EncoderDecoder
options_	src/rescorer/rescorer.h	/^  Ptr<Config> options_;$/;"	m	class:marian::Rescore
options_	src/rnn/rnn.h	/^  Ptr<Options> options_;$/;"	m	class:marian::rnn::BaseRNN
options_	src/rnn/types.h	/^  Ptr<Options> options_;$/;"	m	class:marian::rnn::Stackable
options_	src/training/graph_group.h	/^  Ptr<Config> options_;$/;"	m	class:marian::GraphGroup
options_	src/training/scheduler.h	/^  Ptr<Config> options_;$/;"	m	class:marian::Scheduler
options_	src/training/training.h	/^  Ptr<Config> options_;$/;"	m	class:marian::Train
options_	src/training/validator.h	/^  Ptr<Config> options_;$/;"	m	class:marian::Validator
options_	src/translator/beam_search.h	/^  Ptr<Config> options_;$/;"	m	class:marian::BeamSearch
options_	src/translator/translator.h	/^  Ptr<Config> options_;$/;"	m	class:marian::TranslateMultiGPU
options_	src/translator/translator.h	/^  Ptr<Config> options_;$/;"	m	class:marian::TranslateServiceMultiGPU
os	contrib/vim/.ycm_extra_conf.py	/^import os$/;"	i
os	scripts/embeddings/prepare_corpus.py	/^import os$/;"	i
os	scripts/embeddings/process_word2vec.py	/^import os$/;"	i
os	scripts/python/example.py	/^import os$/;"	i
os	scripts/python/mariannmt_server.py	/^import os$/;"	i
os	src/3rd_party/spdlog/details/os.h	/^namespace os$/;"	n	namespace:spdlog::details
os	src/3rd_party/spdlog/include/spdlog/common.h	/^namespace os$/;"	n	namespace:spdlog::details
os	src/3rd_party/spdlog/include/spdlog/details/os.h	/^namespace os$/;"	n	namespace:spdlog::details
oss	src/3rd_party/catch.hpp	/^        std::ostringstream oss;$/;"	m	struct:Catch::CopyableStream
oss	src/3rd_party/spdlog/tests/catch.hpp	/^        std::ostringstream oss;$/;"	m	struct:Catch::CopyableStream
ostream_	src/common/file_stream.h	/^  io::filtering_ostream ostream_;$/;"	m	class:OutputFileStream
ostream_sink	src/3rd_party/spdlog/include/spdlog/sinks/ostream_sink.h	/^    explicit ostream_sink(std::ostream& os, bool force_flush=false) :_ostream(os), _force_flush(force_flush) {}$/;"	f	class:spdlog::sinks::ostream_sink
ostream_sink	src/3rd_party/spdlog/include/spdlog/sinks/ostream_sink.h	/^class ostream_sink: public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
ostream_sink	src/3rd_party/spdlog/sinks/ostream_sink.h	/^    explicit ostream_sink(std::ostream& os, bool force_flush=false) :_ostream(os), _force_flush(force_flush) {}$/;"	f	class:spdlog::sinks::ostream_sink
ostream_sink	src/3rd_party/spdlog/sinks/ostream_sink.h	/^class ostream_sink: public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
ostream_sink_mt	src/3rd_party/spdlog/include/spdlog/sinks/ostream_sink.h	/^typedef ostream_sink<std::mutex> ostream_sink_mt;$/;"	t	namespace:spdlog::sinks
ostream_sink_mt	src/3rd_party/spdlog/sinks/ostream_sink.h	/^typedef ostream_sink<std::mutex> ostream_sink_mt;$/;"	t	namespace:spdlog::sinks
ostream_sink_st	src/3rd_party/spdlog/include/spdlog/sinks/ostream_sink.h	/^typedef ostream_sink<details::null_mutex> ostream_sink_st;$/;"	t	namespace:spdlog::sinks
ostream_sink_st	src/3rd_party/spdlog/sinks/ostream_sink.h	/^typedef ostream_sink<details::null_mutex> ostream_sink_st;$/;"	t	namespace:spdlog::sinks
ostream_wrapper	src/3rd_party/yaml-cpp/ostream_wrapper.cpp	/^ostream_wrapper::ostream_wrapper()$/;"	f	class:YAML::ostream_wrapper
ostream_wrapper	src/3rd_party/yaml-cpp/ostream_wrapper.cpp	/^ostream_wrapper::ostream_wrapper(std::ostream& stream)$/;"	f	class:YAML::ostream_wrapper
ostream_wrapper	src/3rd_party/yaml-cpp/ostream_wrapper.h	/^class YAML_CPP_API ostream_wrapper {$/;"	c	namespace:YAML
other	src/3rd_party/catch.hpp	/^        SourceLineInfo(SourceLineInfo const& other)          = default;$/;"	m	struct:Catch::SourceLineInfo
other	src/3rd_party/spdlog/details/async_log_helper.h	/^        async_msg& operator=(async_msg& other) = delete;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
other	src/3rd_party/spdlog/details/line_logger_fwd.h	/^    line_logger(const line_logger& other) = delete;$/;"	m	class:spdlog::details::line_logger
other	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^        async_msg& operator=(const async_msg& other) = delete;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
other	src/3rd_party/spdlog/include/spdlog/details/log_msg.h	/^    log_msg& operator=(log_msg&& other) = delete;$/;"	m	struct:spdlog::details::log_msg
other	src/3rd_party/spdlog/include/spdlog/details/log_msg.h	/^    log_msg(const log_msg& other)  = delete;$/;"	m	struct:spdlog::details::log_msg
other	src/3rd_party/spdlog/include/spdlog/details/log_msg.h	/^    log_msg(log_msg&& other) = delete;$/;"	m	struct:spdlog::details::log_msg
other	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    wincolor_sink& operator=(const wincolor_sink& other) = delete;$/;"	m	class:spdlog::sinks::wincolor_sink
other	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    wincolor_sink(const wincolor_sink& other) = delete;$/;"	m	class:spdlog::sinks::wincolor_sink
other	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    ansicolor_sink& operator=(const ansicolor_sink& other) = delete;$/;"	m	class:spdlog::sinks::ansicolor_sink
other	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    ansicolor_sink(const ansicolor_sink& other) = delete;$/;"	m	class:spdlog::sinks::ansicolor_sink
outStrm_	src/rescorer/score_collector.h	/^  UPtr<OutputFileStream> outStrm_;$/;"	m	class:marian::ScoreCollector
outStrm_	src/translator/output_collector.h	/^  UPtr<OutputFileStream> outStrm_;$/;"	m	class:marian::OutputCollector
out_handle_	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    HANDLE out_handle_;$/;"	m	class:spdlog::sinks::wincolor_sink
output	src/rnn/types.h	/^  Expr output;$/;"	m	struct:marian::rnn::State
outputs	src/rnn/types.h	/^  Expr outputs() {$/;"	f	class:marian::rnn::States
outputs_	src/rescorer/score_collector.h	/^  Outputs outputs_;$/;"	m	class:marian::ScoreCollector
outputs_	src/translator/output_collector.h	/^  Outputs outputs_;$/;"	m	class:marian::OutputCollector
outputs_	src/translator/output_collector.h	/^  Outputs outputs_;$/;"	m	class:marian::StringCollector
overflow	src/3rd_party/spdlog/details/format.h	/^    int_type overflow(int_type ch = traits_type::eof())$/;"	f	class:fmt::FormatBuf
overflow	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.h	/^    int_type overflow(int_type ch = traits_type::eof())$/;"	f	class:fmt::internal::FormatBuf
override	src/3rd_party/spdlog/async_logger.h	/^    void _log_msg(details::log_msg& msg) override;$/;"	m	class:spdlog::async_logger
override	src/3rd_party/spdlog/async_logger.h	/^    void _set_formatter(spdlog::formatter_ptr msg_formatter) override;$/;"	m	class:spdlog::async_logger
override	src/3rd_party/spdlog/async_logger.h	/^    void _set_pattern(const std::string& pattern) override;$/;"	m	class:spdlog::async_logger
override	src/3rd_party/spdlog/async_logger.h	/^    void flush() override;$/;"	m	class:spdlog::async_logger
override	src/3rd_party/spdlog/formatter.h	/^    void format(details::log_msg& msg) override;$/;"	m	class:spdlog::pattern_formatter
override	src/3rd_party/spdlog/include/spdlog/async_logger.h	/^    virtual log_err_handler error_handler() override;$/;"	m	class:spdlog::SPDLOG_FINAL
override	src/3rd_party/spdlog/include/spdlog/async_logger.h	/^    virtual void set_error_handler(log_err_handler) override;$/;"	m	class:spdlog::SPDLOG_FINAL
override	src/3rd_party/spdlog/include/spdlog/async_logger.h	/^    void _set_formatter(spdlog::formatter_ptr msg_formatter) override;$/;"	m	class:spdlog::SPDLOG_FINAL
override	src/3rd_party/spdlog/include/spdlog/async_logger.h	/^    void _set_pattern(const std::string& pattern, pattern_time_type pattern_time) override;$/;"	m	class:spdlog::SPDLOG_FINAL
override	src/3rd_party/spdlog/include/spdlog/async_logger.h	/^    void _sink_it(details::log_msg& msg) override;$/;"	m	class:spdlog::SPDLOG_FINAL
override	src/3rd_party/spdlog/include/spdlog/async_logger.h	/^    void flush() override;$/;"	m	class:spdlog::SPDLOG_FINAL
override	src/3rd_party/spdlog/include/spdlog/formatter.h	/^    void format(details::log_msg& msg) override;$/;"	m	class:spdlog::SPDLOG_FINAL
override	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    virtual void flush() override;$/;"	m	class:spdlog::sinks::ansicolor_sink
override	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    virtual void log(const details::log_msg& msg) override;$/;"	m	class:spdlog::sinks::ansicolor_sink
override	src/common/config.cpp	/^void Config::override(const YAML::Node& params) {$/;"	f	class:marian::Config
owned	src/3rd_party/yaml-cpp/binary.h	/^  bool owned() const { return !m_unownedData; }$/;"	f	class:YAML::Binary
pContainer	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^    void* pContainer;$/;"	m	struct:YAML::GraphBuilderAdapter::ContainerFrame
pIndent	src/3rd_party/yaml-cpp/scanner.h	/^    IndentMarker *pIndent;$/;"	m	struct:YAML::Scanner::SimpleKey
pKey	src/3rd_party/yaml-cpp/scanner.h	/^    Token *pMapStart, *pKey;$/;"	m	struct:YAML::Scanner::SimpleKey
pMapStart	src/3rd_party/yaml-cpp/scanner.h	/^    Token *pMapStart, *pKey;$/;"	m	struct:YAML::Scanner::SimpleKey
pNode	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  V* pNode;$/;"	m	struct:YAML::detail::node_iterator_value
pPrevKeyNode	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^    void* pPrevKeyNode;$/;"	m	struct:YAML::GraphBuilderAdapter::ContainerFrame
pStartToken	src/3rd_party/yaml-cpp/scanner.h	/^    Token *pStartToken;$/;"	m	struct:YAML::Scanner::IndentMarker
p_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class p_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
pad	src/3rd_party/spdlog/details/format.h	/^inline StrFormatSpec<Char> pad($/;"	f	namespace:fmt
pad	src/3rd_party/spdlog/details/format.h	/^inline StrFormatSpec<wchar_t> pad($/;"	f	namespace:fmt
pad	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline StrFormatSpec<Char> pad($/;"	f	namespace:fmt
pad	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline StrFormatSpec<wchar_t> pad($/;"	f	namespace:fmt
pad0_	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    cacheline_pad_t         pad0_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
pad0_	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^    cacheline_pad_t         pad0_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
pad1_	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    cacheline_pad_t         pad1_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
pad1_	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^    cacheline_pad_t         pad1_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
pad2_	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    cacheline_pad_t         pad2_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
pad2_	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^    cacheline_pad_t         pad2_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
pad3_	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    cacheline_pad_t         pad3_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
pad3_	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^    cacheline_pad_t         pad3_;$/;"	m	class:spdlog::details::mpmc_bounded_queue
pad_n_join	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^static fmt::MemoryWriter& pad_n_join(fmt::MemoryWriter& w, int v1, int v2, char sep)$/;"	f	namespace:spdlog::details
pad_n_join	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^static fmt::MemoryWriter& pad_n_join(fmt::MemoryWriter& w, int v1, int v2, int v3, char sep)$/;"	f	namespace:spdlog::details
pad_n_join	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^static fmt::MemoryWriter& pad_n_join(fmt::MemoryWriter& w, int v1, int v2, char sep)$/;"	f	namespace:spdlog::details
pad_n_join	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^static fmt::MemoryWriter& pad_n_join(fmt::MemoryWriter& w, int v1, int v2, int v3, char sep)$/;"	f	namespace:spdlog::details
param	src/graph/expression_graph.h	/^  Expr param(std::string name, Shape shape, Args... args) {$/;"	f	class:marian::ExpressionGraph
params	src/3rd_party/yaml-cpp/token.h	/^  std::vector<std::string> params;$/;"	m	struct:YAML::Token
params	src/graph/expression_graph.h	/^  Ptr<Parameters>& params() { return params_; }$/;"	f	class:marian::ExpressionGraph
paramsAllocAvg_	src/training/graph_group_async.h	/^  std::vector<Ptr<TensorAllocator>> paramsAllocAvg_;$/;"	m	class:marian::AsyncGraphGroup
paramsAllocAvg_	src/training/graph_group_async_drop.h	/^  std::vector<Ptr<TensorAllocator>> paramsAllocAvg_;$/;"	m	class:marian::AsyncGraphGroup
paramsAllocAvg_	src/training/graph_group_sync.h	/^  std::vector<Ptr<TensorAllocator>> paramsAllocAvg_;$/;"	m	class:marian::SyncGraphGroup
paramsAlloc_	src/training/graph_group_async.h	/^  std::vector<Ptr<TensorAllocator>> paramsAlloc_;$/;"	m	class:marian::AsyncGraphGroup
paramsAlloc_	src/training/graph_group_async_drop.h	/^  std::vector<Ptr<TensorAllocator>> paramsAlloc_;$/;"	m	class:marian::AsyncGraphGroup
paramsAllocs_	src/training/graph_group_sync.h	/^  std::vector<Ptr<TensorAllocator>> paramsAllocs_;$/;"	m	class:marian::SyncGraphGroup
paramsAvg_	src/training/graph_group_async.h	/^  std::vector<Tensor> paramsAvg_;$/;"	m	class:marian::AsyncGraphGroup
paramsAvg_	src/training/graph_group_async_drop.h	/^  std::vector<Tensor> paramsAvg_;$/;"	m	class:marian::AsyncGraphGroup
paramsAvg_	src/training/graph_group_sync.h	/^  std::vector<Tensor> paramsAvg_;$/;"	m	class:marian::SyncGraphGroup
params_	src/graph/expression_graph.h	/^  Ptr<Parameters> params_;$/;"	m	class:marian::ExpressionGraph
params_	src/graph/parameters.h	/^  std::vector<Expr> params_;$/;"	m	class:marian::Parameters
params_	src/layers/generic.h	/^  std::vector<Expr> params_;$/;"	m	class:marian::mlp::Dense
params_	src/training/graph_group_async.h	/^  std::vector<Tensor> params_;$/;"	m	class:marian::AsyncGraphGroup
params_	src/training/graph_group_async_drop.h	/^  std::vector<std::vector<Tensor>> params_;$/;"	m	class:marian::AsyncGraphGroup
params_	src/training/graph_group_sync.h	/^  std::vector<Tensor> params_;$/;"	m	class:marian::SyncGraphGroup
parenthesized	src/3rd_party/catch.hpp	/^        bool parenthesized;$/;"	m	struct:Catch::AssertionResultData
parse	src/common/options.h	/^  void parse(const std::string& yaml) {$/;"	f	class:marian::Options
parseOptions	src/common/config_parser.cpp	/^void ConfigParser::parseOptions(int argc, char** argv, bool doValidate) {$/;"	f	class:marian::ConfigParser
parseParams	src/optimizers/optimizers.h	/^  virtual void parseParams(const std::vector<float>& params) {$/;"	f	class:marian::Adagrad
parseParams	src/optimizers/optimizers.h	/^  virtual void parseParams(const std::vector<float>& params) {$/;"	f	class:marian::Adam
parseParams	src/optimizers/optimizers.h	/^  virtual void parseParams(const std::vector<float>& params) {}$/;"	f	class:marian::Sgd
parse_args	scripts/contrib/inject_model_params.py	/^def parse_args():$/;"	f
parse_args	scripts/python/mariannmt_server.py	/^def parse_args():$/;"	f
parse_args	scripts/server/client_example.py	/^def parse_args():$/;"	f
parse_flags	src/3rd_party/spdlog/details/format.cc	/^void fmt::internal::PrintfFormatter<Char>::parse_flags($/;"	f	class:fmt::internal::PrintfFormatter
parse_flags	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^void fmt::internal::PrintfFormatter<Char>::parse_flags($/;"	f	class:fmt::internal::PrintfFormatter
parse_header	src/3rd_party/spdlog/details/format.cc	/^unsigned fmt::internal::PrintfFormatter<Char>::parse_header($/;"	f	class:fmt::internal::PrintfFormatter
parse_header	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^unsigned fmt::internal::PrintfFormatter<Char>::parse_header($/;"	f	class:fmt::internal::PrintfFormatter
parse_npy_header	src/3rd_party/cnpy/cnpy.cpp	/^void cnpy::parse_npy_header(FILE* fp, unsigned int& word_size, unsigned int*& shape, unsigned int& ndims, bool& fortran_order) {  $/;"	f	class:cnpy
parse_user_args	scripts/embeddings/prepare_corpus.py	/^def parse_user_args():$/;"	f
parse_user_args	scripts/embeddings/process_word2vec.py	/^def parse_user_args():$/;"	f
parse_zip_footer	src/3rd_party/cnpy/cnpy.cpp	/^void cnpy::parse_zip_footer(FILE* fp, unsigned short& nrecs, unsigned int& global_header_size, unsigned int& global_header_offset)$/;"	f	class:cnpy
path	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::string method, path, query_string, http_version;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
path	src/common/file_stream.h	/^  std::string path() { return file_.string(); }$/;"	f	class:InputFileStream
path	src/common/file_stream.h	/^  std::string path() { return file_.string(); }$/;"	f	class:OutputFileStream
path_match	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      regex::smatch path_match;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
paths_	src/data/dataset.h	/^  std::vector<std::string> paths_;$/;"	m	class:marian::data::DatasetBase
pattern_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^inline spdlog::pattern_formatter::pattern_formatter(const std::string& pattern)$/;"	f	class:spdlog::pattern_formatter
pattern_formatter	src/3rd_party/spdlog/formatter.h	/^class pattern_formatter : public formatter$/;"	c	namespace:spdlog
pattern_formatter	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^inline spdlog::pattern_formatter::pattern_formatter(const std::string& pattern, pattern_time_type pattern_time)$/;"	f	class:spdlog::pattern_formatter
pattern_time_type	src/3rd_party/spdlog/include/spdlog/common.h	/^enum class pattern_time_type$/;"	c	namespace:spdlog
peek	src/3rd_party/yaml-cpp/scanner.cpp	/^Token& Scanner::peek() {$/;"	f	class:YAML::Scanner
peek	src/3rd_party/yaml-cpp/stream.cpp	/^char Stream::peek() const {$/;"	f	class:YAML::Stream
penalties_	src/translator/scorers.h	/^  Expr penalties_;$/;"	m	class:marian::UnseenWordPenalty
penalties_	src/translator/scorers.h	/^  Expr penalties_;$/;"	m	class:marian::WordPenalty
penalties_	src/translator/scorers.h	/^  Expr penalties_;$/;"	m	class:marian::WordPenaltyState
performOptionalSelector	src/3rd_party/catch.hpp	/^inline id performOptionalSelector( id obj, SEL sel ) {$/;"	f
performOptionalSelector	src/3rd_party/spdlog/tests/catch.hpp	/^inline id performOptionalSelector( id obj, SEL sel ) {$/;"	f
pid	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline int pid()$/;"	f	namespace:spdlog::details::os
pipe	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	/^void fmt::File::pipe(File &read_end, File &write_end) {$/;"	f	class:fmt::File
pluralise	src/3rd_party/catch.hpp	/^    struct pluralise {$/;"	s	namespace:Catch
pluralise	src/3rd_party/spdlog/tests/catch.hpp	/^    struct pluralise {$/;"	s	namespace:Catch
pointer	src/3rd_party/spdlog/details/format.h	/^        const void *pointer;$/;"	m	union:fmt::internal::Value::__anon21
pointer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        const void *pointer;$/;"	m	union:fmt::internal::Value::__anon59
pool_	src/training/graph_group_async.h	/^  ThreadPool pool_;$/;"	m	class:marian::AsyncGraphGroup
pool_	src/training/graph_group_async_drop.h	/^  ThreadPool pool_;$/;"	m	class:marian::AsyncGraphGroup
poolingDesc_	src/kernels/cudnn_wrappers.h	/^  cudnnPoolingDescriptor_t poolingDesc_;$/;"	m	class:marian::PoolingWrapper
poolingMode_	src/kernels/cudnn_wrappers.h	/^  cudnnPoolingMode_t poolingMode_;$/;"	m	class:marian::PoolingWrapper
pooling_	src/graph/node_operators_unary.h	/^  PoolingWrapper pooling_;$/;"	m	class:marian::PoolingOp
pop	src/3rd_party/yaml-cpp/scanner.cpp	/^void Scanner::pop() {$/;"	f	class:YAML::Scanner
pop	src/3rd_party/yaml-cpp/setting.h	/^  virtual void pop() { m_pCurSetting->restore(m_oldSetting); }$/;"	f	class:YAML::SettingChange
port	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      Config(unsigned short port) noexcept : port(port) {}$/;"	f	class:SimpleWeb::SocketServerBase::Config
port	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      unsigned short port;$/;"	m	class:SimpleWeb::SocketServerBase::Config
pos	src/3rd_party/svd/defs_and_types.h	/^  int pos;$/;"	m	struct:hist_rec
pos	src/3rd_party/yaml-cpp/mark.h	/^  int pos;$/;"	m	struct:YAML::Mark
pos	src/3rd_party/yaml-cpp/ostream_wrapper.h	/^  std::size_t pos() const { return m_pos; }$/;"	f	class:YAML::ostream_wrapper
pos	src/3rd_party/yaml-cpp/stream.h	/^  int pos() const { return m_mark.pos; }$/;"	f	class:YAML::Stream
pos_	src/data/corpus.h	/^  long long int pos_;$/;"	m	class:marian::data::CorpusIterator
pos_	src/data/text_input.h	/^  long long int pos_;$/;"	m	class:marian::data::TextIterator
pow	src/functional/floats.h	/^      constexpr float pow(int exp) {$/;"	f	namespace:marian::functional::unsigned2float
powr	src/functional/floats.h	/^      constexpr float powr(int exp) {$/;"	f	namespace:marian::functional::unsigned2float
precision	src/3rd_party/spdlog/details/format.h	/^    int precision() const$/;"	f	struct:fmt::AlignSpec
precision	src/3rd_party/spdlog/details/format.h	/^    int precision() const$/;"	f	struct:fmt::FormatSpec
precision	src/3rd_party/spdlog/details/format.h	/^    int precision() const$/;"	f	struct:fmt::TypeSpec
precision	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    int precision() const$/;"	f	struct:fmt::AlignSpec
precision	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    int precision() const$/;"	f	struct:fmt::FormatSpec
precision	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    int precision() const$/;"	f	struct:fmt::TypeSpec
precision_	src/3rd_party/spdlog/details/format.h	/^    int precision_;$/;"	m	struct:fmt::FormatSpec
precision_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    int precision_;$/;"	m	struct:fmt::FormatSpec
prefix	src/3rd_party/yaml-cpp/emittermanip.h	/^  std::string prefix;$/;"	m	struct:YAML::_Tag
prefix_	src/models/encdec.h	/^  std::string prefix_;$/;"	m	class:marian::EncoderDecoder
prefix_	src/rnn/cells.h	/^  std::string prefix_;$/;"	m	class:marian::rnn::FastLSTM
prefix_	src/rnn/cells.h	/^  std::string prefix_;$/;"	m	class:marian::rnn::GRU
prepare	src/data/batch_generator.h	/^  void prepare(bool shuffle = true) {$/;"	f	class:marian::data::BatchGenerator
prepare	src/data/corpus.h	/^  void prepare() {$/;"	f	class:marian::data::Corpus
prepare	src/data/dataset.h	/^  virtual void prepare() {}$/;"	f	class:marian::data::DatasetBase
prepare	src/data/text_input.h	/^  void prepare() {}$/;"	f	class:marian::data::TextInput
prepare_int_buffer	src/3rd_party/spdlog/details/format.h	/^    CharPtr prepare_int_buffer(unsigned num_digits,$/;"	f	class:BasicWriter
prepare_int_buffer	src/3rd_party/spdlog/details/format.h	/^BasicWriter<Char>::prepare_int_buffer($/;"	f	class:BasicWriter
prepare_int_buffer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    CharPtr prepare_int_buffer(unsigned num_digits,$/;"	f	class:BasicWriter
prepare_int_buffer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^BasicWriter<Char>::prepare_int_buffer($/;"	f	class:BasicWriter
prepare_logdir	src/3rd_party/spdlog/tests/utils.cpp	/^void prepare_logdir()$/;"	f
prev	src/3rd_party/svd/defs_and_types.h	/^  struct hist_rec *prev, *next;$/;"	m	struct:hist_rec	typeref:struct:hist_rec::hist_rec
prevHyp_	src/translator/hypothesis.h	/^  const Ptr<Hypothesis> prevHyp_;$/;"	m	class:marian::Hypothesis
prevIndex_	src/translator/hypothesis.h	/^  const size_t prevIndex_;$/;"	m	class:marian::Hypothesis
prevent_child_fd	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline void prevent_child_fd(FILE *f)$/;"	f	namespace:spdlog::details::os
print	src/3rd_party/spdlog/details/format.cc	/^FMT_FUNC void fmt::print(CStringRef format_str, ArgList args)$/;"	f	class:fmt
print	src/3rd_party/spdlog/details/format.cc	/^FMT_FUNC void fmt::print(std::FILE *f, CStringRef format_str, ArgList args)$/;"	f	class:fmt
print	src/3rd_party/spdlog/details/format.cc	/^FMT_FUNC void fmt::print(std::ostream &os, CStringRef format_str,$/;"	f	class:fmt
print	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^FMT_FUNC void fmt::print(CStringRef format_str, ArgList args) {$/;"	f	class:fmt
print	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^FMT_FUNC void fmt::print(std::FILE *f, CStringRef format_str, ArgList args) {$/;"	f	class:fmt
print	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.cc	/^FMT_FUNC void print(std::ostream &os, CStringRef format_str, ArgList args) {$/;"	f	namespace:fmt
print	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    void print(CStringRef format_str, const ArgList &args)$/;"	f	class:fmt::BufferedFile
print_colored	src/3rd_party/spdlog/details/format.cc	/^FMT_FUNC void fmt::print_colored(Color c, CStringRef format, ArgList args)$/;"	f	class:fmt
print_colored	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^FMT_FUNC void fmt::print_colored(Color c, CStringRef format, ArgList args) {$/;"	f	class:fmt
print_function	scripts/contrib/inject_model_params.py	/^from __future__ import print_function$/;"	i
print_function	scripts/embeddings/export_embeddings.py	/^from __future__ import print_function$/;"	i
print_function	scripts/embeddings/prepare_corpus.py	/^from __future__ import print_function$/;"	i
print_function	scripts/embeddings/process_word2vec.py	/^from __future__ import print_function$/;"	i
print_function	scripts/server/client_example.py	/^from __future__ import print_function, unicode_literals, division$/;"	i
printf	src/3rd_party/spdlog/details/format.h	/^inline int printf(CStringRef format, ArgList args)$/;"	f
printf	src/3rd_party/spdlog/details/format.h	/^void printf(BasicWriter<Char> &w, BasicCStringRef<Char> format, ArgList args)$/;"	f
printf	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline int printf(CStringRef format, ArgList args)$/;"	f
printf	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^void printf(BasicWriter<Char> &w, BasicCStringRef<Char> format, ArgList args)$/;"	f
printing_	src/translator/output_collector.h	/^  Ptr<PrintingStrategy> printing_;$/;"	m	class:marian::OutputCollector
probs	src/data/filter.h	/^  std::pair<std::vector<size_t>, std::vector<float>>& probs() { return probs_; }$/;"	f	class:marian::FilterInfo
probs_	src/data/filter.h	/^  std::pair<std::vector<size_t>, std::vector<float>> probs_;$/;"	m	class:marian::FilterInfo
probs_	src/models/states.h	/^  Expr probs_;$/;"	m	class:marian::DecoderState
process_next_msg	src/3rd_party/spdlog/details/async_log_helper.h	/^inline bool spdlog::details::async_log_helper::process_next_msg(log_clock::time_point& last_pop, log_clock::time_point& last_flush)$/;"	f	class:spdlog::details::async_log_helper
process_next_msg	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^inline bool spdlog::details::async_log_helper::process_next_msg(log_clock::time_point& last_pop, log_clock::time_point& last_flush)$/;"	f	class:spdlog::details::async_log_helper
progress	src/training/scheduler.h	/^  YAML::Node progress;$/;"	m	class:marian::Scheduler
proxy	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^    explicit proxy(const V& x) : m_ref(x) {}$/;"	f	struct:YAML::detail::iterator_base::proxy
proxy	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^  struct proxy {$/;"	s	class:YAML::detail::iterator_base
proxy	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^    explicit proxy(const node_iterator_value<V>& x) : m_ref(x) {}$/;"	f	struct:YAML::detail::node_iterator_base::proxy
proxy	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  struct proxy {$/;"	s	class:YAML::detail::node_iterator_base
prune	src/data/filter.h	/^  void prune(float threshold = 0.f) {$/;"	f	class:marian::Filter
pruneBeam	src/translator/beam_search.h	/^  Beams pruneBeam(const Beams& beams) {$/;"	f	class:marian::BeamSearch
ptr_	src/3rd_party/spdlog/details/format.h	/^    T *ptr_;$/;"	m	class:fmt::Buffer
ptr_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    T *ptr_;$/;"	m	class:fmt::Buffer
ptr_vector	src/3rd_party/yaml-cpp/ptr_vector.h	/^  ptr_vector() {}$/;"	f	class:YAML::ptr_vector
ptr_vector	src/3rd_party/yaml-cpp/ptr_vector.h	/^class ptr_vector : private YAML::noncopyable {$/;"	c	namespace:YAML
push	src/3rd_party/yaml-cpp/setting.h	/^  void push(std::unique_ptr<SettingChangeBase> pSettingChange) {$/;"	f	class:YAML::SettingChanges
pushGradients	src/training/graph_group_async_drop.h	/^  void pushGradients(Tensor newGrads, size_t batch_words) {$/;"	f	class:marian::AsyncGraphGroup
push_back	src/3rd_party/spdlog/details/format.h	/^    void push_back(const T &value)$/;"	f	class:fmt::Buffer
push_back	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void push_back(const T &value)$/;"	f	class:fmt::Buffer
push_back	src/3rd_party/yaml-cpp/node/detail/node.h	/^  void push_back(node& node, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node
push_back	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void push_back(node& node, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_ref
push_back	src/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::push_back(const Node& rhs) {$/;"	f	class:YAML::Node
push_back	src/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::push_back(const T& rhs) {$/;"	f	class:YAML::Node
push_back	src/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::push_back(node& node, shared_memory_holder \/* pMemory *\/) {$/;"	f	class:YAML::detail::node_data
push_back	src/3rd_party/yaml-cpp/ptr_vector.h	/^  void push_back(std::unique_ptr<T>&& t) { m_data.push_back(std::move(t)); }$/;"	f	class:YAML::ptr_vector
push_back	src/data/corpus.h	/^  void push_back(const Words& words) { tuple_.push_back(words); }$/;"	f	class:marian::data::SentenceTuple
push_back	src/data/dataset.h	/^  void push_back(Input input) { inputs_.push_back(input); }$/;"	f	class:marian::data::DataBatch
push_back	src/layers/constructors.h	/^  Accumulator<MLPFactory> push_back(const LF& lf) {$/;"	f	class:marian::mlp::MLPFactory
push_back	src/layers/constructors.h	/^  void push_back(Ptr<Layer> layer) { layers_.push_back(layer); }$/;"	f	class:marian::mlp::MLP
push_back	src/models/encdec.h	/^  void push_back(Ptr<DecoderBase> decoder) { decoders_.push_back(decoder); }$/;"	f	class:marian::EncoderDecoder
push_back	src/models/encdec.h	/^  void push_back(Ptr<EncoderBase> encoder) { encoders_.push_back(encoder); }$/;"	f	class:marian::EncoderDecoder
push_back	src/models/model_factory.h	/^  Accumulator<EncoderDecoderFactory> push_back(decoder dec) {$/;"	f	class:marian::models::EncoderDecoderFactory
push_back	src/models/model_factory.h	/^  Accumulator<EncoderDecoderFactory> push_back(encoder enc) {$/;"	f	class:marian::models::EncoderDecoderFactory
push_back	src/rnn/constructors.h	/^  Accumulator<RNNFactory> push_back(const F& f) {$/;"	f	class:marian::rnn::RNNFactory
push_back	src/rnn/constructors.h	/^  Accumulator<StackedCellFactory> push_back(const F& f) {$/;"	f	class:marian::rnn::StackedCellFactory
push_back	src/rnn/rnn.h	/^  void push_back(Ptr<Cell> cell) { cell_ = cell; }$/;"	f	class:marian::rnn::SingleLayerRNN
push_back	src/rnn/rnn.h	/^  void push_back(Ptr<Cell> cell) {$/;"	f	class:marian::rnn::RNN
push_back	src/rnn/types.h	/^  void push_back(Ptr<CellInput> input) { inputs_.push_back(input); }$/;"	f	class:marian::rnn::MultiCellInput
push_back	src/rnn/types.h	/^  void push_back(Ptr<Stackable> stackable) { stackables_.push_back(stackable); }$/;"	f	class:marian::rnn::StackedCell
push_back	src/rnn/types.h	/^  void push_back(const State& state) { states_.push_back(state); }$/;"	f	class:marian::rnn::States
push_msg	src/3rd_party/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::push_msg(details::async_log_helper::async_msg&& new_msg)$/;"	f	class:spdlog::details::async_log_helper
push_msg	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::push_msg(details::async_log_helper::async_msg&& new_msg)$/;"	f	class:spdlog::details::async_log_helper
query_string	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::string method, path, query_string, http_version;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
queue_mutex	src/3rd_party/threadpool.h	/^    std::mutex queue_mutex;$/;"	m	class:marian::ThreadPool
queue_mutex	src/3rd_party/threadpool2.h	/^    std::mutex queue_mutex;$/;"	m	class:marian::ThreadPool2
r_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class r_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
randomEmbeddings	src/layers/word2vec_reader.h	/^  std::vector<float> randomEmbeddings(int dimVoc, int dimEmb) {$/;"	f	class:marian::Word2VecReader
randomSampling	src/training/dropper.h	/^__global__ void randomSampling(float* originalData,$/;"	f	namespace:marian
raw	src/3rd_party/spdlog/details/log_msg.h	/^    fmt::MemoryWriter raw;$/;"	m	struct:spdlog::details::log_msg
raw	src/3rd_party/spdlog/include/spdlog/details/log_msg.h	/^    fmt::MemoryWriter raw;$/;"	m	struct:spdlog::details::log_msg
rawMemoryToString	src/3rd_party/catch.hpp	/^    inline std::string rawMemoryToString( const T& object ) {$/;"	f	namespace:Catch::Detail
read	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	/^std::size_t fmt::File::read(void *buffer, std::size_t count) {$/;"	f	class:fmt::File
read	src/layers/word2vec_reader.h	/^  std::vector<float> read(const std::string& fileName, int dimVoc, int dimEmb) {$/;"	f	class:marian::Word2VecReader
readIrisData	src/examples/iris/helper.cpp	/^void readIrisData(const std::string fileName,$/;"	f
read_buffer	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      asio::streambuf read_buffer;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
read_handshake	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    void read_handshake(const std::shared_ptr<Connection> &connection) {$/;"	f	class:SimpleWeb::SocketServerBase
read_message	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    void read_message(const std::shared_ptr<Connection> &connection, Endpoint &endpoint) const {$/;"	f	class:SimpleWeb::SocketServerBase
read_message_content	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    void read_message_content(const std::shared_ptr<Connection> &connection, size_t length, Endpoint &endpoint, unsigned char fin_rsv_opcode) const {$/;"	f	class:SimpleWeb::SocketServerBase
reconstructExpression	src/3rd_party/catch.hpp	/^        std::string const& reconstructExpression() const {$/;"	f	class:Catch::AssertionResultData::std
reconstructedExpression	src/3rd_party/catch.hpp	/^        mutable std::string reconstructedExpression;$/;"	m	struct:Catch::AssertionResultData
reconstructedExpression	src/3rd_party/spdlog/tests/catch.hpp	/^        std::string reconstructedExpression;$/;"	m	struct:Catch::AssertionResultData
reconstructorGroundTruth	src/models/experimental/s2s_rec.h	/^  virtual std::tuple<Expr, Expr> reconstructorGroundTruth($/;"	f	class:marian::EncoderDecoderRec
reconstructorStep	src/models/experimental/s2s_rec.h	/^  virtual Ptr<DecoderState> reconstructorStep(Ptr<DecoderState> state) {$/;"	f	class:marian::EncoderDecoderRec
red	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string red = "\\033[31m";$/;"	m	class:spdlog::sinks::ansicolor_sink
red	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string red        = "\\033[31m";$/;"	m	class:spdlog::sinks::ansicolor_sink
redirection_found	src/3rd_party/simple-websocket-server/status_code.hpp	/^    redirection_found,$/;"	m	class:SimpleWeb::StatusCode
redirection_moved_permanently	src/3rd_party/simple-websocket-server/status_code.hpp	/^    redirection_moved_permanently,$/;"	m	class:SimpleWeb::StatusCode
redirection_multiple_choices	src/3rd_party/simple-websocket-server/status_code.hpp	/^    redirection_multiple_choices = 300,$/;"	m	class:SimpleWeb::StatusCode
redirection_not_modified	src/3rd_party/simple-websocket-server/status_code.hpp	/^    redirection_not_modified,$/;"	m	class:SimpleWeb::StatusCode
redirection_permanent_redirect	src/3rd_party/simple-websocket-server/status_code.hpp	/^    redirection_permanent_redirect,$/;"	m	class:SimpleWeb::StatusCode
redirection_see_other	src/3rd_party/simple-websocket-server/status_code.hpp	/^    redirection_see_other,$/;"	m	class:SimpleWeb::StatusCode
redirection_switch_proxy	src/3rd_party/simple-websocket-server/status_code.hpp	/^    redirection_switch_proxy,$/;"	m	class:SimpleWeb::StatusCode
redirection_temporary_redirect	src/3rd_party/simple-websocket-server/status_code.hpp	/^    redirection_temporary_redirect,$/;"	m	class:SimpleWeb::StatusCode
redirection_use_proxy	src/3rd_party/simple-websocket-server/status_code.hpp	/^    redirection_use_proxy,$/;"	m	class:SimpleWeb::StatusCode
reduceBlock	src/3rd_party/reduce_all.h	/^reduceBlock(volatile float *sdata, float mySum, const unsigned int tid)$/;"	f	namespace:marian
reduceBlocks	src/3rd_party/reduce_all.h	/^reduceBlocks(Functor f, float *g_idata, float *g_odata, unsigned int n)$/;"	f	namespace:marian
reduceSinglePass	src/3rd_party/reduce_all.h	/^__global__ void reduceSinglePass(Functor f, float *g_idata, float *g_odata, unsigned int n)$/;"	f	namespace:marian
ref	src/3rd_party/yaml-cpp/node/detail/node.h	/^  const node_ref* ref() const { return m_pRef.get(); }$/;"	f	class:YAML::detail::node
regex_orderable	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      regex_orderable(const char *regex_cstr) : regex::regex(regex_cstr), str(regex_cstr) {}$/;"	f	class:SimpleWeb::SocketServerBase::regex_orderable
regex_orderable	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      regex_orderable(const std::string &regex_str) : regex::regex(regex_str), str(regex_str) {}$/;"	f	class:SimpleWeb::SocketServerBase::regex_orderable
regex_orderable	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    class regex_orderable : public regex::regex {$/;"	c	class:SimpleWeb::SocketServerBase
registerObserver	src/training/training_state.h	/^  void registerObserver(Ptr<TrainingObserver> observer) {$/;"	f	class:marian::TrainingState
registerTrainingObserver	src/training/scheduler.h	/^  void registerTrainingObserver(Ptr<TrainingObserver> observer) {$/;"	f	class:marian::Scheduler
register_logger	src/3rd_party/spdlog/details/registry.h	/^    void register_logger(std::shared_ptr<logger> logger)$/;"	f	class:spdlog::details::registry_t
register_logger	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::register_logger(std::shared_ptr<logger> logger)$/;"	f	class:spdlog
register_logger	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    void register_logger(std::shared_ptr<logger> logger)$/;"	f	class:spdlog::details::registry_t
register_logger	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline void spdlog::register_logger(std::shared_ptr<logger> logger)$/;"	f	class:spdlog
registry	src/3rd_party/spdlog/details/registry.h	/^typedef registry_t<spdlog::details::null_mutex> registry;$/;"	t	namespace:spdlog::details
registry	src/3rd_party/spdlog/details/registry.h	/^typedef registry_t<std::mutex> registry;$/;"	t	namespace:spdlog::details
registry	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^typedef registry_t<spdlog::details::null_mutex> registry;$/;"	t	namespace:spdlog::details
registry	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^typedef registry_t<std::mutex> registry;$/;"	t	namespace:spdlog::details
registry_t	src/3rd_party/spdlog/details/registry.h	/^    registry_t<Mutex>() {}$/;"	f	class:spdlog::details::registry_t
registry_t	src/3rd_party/spdlog/details/registry.h	/^template <class Mutex> class registry_t$/;"	c	namespace:spdlog::details
registry_t	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    registry_t<Mutex>() {}$/;"	f	class:spdlog::details::registry_t
registry_t	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^template <class Mutex> class registry_t$/;"	c	namespace:spdlog::details
release	src/3rd_party/catch.hpp	/^        virtual void release() const {$/;"	f	struct:Catch::SharedImpl
release	src/3rd_party/spdlog/tests/catch.hpp	/^        virtual void release() const {$/;"	f	struct:Catch::SharedImpl
remote_endpoint_address	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::string remote_endpoint_address;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
remote_endpoint_port	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      unsigned short remote_endpoint_port;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
remove	src/3rd_party/spdlog/details/os.h	/^inline int remove(const filename_t &filename)$/;"	f	namespace:spdlog::details::os
remove	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline int remove(const filename_t &filename)$/;"	f	namespace:spdlog::details::os
remove	src/3rd_party/yaml-cpp/node/detail/impl.h	/^inline bool node_data::remove(const Key& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_data
remove	src/3rd_party/yaml-cpp/node/detail/node.h	/^  bool remove(const Key& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node
remove	src/3rd_party/yaml-cpp/node/detail/node.h	/^  bool remove(node& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node
remove	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  bool remove(const Key& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_ref
remove	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  bool remove(node& key, shared_memory_holder pMemory) {$/;"	f	class:YAML::detail::node_ref
remove	src/3rd_party/yaml-cpp/node/impl.h	/^inline bool Node::remove(const Key& key) {$/;"	f	class:YAML::Node
remove	src/3rd_party/yaml-cpp/node/impl.h	/^inline bool Node::remove(const Node& key) {$/;"	f	class:YAML::Node
remove	src/3rd_party/yaml-cpp/node_data.cpp	/^bool node_data::remove(node& key, shared_memory_holder \/* pMemory *\/) {$/;"	f	class:YAML::detail::node_data
remove_sink	src/3rd_party/spdlog/include/spdlog/sinks/dist_sink.h	/^    void remove_sink(std::shared_ptr<sink> sink)$/;"	f	class:spdlog::sinks::dist_sink
remove_sink	src/3rd_party/spdlog/sinks/dist_sink.h	/^    void remove_sink(std::shared_ptr<sink> sink)$/;"	f	class:spdlog::sinks::dist_sink
remove_top_node	src/graph/expression_graph.h	/^  void remove_top_node(Expr node) { topNodes_.erase(node); }$/;"	f	class:marian::ExpressionGraph
rename	src/3rd_party/spdlog/details/os.h	/^inline int rename(const filename_t& filename1, const filename_t& filename2)$/;"	f	namespace:spdlog::details::os
rename	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline int rename(const filename_t& filename1, const filename_t& filename2)$/;"	f	namespace:spdlog::details::os
reopen	src/3rd_party/spdlog/details/file_helper.h	/^    void reopen(bool truncate)$/;"	f	class:spdlog::details::file_helper
reopen	src/3rd_party/spdlog/include/spdlog/details/file_helper.h	/^    void reopen(bool truncate)$/;"	f	class:spdlog::details::file_helper
replace_unks	scripts/embeddings/prepare_corpus.py	/^def replace_unks(l, voc):$/;"	f
replace_unks	scripts/embeddings/process_word2vec.py	/^def replace_unks(l, voc):$/;"	f
report_unhandled_arg	src/3rd_party/spdlog/details/format.cc	/^			void report_unhandled_arg()$/;"	f	class:fmt::__anon34::PrecisionHandler
report_unhandled_arg	src/3rd_party/spdlog/details/format.cc	/^			void report_unhandled_arg()$/;"	f	class:fmt::__anon34::WidthHandler
report_unhandled_arg	src/3rd_party/spdlog/details/format.h	/^    void report_unhandled_arg()$/;"	f	class:fmt::internal::ArgVisitor
report_unhandled_arg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  void report_unhandled_arg() {$/;"	f	class:fmt::__anon71::PrecisionHandler
report_unhandled_arg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  void report_unhandled_arg() {$/;"	f	class:fmt::__anon71::WidthHandler
report_unhandled_arg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void report_unhandled_arg() {}$/;"	f	class:fmt::ArgVisitor
report_unknown_type	src/3rd_party/spdlog/details/format.cc	/^FMT_FUNC void fmt::internal::report_unknown_type(char code, const char *type)$/;"	f	class:fmt::internal
report_unknown_type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^FMT_FUNC void fmt::internal::report_unknown_type(char code, const char *type) {$/;"	f	class:fmt::internal
request	scripts/python/mariannmt_server.py	/^from bottle import request, Bottle, abort$/;"	i
rescoring	src/common/config_parser.h	/^  rescoring,$/;"	m	struct:marian::ConfigMode
reserve	src/3rd_party/spdlog/details/format.h	/^    void reserve(std::size_t capacity)$/;"	f	class:fmt::Buffer
reserve	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void reserve(std::size_t capacity)$/;"	f	class:fmt::Buffer
reserve	src/tensors/allocator.h	/^  void reserve(size_t bytes) {$/;"	f	class:marian::Allocator
reserve	src/tensors/tensor_allocator.h	/^  void reserve(size_t bytes = 0) {$/;"	f	class:marian::TensorAllocator
reserve	src/tensors/tensor_cpu.h	/^  void reserve(size_t size) {$/;"	f	class:marian::DeviceCPU
reserve	src/tests/allocator_test.cpp	/^  void reserve(size_t size) {$/;"	f	class:DeviceCPU
reserveExact	src/tensors/tensor_allocator.h	/^  void reserveExact(size_t bytes = 0) {$/;"	f	class:marian::TensorAllocator
reserveWorkspaceMB	src/graph/expression_graph.h	/^  void reserveWorkspaceMB(size_t num) {$/;"	f	class:marian::ExpressionGraph
reset	src/3rd_party/catch.hpp	/^        void reset() {$/;"	f	class:Catch::Ptr
reset	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string reset = "\\033[00m";$/;"	m	class:spdlog::sinks::ansicolor_sink
reset	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string reset      = "\\033[00m";$/;"	m	class:spdlog::sinks::ansicolor_sink
reset	src/3rd_party/spdlog/tests/catch.hpp	/^        void reset() {$/;"	f	class:Catch::Ptr
reset	src/3rd_party/yaml-cpp/node/impl.h	/^inline void Node::reset(const YAML::Node& rhs) {$/;"	f	class:YAML::Node
reset	src/data/corpus.cpp	/^void Corpus::reset() {$/;"	f	class:marian::data::Corpus
reset	src/data/dataset.h	/^  virtual void reset() {}$/;"	f	class:marian::data::DatasetBase
reset	src/data/text_input.h	/^  void reset() {}$/;"	f	class:marian::data::TextInput
reset	src/tensors/tensor.h	/^  virtual void reset(Ptr<MemoryPiece> memory) { memory_ = memory; }$/;"	f	class:marian::TensorBase
resetLf	src/models/experimental/lex_probs.h	/^  void resetLf(Ptr<ExpressionGraph> graph, Ptr<data::CorpusBatch> batch) {$/;"	f	class:marian::LexProbs
reset_map	src/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::reset_map() {$/;"	f	class:YAML::detail::node_data
reset_sequence	src/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::reset_sequence() {$/;"	f	class:YAML::detail::node_data
reshapee_	src/graph/node_operators_unary.h	/^  Expr reshapee_;$/;"	m	class:marian::ReshapeNodeOp
resize	src/3rd_party/spdlog/details/format.h	/^    void resize(std::size_t new_size)$/;"	f	class:fmt::Buffer
resize	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void resize(std::size_t new_size)$/;"	f	class:fmt::Buffer
resize	src/common/shape.h	/^    void resize(size_t n) {$/;"	f	struct:marian::Shape
rest	src/tensors/allocator.h	/^  Gap rest(size_t offset) const { return Gap(data_ + offset, size_ - offset); }$/;"	f	class:marian::Gap
restore	src/3rd_party/yaml-cpp/setting.h	/^  void restore() {$/;"	f	class:YAML::SettingChanges
restore	src/3rd_party/yaml-cpp/setting.h	/^  void restore(const Setting<T>& oldSetting) { m_value = oldSetting.get(); }$/;"	f	class:YAML::Setting
result	src/gpu/tmp.h	/^  __HDI__ static float result(Functor functor,$/;"	f	struct:marian::gpu::Loop
resultDisposition	src/3rd_party/catch.hpp	/^        ResultDisposition::Flags resultDisposition;$/;"	m	struct:Catch::AssertionInfo
resultDisposition	src/3rd_party/spdlog/tests/catch.hpp	/^        ResultDisposition::Flags resultDisposition;$/;"	m	struct:Catch::AssertionInfo
resultType	src/3rd_party/catch.hpp	/^        ResultWas::OfType resultType;$/;"	m	struct:Catch::AssertionResultData
resultType	src/3rd_party/spdlog/tests/catch.hpp	/^        ResultWas::OfType resultType;$/;"	m	struct:Catch::AssertionResultData
retirementCount	src/3rd_party/reduce_all.h	/^__device__ unsigned int retirementCount = 0;$/;"	m	namespace:marian
return_type	src/3rd_party/yaml-cpp/node/impl.h	/^  typedef const T& return_type;$/;"	t	struct:YAML::detail::to_value_t
return_type	src/3rd_party/yaml-cpp/node/impl.h	/^  typedef std::string return_type;$/;"	t	struct:YAML::detail::to_value_t
reuseWorkspace	src/graph/expression_graph.h	/^  void reuseWorkspace(Ptr<ExpressionGraph> graph) {$/;"	f	class:marian::ExpressionGraph
reuse_address	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      bool reuse_address = true;$/;"	m	class:SimpleWeb::SocketServerBase::Config
reverse	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string reverse = "\\033[7m";$/;"	m	class:spdlog::sinks::ansicolor_sink
reverse	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string reverse    = "\\033[7m";$/;"	m	class:spdlog::sinks::ansicolor_sink
reverse	src/rnn/types.h	/^  void reverse() { std::reverse(states_.begin(), states_.end()); }$/;"	f	class:marian::rnn::States
reverseInt	src/examples/mnist/dataset.h	/^  int reverseInt(int i) {$/;"	f	class:marian::data::MNISTData
reverseMap	src/data/filter.h	/^  Word reverseMap(Word idx) { return reverseMap_[idx]; }$/;"	f	class:marian::FilterInfo
reverseMap_	src/data/filter.h	/^  std::vector<Word> reverseMap_;$/;"	m	class:marian::FilterInfo
rhs	src/3rd_party/spdlog/tests/catch.hpp	/^            std::string lhs, rhs, op;$/;"	m	struct:Catch::ResultBuilder::ExprComponents
rnn	src/rnn/attention.h	/^namespace rnn {$/;"	n	namespace:marian
rnn	src/rnn/cells.h	/^namespace rnn {$/;"	n	namespace:marian
rnn	src/rnn/constructors.h	/^namespace rnn {$/;"	n	namespace:marian
rnn	src/rnn/constructors.h	/^typedef Accumulator<RNNFactory> rnn;$/;"	t	namespace:marian::rnn
rnn	src/rnn/rnn.h	/^namespace rnn {$/;"	n	namespace:marian
rnn	src/rnn/types.h	/^namespace rnn {$/;"	n	namespace:marian
rnnL1	src/models/experimental/s2s_rec.h	/^  Ptr<RNN<CGRU>> rnnL1;$/;"	m	class:marian::EncoderDecoderRec
rnn_	src/models/hardatt.h	/^  Ptr<rnn::RNN> rnn_;$/;"	m	class:marian::DecoderHardAtt
rnn_	src/models/s2s.h	/^  Ptr<rnn::RNN> rnn_;$/;"	m	class:marian::DecoderS2S
rnns_	src/rnn/rnn.h	/^  std::vector<Ptr<SingleLayerRNN>> rnns_;$/;"	m	class:marian::rnn::RNN
rotating_file_sink	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    rotating_file_sink(const filename_t &base_filename,$/;"	f	class:spdlog::sinks::SPDLOG_FINAL
rotating_file_sink	src/3rd_party/spdlog/sinks/file_sinks.h	/^    rotating_file_sink(const filename_t &base_filename, const filename_t &extension,$/;"	f	class:spdlog::sinks::rotating_file_sink
rotating_file_sink	src/3rd_party/spdlog/sinks/file_sinks.h	/^class rotating_file_sink : public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
rotating_file_sink_mt	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^typedef rotating_file_sink<std::mutex> rotating_file_sink_mt;$/;"	t	namespace:spdlog::sinks
rotating_file_sink_mt	src/3rd_party/spdlog/sinks/file_sinks.h	/^typedef rotating_file_sink<std::mutex> rotating_file_sink_mt;$/;"	t	namespace:spdlog::sinks
rotating_file_sink_st	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^typedef rotating_file_sink<details::null_mutex>rotating_file_sink_st;$/;"	t	namespace:spdlog::sinks
rotating_file_sink_st	src/3rd_party/spdlog/sinks/file_sinks.h	/^typedef rotating_file_sink<details::null_mutex>rotating_file_sink_st;$/;"	t	namespace:spdlog::sinks
rotating_logger_mt	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::rotating_logger_mt(const std::string& logger_name, const filename_t& filename, size_t max_file_size, size_t max_files, bool force_flush)$/;"	f	class:spdlog
rotating_logger_mt	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::rotating_logger_mt(const std::string& logger_name, const filename_t& filename, size_t max_file_size, size_t max_files)$/;"	f	class:spdlog
rotating_logger_st	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::rotating_logger_st(const std::string& logger_name, const filename_t& filename, size_t max_file_size, size_t max_files, bool force_flush)$/;"	f	class:spdlog
rotating_logger_st	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::rotating_logger_st(const std::string& logger_name, const filename_t& filename, size_t max_file_size, size_t max_files)$/;"	f	class:spdlog
row	src/3rd_party/yaml-cpp/ostream_wrapper.h	/^  std::size_t row() const { return m_row; }$/;"	f	class:YAML::ostream_wrapper
rowIndices	src/kernels/sparse.h	/^  int* rowIndices() { return rowIndices_; }$/;"	f	class:marian::sparse::CSR
rowIndices_	src/models/experimental/lex_probs.h	/^  std::vector<int> rowIndices_;$/;"	m	class:marian::LexProbs
rows	src/kernels/sparse.h	/^  int rows() { return rows_; }$/;"	f	class:marian::sparse::CSR
run	src/examples/mnist/training.h	/^  void run() {$/;"	f	class:marian::TrainMNIST
run	src/rescorer/rescorer.h	/^  void run() {$/;"	f	class:marian::Rescore
run	src/training/training.h	/^  void run() {$/;"	f	class:marian::Train
run	src/translator/translator.h	/^  std::vector<std::string> run(const std::vector<std::string>& inputs) {$/;"	f	class:marian::TranslateServiceMultiGPU
run	src/translator/translator.h	/^  void run() {$/;"	f	class:marian::TranslateMultiGPU
runBackward	src/graph/node.h	/^  virtual void runBackward(const NodeOps& ops) {$/;"	f	class:marian::Node
runForward	src/graph/node.h	/^  virtual void runForward(const NodeOps& ops) {$/;"	f	class:marian::Node
s	src/3rd_party/catch.hpp	/^        static std::ostream &s;$/;"	m	struct:Catch::Detail::IsStreamInsertable
s_introFinalState	src/3rd_party/yaml-cpp/stream.cpp	/^static bool s_introFinalState[] = {$/;"	m	namespace:YAML	file:
s_introTransitions	src/3rd_party/yaml-cpp/stream.cpp	/^static UtfIntroState s_introTransitions[][uictMax] = {$/;"	m	namespace:YAML	file:
s_introUngetCount	src/3rd_party/yaml-cpp/stream.cpp	/^static char s_introUngetCount[][uictMax] = {$/;"	m	namespace:YAML	file:
sample	src/data/batch_generator.h	/^  typedef typename DataSet::sample sample;$/;"	t	class:marian::data::BatchGenerator
sample	src/data/dataset.h	/^  typedef Sample sample;$/;"	t	class:marian::data::DatasetBase
samples	src/data/batch_generator.h	/^  typedef std::vector<sample> samples;$/;"	t	class:marian::data::BatchGenerator
save	src/common/config.h	/^  void save(const std::string& name) {$/;"	f	class:marian::Config
save	src/examples/mnist/model.h	/^  void save(Ptr<ExpressionGraph> graph, const std::string& name) {$/;"	f	class:marian::models::MnistFeedForwardNet
save	src/examples/mnist/model.h	/^  void save(Ptr<ExpressionGraph> graph, const std::string& name, bool) {$/;"	f	class:marian::models::MnistFeedForwardNet
save	src/graph/expression_graph.h	/^  void save(const std::string& name) {$/;"	f	class:marian::ExpressionGraph
save	src/models/amun.h	/^  void save(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::Amun
save	src/models/encdec.h	/^  virtual void save(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::EncoderDecoder
save	src/models/nematus.h	/^  void save(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::Nematus
save	src/training/graph_group_async.h	/^  void save(Ptr<ExpressionGraph> graph, bool final = false) {$/;"	f	class:marian::AsyncGraphGroup
save	src/training/graph_group_async.h	/^  void save(bool final = false) { save(graphs_[0], final); }$/;"	f	class:marian::AsyncGraphGroup
save	src/training/graph_group_async_drop.h	/^  void save(Ptr<ExpressionGraph> graph, bool final = false) {$/;"	f	class:marian::AsyncGraphGroup
save	src/training/graph_group_async_drop.h	/^  void save(bool final = false) { save(graphs_[0], final); }$/;"	f	class:marian::AsyncGraphGroup
save	src/training/graph_group_singleton.h	/^  void save(Ptr<ExpressionGraph> graph, bool final = false) {$/;"	f	class:marian::SingletonGraph
save	src/training/graph_group_singleton.h	/^  void save(bool final = false) {$/;"	f	class:marian::SingletonGraph
save	src/training/graph_group_sync.h	/^  void save(Ptr<ExpressionGraph> graph, bool final = false) {$/;"	f	class:marian::SyncGraphGroup
save	src/training/graph_group_sync.h	/^  void save(bool final = false) { save(graphs_[0], final); }$/;"	f	class:marian::SyncGraphGroup
save	src/training/scheduler.h	/^  void save(const std::string& name) {$/;"	f	class:marian::Scheduler
saveModelParameters	src/models/encdec.h	/^  void saveModelParameters(const std::string& name) {$/;"	f	class:marian::EncoderDecoder
saving	src/training/scheduler.h	/^  bool saving() {$/;"	f	class:marian::Scheduler
scalar	src/3rd_party/yaml-cpp/node/detail/node.h	/^  const std::string& scalar() const { return m_pRef->scalar(); }$/;"	f	class:YAML::detail::node
scalar	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  const std::string& scalar() const { return m_scalar; }$/;"	f	class:YAML::detail::node_data
scalar	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  const std::string& scalar() const { return m_pData->scalar(); }$/;"	f	class:YAML::detail::node_ref
scalar	src/tensors/tensor.h	/^  virtual float scalar() {$/;"	f	class:marian::TensorBase
scalar_	src/graph/node_operators_binary.h	/^  float scalar_;$/;"	m	class:marian::DotBatchedNodeOp
scalar_	src/graph/node_operators_binary.h	/^  float scalar_;$/;"	m	class:marian::DotNodeOp
scalbn	src/functional/floats.h	/^      constexpr float scalbn(float value, int exponent) {$/;"	f	namespace:marian::functional::float2unsigned
scaleLearningRate_	src/training/graph_group.h	/^  bool scaleLearningRate_;$/;"	m	class:marian::GraphGroup
scatterAdd	src/training/sparse_tensor.h	/^  void scatterAdd(Tensor t, int offset = 0) {$/;"	f	class:marian::SparseTensorBase
schedulerMutex_	src/training/graph_group_async.h	/^  std::mutex schedulerMutex_;$/;"	m	class:marian::AsyncGraphGroup
schedulerMutex_	src/training/graph_group_async_drop.h	/^  boost::shared_mutex schedulerMutex_;$/;"	m	class:marian::AsyncGraphGroup
scheduler_	src/training/graph_group.h	/^  Ptr<Scheduler> scheduler_;$/;"	m	class:marian::GraphGroup
scorerByType	src/translator/scorers.cpp	/^Ptr<Scorer> scorerByType(std::string fname,$/;"	f	namespace:marian
scorers_	src/translator/beam_search.h	/^  std::vector<Ptr<Scorer>> scorers_;$/;"	m	class:marian::BeamSearch
scorers_	src/translator/translator.h	/^  std::vector<std::vector<Ptr<Scorer>>> scorers_;$/;"	m	class:marian::TranslateMultiGPU
scorers_	src/translator/translator.h	/^  std::vector<std::vector<Ptr<Scorer>>> scorers_;$/;"	m	class:marian::TranslateServiceMultiGPU
search	src/translator/beam_search.h	/^  Histories search(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::BeamSearch
seed	src/common/config.cpp	/^size_t Config::seed = (size_t)time(0);$/;"	m	class:marian::Config	file:
seed	src/common/config.h	/^  static size_t seed;$/;"	m	class:marian::Config
select	src/models/hardatt.h	/^  virtual Ptr<DecoderState> select(const std::vector<size_t>& selIdx, int beamSize) {$/;"	f	class:marian::DecoderStateHardAtt
select	src/models/states.h	/^  virtual Ptr<DecoderState> select(const std::vector<size_t>& selIdx, int beamSize) {$/;"	f	class:marian::DecoderState
select	src/models/transformer.h	/^  virtual Ptr<DecoderState> select(const std::vector<size_t> &selIdx, int beamSize) {$/;"	f	class:marian::TransformerState
select	src/rnn/types.h	/^  State select(const std::vector<size_t>& indices, int beamSize) {$/;"	f	struct:marian::rnn::State
select	src/rnn/types.h	/^  States select(const std::vector<size_t>& indices, int beamSize) {$/;"	f	class:marian::rnn::States
selectEmbeddings	src/models/encdec.h	/^  virtual void selectEmbeddings(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::DecoderBase
selectEmbeddings	src/models/encdec.h	/^  virtual void selectEmbeddings(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::EncoderDecoder
selectEmbeddings	src/models/hardatt.h	/^  virtual void selectEmbeddings(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::DecoderHardAtt
send	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      void send(const std::shared_ptr<SendStream> &message_stream, const std::function<void(const error_code &)> &callback = nullptr,$/;"	f	class:SimpleWeb::SocketServerBase::Connection
send_close	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      void send_close(int status, const std::string &reason = "", const std::function<void(const error_code &)> &callback = nullptr) {$/;"	f	class:SimpleWeb::SocketServerBase::Connection
send_from_queue	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      void send_from_queue() {$/;"	f	class:SimpleWeb::SocketServerBase::Connection
send_queue	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::list<SendData> send_queue;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
sentLexProbs_	src/models/experimental/lex_probs.h	/^  Ptr<sparse::CSR> sentLexProbs_;$/;"	m	class:marian::LexicalBias
sentenceIds_	src/data/batch.h	/^  std::vector<size_t> sentenceIds_;$/;"	m	class:marian::data::Batch
sep_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    fmt::StringRef sep_;$/;"	m	class:fmt::internal::ThousandsSep
seq	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typedef node_seq::const_iterator seq;$/;"	t	struct:YAML::detail::node_iterator_type
seq	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typedef node_seq::iterator seq;$/;"	t	struct:YAML::detail::node_iterator_type
sequenceMarker	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.cpp	/^int GraphBuilderAdapter::ContainerFrame::sequenceMarker;$/;"	m	class:YAML::GraphBuilderAdapter::ContainerFrame	file:
sequenceMarker	src/3rd_party/yaml-cpp/contrib/graphbuilderadapter.h	/^    static int sequenceMarker;$/;"	m	struct:YAML::GraphBuilderAdapter::ContainerFrame
sequence_	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^        std::atomic<size_t>   sequence_;$/;"	m	struct:spdlog::details::mpmc_bounded_queue::cell_t
sequence_	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^        std::atomic<size_t>   sequence_;$/;"	m	struct:spdlog::details::mpmc_bounded_queue::cell_t
server	scripts/python/mariannmt_server.py	/^    server = WSGIServer($/;"	v
server_error_bad_gateway	src/3rd_party/simple-websocket-server/status_code.hpp	/^    server_error_bad_gateway,$/;"	m	class:SimpleWeb::StatusCode
server_error_gateway_timeout	src/3rd_party/simple-websocket-server/status_code.hpp	/^    server_error_gateway_timeout,$/;"	m	class:SimpleWeb::StatusCode
server_error_http_version_not_supported	src/3rd_party/simple-websocket-server/status_code.hpp	/^    server_error_http_version_not_supported,$/;"	m	class:SimpleWeb::StatusCode
server_error_insufficient_storage	src/3rd_party/simple-websocket-server/status_code.hpp	/^    server_error_insufficient_storage,$/;"	m	class:SimpleWeb::StatusCode
server_error_internal_server_error	src/3rd_party/simple-websocket-server/status_code.hpp	/^    server_error_internal_server_error = 500,$/;"	m	class:SimpleWeb::StatusCode
server_error_loop_detected	src/3rd_party/simple-websocket-server/status_code.hpp	/^    server_error_loop_detected,$/;"	m	class:SimpleWeb::StatusCode
server_error_not_extended	src/3rd_party/simple-websocket-server/status_code.hpp	/^    server_error_not_extended = 510,$/;"	m	class:SimpleWeb::StatusCode
server_error_not_implemented	src/3rd_party/simple-websocket-server/status_code.hpp	/^    server_error_not_implemented,$/;"	m	class:SimpleWeb::StatusCode
server_error_service_unavailable	src/3rd_party/simple-websocket-server/status_code.hpp	/^    server_error_service_unavailable,$/;"	m	class:SimpleWeb::StatusCode
server_error_variant_also_negotiates	src/3rd_party/simple-websocket-server/status_code.hpp	/^    server_error_variant_also_negotiates,$/;"	m	class:SimpleWeb::StatusCode
set	src/3rd_party/yaml-cpp/setting.h	/^inline std::unique_ptr<SettingChangeBase> Setting<T>::set(const T& value) {$/;"	f	class:YAML::Setting
set	src/common/config.h	/^  void set(const std::string& key, const T& value) {$/;"	f	class:marian::Config
set	src/common/options.h	/^  void set(const std::string& key, T value) {$/;"	f	class:marian::Options
set	src/common/shape.h	/^    inline void set(int i, int val) {$/;"	f	struct:marian::Shape
set	src/gpu/shape.h	/^  __HDI__ void set(int i, int dim) {$/;"	f	struct:marian::gpu::ConstantShape
set	src/models/encdec.h	/^  void set(std::string key, T value) {$/;"	f	class:marian::EncoderDecoder
set	src/tensors/memory_piece.h	/^  void set(uint8_t* data, size_t size) {$/;"	f	class:marian::MemoryPiece
set	src/tensors/tensor_cpu.h	/^  void set(const std::vector<float>& v) {$/;"	f	class:marian::TensorCPU
set	src/tensors/tensor_cpu.h	/^  void set(float value) { std::fill(data_, data_ + size(), value); }$/;"	f	class:marian::TensorCPU
set	src/tensors/tensor_cpu.h	/^  void set(size_t i, float value) { data_[i] = value; }$/;"	f	class:marian::TensorCPU
setAttentionIndices	src/models/hardatt.h	/^  virtual void setAttentionIndices($/;"	f	class:marian::DecoderStateHardAtt
setDevice	src/graph/backend_gpu.h	/^  void setDevice(size_t device) { cudaSetDevice(device); }$/;"	f	class:marian::BackendGPU
setGuidedAlignment	src/data/corpus.h	/^  void setGuidedAlignment(const std::vector<float>& aln) {$/;"	f	class:marian::data::CorpusBatch
setHandles	src/graph/backend_gpu.h	/^  void setHandles(size_t device, size_t seed) {$/;"	f	class:marian::BackendGPU
setId	src/graph/node.h	/^  virtual void setId(size_t id) { id_ = id; }$/;"	f	class:marian::Node
setInference	src/graph/expression_graph.h	/^  void setInference(bool inference) { inferenceOnly_ = inference; }$/;"	f	class:marian::ExpressionGraph
setLazyInputs	src/rnn/types.h	/^  virtual void setLazyInputs($/;"	f	class:marian::rnn::Cell
setLazyInputs	src/rnn/types.h	/^  virtual void setLazyInputs($/;"	f	class:marian::rnn::StackedCell
setLoggingLevel	src/common/logging.cpp	/^bool setLoggingLevel(spdlog::logger& logger, std::string const level) {$/;"	f
setParams	src/optimizers/optimizers.h	/^  void setParams(const std::vector<float>& params) { parseParams(params); }$/;"	f	class:marian::OptimizerBase
setPrintingStrategy	src/translator/output_collector.h	/^  void setPrintingStrategy(Ptr<PrintingStrategy> strategy) {$/;"	f	class:marian::OutputCollector
setProbs	src/models/states.h	/^  virtual void setProbs(Expr probs) { probs_ = probs; }$/;"	f	class:marian::DecoderState
setPtr	src/tensors/memory_piece.h	/^  void setPtr(uint8_t* data) { data_ = data; }$/;"	f	class:marian::MemoryPiece
setReloaded	src/graph/expression_graph.h	/^  void setReloaded(bool reloaded) { reloaded_ = reloaded; }$/;"	f	class:marian::ExpressionGraph
setRetirementCount	src/3rd_party/reduce_all.h	/^cudaError_t setRetirementCount(int retCnt)$/;"	f	namespace:marian
setScheduler	src/training/graph_group_async_drop.h	/^  virtual void setScheduler(Ptr<Scheduler> scheduler) {$/;"	f	class:marian::AsyncGraphGroup
setSentenceIds	src/data/batch.h	/^  void setSentenceIds(const std::vector<size_t>& ids) { sentenceIds_ = ids; }$/;"	f	class:marian::data::Batch
setSingleStep	src/models/states.h	/^  virtual void setSingleStep(bool singleStep = true) {$/;"	f	class:marian::DecoderState
setSize	src/training/sparse_tensor.h	/^  void setSize(int size) { size_ = size; }$/;"	f	class:marian::SparseTensorBase
setTargetEmbeddings	src/models/states.h	/^  virtual void setTargetEmbeddings(Expr targetEmbeddings) {$/;"	f	class:marian::DecoderState
setTargetMask	src/models/states.h	/^  virtual void setTargetMask(Expr targetMask) { targetMask_ = targetMask; }$/;"	f	class:marian::DecoderState
setThrowNaN	src/graph/expression_graph.h	/^  void setThrowNaN(bool throwNaN) { throwNaN_ = throwNaN; }$/;"	f	class:marian::ExpressionGraph
setTrainable	src/graph/node.h	/^  virtual void setTrainable(bool trainable) { trainable_ = trainable; }$/;"	f	class:marian::Node
setWordAlignment	src/data/corpus.h	/^  void setWordAlignment(const std::string& path) {$/;"	f	class:marian::data::Corpus
setWords	src/data/corpus.h	/^  void setWords(size_t words) { words_ = words; }$/;"	f	class:marian::data::SubBatch
set_async_mode	src/3rd_party/spdlog/details/registry.h	/^    void set_async_mode(size_t q_size, const async_overflow_policy overflow_policy, const std::function<void()>& worker_warmup_cb, const std::chrono::milliseconds& flush_interval_ms)$/;"	f	class:spdlog::details::registry_t
set_async_mode	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_async_mode(size_t queue_size, const async_overflow_policy overflow_policy, const std::function<void()>& worker_warmup_cb, const std::chrono::milliseconds& flush_interval_ms)$/;"	f	class:spdlog
set_async_mode	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    void set_async_mode(size_t q_size, const async_overflow_policy overflow_policy, const std::function<void()>& worker_warmup_cb, const std::chrono::milliseconds& flush_interval_ms, const std::function<void()>& worker_teardown_cb)$/;"	f	class:spdlog::details::registry_t
set_async_mode	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_async_mode(size_t queue_size, const async_overflow_policy overflow_policy, const std::function<void()>& worker_warmup_cb, const std::chrono::milliseconds& flush_interval_ms, const std::function<void()>& worker_teardown_cb)$/;"	f	class:spdlog
set_color	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    void set_color(level::level_enum color_level, const std::string& color)$/;"	f	class:spdlog::sinks::ansicolor_sink
set_color	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    void set_color(level::level_enum level, WORD color)$/;"	f	class:spdlog::sinks::wincolor_sink
set_color	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^inline void ansicolor_sink::set_color(level::level_enum level, const std::string& color)$/;"	f	class:spdlog::sinks::ansicolor_sink
set_comment	src/3rd_party/yaml-cpp/ostream_wrapper.h	/^  void set_comment() { m_comment = true; }$/;"	f	class:YAML::ostream_wrapper
set_console_attribs	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    WORD set_console_attribs(WORD attribs)$/;"	f	class:spdlog::sinks::wincolor_sink
set_data	src/3rd_party/yaml-cpp/node/detail/node.h	/^  void set_data(const node& rhs) {$/;"	f	class:YAML::detail::node
set_data	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void set_data(const node_ref& rhs) { m_pData = rhs.m_pData; }$/;"	f	class:YAML::detail::node_ref
set_error_handler	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::set_error_handler(spdlog::log_err_handler err_handler)$/;"	f	class:spdlog::details::async_log_helper
set_error_handler	src/3rd_party/spdlog/include/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::set_error_handler(spdlog::log_err_handler err_handler)$/;"	f	class:spdlog::async_logger
set_error_handler	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_error_handler(spdlog::log_err_handler err_handler)$/;"	f	class:spdlog::logger
set_error_handler	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    void set_error_handler(log_err_handler handler)$/;"	f	class:spdlog::details::registry_t
set_error_handler	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_error_handler(log_err_handler handler)$/;"	f	class:spdlog
set_force_flush	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    void set_force_flush(bool force_flush)$/;"	f	class:spdlog::sinks::SPDLOG_FINAL
set_formatter	src/3rd_party/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::set_formatter(formatter_ptr msg_formatter)$/;"	f	class:spdlog::details::async_log_helper
set_formatter	src/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_formatter(spdlog::formatter_ptr msg_formatter)$/;"	f	class:spdlog::logger
set_formatter	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_formatter(spdlog::formatter_ptr f)$/;"	f	class:spdlog
set_formatter	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::set_formatter(formatter_ptr msg_formatter)$/;"	f	class:spdlog::details::async_log_helper
set_formatter	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_formatter(spdlog::formatter_ptr msg_formatter)$/;"	f	class:spdlog::logger
set_formatter	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_formatter(spdlog::formatter_ptr f)$/;"	f	class:spdlog
set_level	src/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_level(spdlog::level::level_enum log_level)$/;"	f	class:spdlog::logger
set_level	src/3rd_party/spdlog/details/registry.h	/^    void set_level(level::level_enum log_level)$/;"	f	class:spdlog::details::registry_t
set_level	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_level(level::level_enum log_level)$/;"	f	class:spdlog
set_level	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_level(spdlog::level::level_enum log_level)$/;"	f	class:spdlog::logger
set_level	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    void set_level(level::level_enum log_level)$/;"	f	class:spdlog::details::registry_t
set_level	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_level(level::level_enum log_level)$/;"	f	class:spdlog
set_level	src/3rd_party/spdlog/include/spdlog/sinks/sink.h	/^inline void sink::set_level(level::level_enum log_level)$/;"	f	class:spdlog::sinks::sink
set_mark	src/3rd_party/yaml-cpp/node/detail/node.h	/^  void set_mark(const Mark& mark) { m_pRef->set_mark(mark); }$/;"	f	class:YAML::detail::node
set_mark	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void set_mark(const Mark& mark) { m_pData->set_mark(mark); }$/;"	f	class:YAML::detail::node_ref
set_mark	src/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::set_mark(const Mark& mark) { m_mark = mark; }$/;"	f	class:YAML::detail::node_data
set_name	src/graph/node.h	/^  void set_name(const std::string& name) { name_ = name; }$/;"	f	class:marian::Node
set_null	src/3rd_party/yaml-cpp/node/detail/node.h	/^  void set_null() {$/;"	f	class:YAML::detail::node
set_null	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void set_null() { m_pData->set_null(); }$/;"	f	class:YAML::detail::node_ref
set_null	src/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::set_null() {$/;"	f	class:YAML::detail::node_data
set_pattern	src/3rd_party/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_pattern(const std::string& pattern)$/;"	f	class:spdlog::logger
set_pattern	src/3rd_party/spdlog/details/registry.h	/^    void set_pattern(const std::string& pattern)$/;"	f	class:spdlog::details::registry_t
set_pattern	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_pattern(const std::string& format_string)$/;"	f	class:spdlog
set_pattern	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_pattern(const std::string& pattern, pattern_time_type pattern_time)$/;"	f	class:spdlog::logger
set_pattern	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    void set_pattern(const std::string& pattern)$/;"	f	class:spdlog::details::registry_t
set_pattern	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_pattern(const std::string& format_string)$/;"	f	class:spdlog
set_ref	src/3rd_party/yaml-cpp/node/detail/node.h	/^  void set_ref(const node& rhs) {$/;"	f	class:YAML::detail::node
set_scalar	src/3rd_party/yaml-cpp/node/detail/node.h	/^  void set_scalar(const std::string& scalar) {$/;"	f	class:YAML::detail::node
set_scalar	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void set_scalar(const std::string& scalar) { m_pData->set_scalar(scalar); }$/;"	f	class:YAML::detail::node_ref
set_scalar	src/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::set_scalar(const std::string& scalar) {$/;"	f	class:YAML::detail::node_data
set_state	src/rnn/constructors.h	/^  Accumulator<AttentionFactory> set_state(Ptr<EncoderState> state) {$/;"	f	class:marian::rnn::AttentionFactory
set_string	src/3rd_party/spdlog/details/format.h	/^    void set_string(StringRef str)$/;"	f	class:fmt::internal::MakeValue
set_string	src/3rd_party/spdlog/details/format.h	/^    void set_string(WStringRef str)$/;"	f	class:fmt::internal::MakeValue
set_string	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void set_string(StringRef str)$/;"	f	class:fmt::internal::MakeValue
set_string	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void set_string(WStringRef str)$/;"	f	class:fmt::internal::MakeValue
set_style	src/3rd_party/yaml-cpp/node/detail/node.h	/^  void set_style(EmitterStyle::value style) {$/;"	f	class:YAML::detail::node
set_style	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void set_style(EmitterStyle::value style) { m_pData->set_style(style); }$/;"	f	class:YAML::detail::node_ref
set_style	src/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::set_style(EmitterStyle::value style) { m_style = style; }$/;"	f	class:YAML::detail::node_data
set_sync_mode	src/3rd_party/spdlog/details/registry.h	/^    void set_sync_mode()$/;"	f	class:spdlog::details::registry_t
set_sync_mode	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_sync_mode()$/;"	f	class:spdlog
set_sync_mode	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    void set_sync_mode()$/;"	f	class:spdlog::details::registry_t
set_sync_mode	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline void spdlog::set_sync_mode()$/;"	f	class:spdlog
set_tag	src/3rd_party/yaml-cpp/node/detail/node.h	/^  void set_tag(const std::string& tag) {$/;"	f	class:YAML::detail::node
set_tag	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void set_tag(const std::string& tag) { m_pData->set_tag(tag); }$/;"	f	class:YAML::detail::node_ref
set_tag	src/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::set_tag(const std::string& tag) { m_tag = tag; }$/;"	f	class:YAML::detail::node_data
set_type	src/3rd_party/yaml-cpp/node/detail/node.h	/^  void set_type(NodeType::value type) {$/;"	f	class:YAML::detail::node
set_type	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  void set_type(NodeType::value type) { m_pData->set_type(type); }$/;"	f	class:YAML::detail::node_ref
set_type	src/3rd_party/yaml-cpp/node_data.cpp	/^void node_data::set_type(NodeType::value type) {$/;"	f	class:YAML::detail::node_data
set_zero_adjoint	src/graph/chainable.h	/^  virtual void set_zero_adjoint() {}$/;"	f	struct:marian::Chainable
set_zero_adjoint	src/graph/node_operators_unary.h	/^  void set_zero_adjoint() { reshapee_->set_zero_adjoint(); }$/;"	f	class:marian::ReshapeNodeOp
set_zero_adjoint	src/graph/node_operators_unary.h	/^  void set_zero_adjoint() { stepNode_->set_zero_adjoint(); }$/;"	f	class:marian::StepNodeOp
set_zero_adjoint	src/graph/parameters.h	/^  void set_zero_adjoint() { grads()->set(0); }$/;"	f	class:marian::Parameters
sets	src/data/corpus.h	/^  size_t sets() const { return batches_.size(); }$/;"	f	class:marian::data::CorpusBatch
setting_changes	src/3rd_party/yaml-cpp/setting.h	/^  typedef std::vector<std::unique_ptr<SettingChangeBase>> setting_changes;$/;"	t	class:YAML::SettingChanges
sgn	src/functional/predicates.h	/^    __HDI__ T sgn(T val) {$/;"	f	namespace:marian::functional
shape	src/3rd_party/cnpy/cnpy.h	/^        std::vector<unsigned int> shape;$/;"	m	struct:cnpy::NpyArray
shape	src/data/dataset.h	/^  Shape shape() const { return shape_; }$/;"	f	class:marian::data::Input
shape	src/gpu/tensor.h	/^  __HDI__ Shape& shape() { return shape_; }$/;"	f	struct:marian::gpu::Tensor
shape	src/gpu/tensor.h	/^  __HDI__ const Shape& shape() const { return shape_; }$/;"	f	struct:marian::gpu::Tensor
shape	src/graph/node.h	/^  virtual const Shape& shape() { return shape_; }$/;"	f	class:marian::Node
shape	src/tensors/tensor.h	/^  virtual Shape& shape() { return shape_; }$/;"	f	class:marian::TensorBase
shape_	src/common/shape.h	/^    std::vector<int> shape_;$/;"	m	struct:marian::Shape
shape_	src/data/dataset.h	/^  Shape shape_;$/;"	m	class:marian::data::Input
shape_	src/gpu/shape.h	/^  Array<int, N> shape_;$/;"	m	struct:marian::gpu::ConstantShape
shape_	src/gpu/tensor.h	/^  gpu::Shape shape_;$/;"	m	struct:marian::gpu::Tensor
shape_	src/tensors/tensor.h	/^  Shape shape_;$/;"	m	class:marian::TensorBase
shardOpt_	src/training/graph_group_async.h	/^  std::vector<Ptr<OptimizerBase>> shardOpt_;$/;"	m	class:marian::AsyncGraphGroup
shardOpt_	src/training/graph_group_async_drop.h	/^  std::vector<Ptr<OptimizerBase>> shardOpt_;$/;"	m	class:marian::AsyncGraphGroup
shardOpt_	src/training/graph_group_sync.h	/^  std::vector<Ptr<OptimizerBase>> shardOpt_;$/;"	m	class:marian::SyncGraphGroup
shardSize_	src/training/graph_group_async.h	/^  int shardSize_;$/;"	m	class:marian::AsyncGraphGroup
shardSize_	src/training/graph_group_async_drop.h	/^  int shardSize_;$/;"	m	class:marian::AsyncGraphGroup
shardSize_	src/training/graph_group_sync.h	/^  int shardSize_;$/;"	m	class:marian::SyncGraphGroup
shardSync_	src/training/graph_group_async.h	/^  std::vector<std::mutex> shardSync_;$/;"	m	class:marian::AsyncGraphGroup
shardSync_	src/training/graph_group_async_drop.h	/^  std::vector<std::mutex> shardSync_;$/;"	m	class:marian::AsyncGraphGroup
shared_memory	src/3rd_party/yaml-cpp/node/ptr.h	/^typedef std::shared_ptr<memory> shared_memory;$/;"	t	namespace:YAML::detail
shared_memory_holder	src/3rd_party/yaml-cpp/node/ptr.h	/^typedef std::shared_ptr<memory_holder> shared_memory_holder;$/;"	t	namespace:YAML::detail
shared_node	src/3rd_party/yaml-cpp/node/ptr.h	/^typedef std::shared_ptr<node> shared_node;$/;"	t	namespace:YAML::detail
shared_node_data	src/3rd_party/yaml-cpp/node/ptr.h	/^typedef std::shared_ptr<node_data> shared_node_data;$/;"	t	namespace:YAML::detail
shared_node_ref	src/3rd_party/yaml-cpp/node/ptr.h	/^typedef std::shared_ptr<node_ref> shared_node_ref;$/;"	t	namespace:YAML::detail
shift_	src/graph/node_operators_unary.h	/^  Shape shift_;$/;"	m	struct:marian::ShiftNodeOp
short_level_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class short_level_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
short_level_formatter	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^class short_level_formatter:public flag_formatter$/;"	c	namespace:spdlog::details
shortestPath	src/tools/align2steps.cpp	/^Alignment shortestPath(const Alignment& a) {$/;"	f
shouldBePrinted	src/translator/output_collector.h	/^  bool shouldBePrinted(long id) {$/;"	f	class:marian::GeometricPrinting
shouldBePrinted	src/translator/output_collector.h	/^  bool shouldBePrinted(long) { return false; }$/;"	f	class:marian::QuietPrinting
shouldBePrinted	src/translator/output_collector.h	/^  bool shouldBePrinted(long) { return true; }$/;"	f	class:marian::DefaultPrinting
shouldContinueOnFailure	src/3rd_party/catch.hpp	/^    inline bool shouldContinueOnFailure( int flags )    { return ( flags & ResultDisposition::ContinueOnFailure ) != 0; }$/;"	f	namespace:Catch
shouldContinueOnFailure	src/3rd_party/spdlog/tests/catch.hpp	/^    inline bool shouldContinueOnFailure( int flags )    { return ( flags & ResultDisposition::ContinueOnFailure ) != 0; }$/;"	f	namespace:Catch
shouldSuppressFailure	src/3rd_party/catch.hpp	/^    inline bool shouldSuppressFailure( int flags )      { return ( flags & ResultDisposition::SuppressFail ) != 0; }$/;"	f	namespace:Catch
shouldSuppressFailure	src/3rd_party/spdlog/tests/catch.hpp	/^    inline bool shouldSuppressFailure( int flags )      { return ( flags & ResultDisposition::SuppressFail ) != 0; }$/;"	f	namespace:Catch
should_do_colors_	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    bool should_do_colors_;$/;"	m	class:spdlog::sinks::ansicolor_sink
should_log	src/3rd_party/spdlog/details/logger_impl.h	/^inline bool spdlog::logger::should_log(spdlog::level::level_enum msg_level) const$/;"	f	class:spdlog::logger
should_log	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline bool spdlog::logger::should_log(spdlog::level::level_enum msg_level) const$/;"	f	class:spdlog::logger
should_log	src/3rd_party/spdlog/include/spdlog/sinks/sink.h	/^inline bool sink::should_log(level::level_enum msg_level) const$/;"	f	class:spdlog::sinks::sink
shuffle	src/data/corpus.cpp	/^void Corpus::shuffle() {$/;"	f	class:marian::data::Corpus
shuffle	src/data/dataset.h	/^  void shuffle() { std::random_shuffle(examples_.begin(), examples_.end()); }$/;"	f	class:marian::data::Dataset
shuffle	src/data/text_input.h	/^  void shuffle() {}$/;"	f	class:marian::data::TextInput
shuffleData	src/examples/iris/helper.cpp	/^void shuffleData(std::vector<float>& features, std::vector<float>& labels) {$/;"	f
shuffleFiles	src/data/corpus.cpp	/^void Corpus::shuffleFiles(const std::vector<std::string>& paths) {$/;"	f	class:marian::data::Corpus
sig	src/functional/floats.h	/^      constexpr float sig(unsigned i, unsigned shift) {$/;"	f	namespace:marian::functional::unsigned2float
sign	src/functional/floats.h	/^      constexpr float sign(unsigned i) {$/;"	f	namespace:marian::functional::unsigned2float
signbit	src/3rd_party/spdlog/details/format.h	/^inline DummyInt signbit(...)$/;"	f	namespace:fmt::internal
signbit	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline DummyInt signbit(...)$/;"	f	namespace:fmt::internal
simple_file_sink	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^    explicit simple_file_sink(const filename_t &filename, bool truncate = false):_force_flush(false)$/;"	f	class:spdlog::sinks::SPDLOG_FINAL
simple_file_sink	src/3rd_party/spdlog/sinks/file_sinks.h	/^    explicit simple_file_sink(const filename_t &filename,$/;"	f	class:spdlog::sinks::simple_file_sink
simple_file_sink	src/3rd_party/spdlog/sinks/file_sinks.h	/^class simple_file_sink : public base_sink < Mutex >$/;"	c	namespace:spdlog::sinks
simple_file_sink_mt	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^typedef simple_file_sink<std::mutex> simple_file_sink_mt;$/;"	t	namespace:spdlog::sinks
simple_file_sink_mt	src/3rd_party/spdlog/sinks/file_sinks.h	/^typedef simple_file_sink<std::mutex> simple_file_sink_mt;$/;"	t	namespace:spdlog::sinks
simple_file_sink_st	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^typedef simple_file_sink<details::null_mutex> simple_file_sink_st;$/;"	t	namespace:spdlog::sinks
simple_file_sink_st	src/3rd_party/spdlog/sinks/file_sinks.h	/^typedef simple_file_sink<details::null_mutex> simple_file_sink_st;$/;"	t	namespace:spdlog::sinks
single_	src/models/experimental/lex_probs.h	/^  bool single_;$/;"	m	class:marian::LexicalBias
sink	src/3rd_party/spdlog/include/spdlog/sinks/sink.h	/^    sink()$/;"	f	class:spdlog::sinks::sink
sink	src/3rd_party/spdlog/include/spdlog/sinks/sink.h	/^class sink$/;"	c	namespace:spdlog::sinks
sink	src/3rd_party/spdlog/sinks/sink.h	/^class sink$/;"	c	namespace:spdlog::sinks
sink_	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    sink_ptr sink_;$/;"	m	class:spdlog::sinks::ansicolor_sink
sinks	src/3rd_party/spdlog/common.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/include/spdlog/common.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline const std::vector<spdlog::sink_ptr>& spdlog::logger::sinks() const$/;"	f	class:spdlog::logger
sinks	src/3rd_party/spdlog/include/spdlog/sinks/android_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/include/spdlog/sinks/base_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/include/spdlog/sinks/dist_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/include/spdlog/sinks/msvc_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/include/spdlog/sinks/null_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/include/spdlog/sinks/ostream_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/include/spdlog/sinks/sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/include/spdlog/sinks/stdout_sinks.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/include/spdlog/sinks/syslog_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/sinks/android_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/sinks/base_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/sinks/dist_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/sinks/file_sinks.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/sinks/msvc_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/sinks/null_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/sinks/ostream_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/sinks/sink.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/sinks/stdout_sinks.h	/^namespace sinks$/;"	n	namespace:spdlog
sinks	src/3rd_party/spdlog/sinks/syslog_sink.h	/^namespace sinks$/;"	n	namespace:spdlog
size	src/3rd_party/spdlog/details/file_helper.h	/^    long size()$/;"	f	class:spdlog::details::file_helper
size	src/3rd_party/spdlog/details/format.h	/^        std::size_t size;$/;"	m	struct:fmt::internal::Value::StringValue
size	src/3rd_party/spdlog/details/format.h	/^    size_t size() const$/;"	f	class:fmt::FormatBuf
size	src/3rd_party/spdlog/details/format.h	/^    size_t size() const$/;"	f	class:fmt::internal::UTF16ToUTF8
size	src/3rd_party/spdlog/details/format.h	/^    size_t size() const$/;"	f	class:fmt::internal::UTF8ToUTF16
size	src/3rd_party/spdlog/details/format.h	/^    std::size_t size() const$/;"	f	class:BasicWriter
size	src/3rd_party/spdlog/details/format.h	/^    std::size_t size() const$/;"	f	class:FormatInt
size	src/3rd_party/spdlog/details/format.h	/^    std::size_t size() const$/;"	f	class:fmt::BasicStringRef
size	src/3rd_party/spdlog/details/format.h	/^    std::size_t size() const$/;"	f	class:fmt::Buffer
size	src/3rd_party/spdlog/include/spdlog/details/file_helper.h	/^    size_t size()$/;"	f	class:spdlog::details::file_helper
size	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        std::size_t size;$/;"	m	struct:fmt::internal::Value::StringValue
size	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    size_t size() const$/;"	f	class:fmt::internal::UTF16ToUTF8
size	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    size_t size() const$/;"	f	class:fmt::internal::UTF8ToUTF16
size	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::size_t size() const$/;"	f	class:BasicWriter
size	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::size_t size() const$/;"	f	class:FormatInt
size	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::size_t size() const$/;"	f	class:fmt::BasicStringRef
size	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::size_t size() const$/;"	f	class:fmt::Buffer
size	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.h	/^    size_t size() const$/;"	f	class:fmt::internal::FormatBuf
size	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	/^fmt::LongLong fmt::File::size() const {$/;"	f	class:fmt::File
size	src/3rd_party/yaml-cpp/binary.h	/^  std::size_t size() const { return owned() ? m_data.size() : m_unownedSize; }$/;"	f	class:YAML::Binary
size	src/3rd_party/yaml-cpp/emitter.cpp	/^std::size_t Emitter::size() const { return m_stream.pos(); }$/;"	f	class:YAML::Emitter
size	src/3rd_party/yaml-cpp/node/detail/node.h	/^  std::size_t size() const { return m_pRef->size(); }$/;"	f	class:YAML::detail::node
size	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  std::size_t size() const { return m_pData->size(); }$/;"	f	class:YAML::detail::node_ref
size	src/3rd_party/yaml-cpp/node/impl.h	/^inline std::size_t Node::size() const {$/;"	f	class:YAML::Node
size	src/3rd_party/yaml-cpp/node_data.cpp	/^std::size_t node_data::size() const {$/;"	f	class:YAML::detail::node_data
size	src/3rd_party/yaml-cpp/ptr_vector.h	/^  std::size_t size() const { return m_data.size(); }$/;"	f	class:YAML::ptr_vector
size	src/common/shape.h	/^    inline size_t size() const { return shape_.size(); }$/;"	f	struct:marian::Shape
size	src/data/corpus.h	/^  size_t size() const { return batches_[0]->batchSize(); }$/;"	f	class:marian::data::CorpusBatch
size	src/data/corpus.h	/^  size_t size() const { return tuple_.size(); }$/;"	f	class:marian::data::SentenceTuple
size	src/data/dataset.h	/^  size_t size() const { return data_->size(); }$/;"	f	class:marian::data::Input
size	src/data/dataset.h	/^  size_t size() const { return inputs_.front().shape()[0]; }$/;"	f	class:marian::data::DataBatch
size	src/data/npz_converter.h	/^    size_t size() const { return size1() * size2(); }$/;"	f	class:NpzConverter::NpyMatrixWrapper
size	src/data/vocab.cpp	/^size_t Vocab::size() const {$/;"	f	class:marian::Vocab
size	src/gpu/array.h	/^  __HDI__ constexpr static size_t size() { return N; }$/;"	f	struct:marian::gpu::Array
size	src/gpu/shape.h	/^  __HDI__ static constexpr size_t size() { return N; }$/;"	f	struct:marian::gpu::ConstantShape
size	src/graph/parameters.h	/^  size_t size() { return params_.size(); }$/;"	f	class:marian::Parameters
size	src/rnn/types.h	/^  size_t size() const { return states_.size(); };$/;"	f	class:marian::rnn::States
size	src/tensors/allocator.h	/^  size_t size() const { return size_; }$/;"	f	class:marian::Gap
size	src/tensors/allocator.h	/^  size_t size() { return device_.size(); }$/;"	f	class:marian::Allocator
size	src/tensors/device_gpu.h	/^  size_t size() { return size_; }$/;"	f	class:marian::DeviceGPU
size	src/tensors/memory_piece.h	/^  size_t size() const { return size_; }$/;"	f	class:marian::MemoryPiece
size	src/tensors/tensor.h	/^  virtual size_t size() { return shape_.elements(); }$/;"	f	class:marian::TensorBase
size	src/tensors/tensor_allocator.h	/^  size_t size() { return allocator_->size() \/ sizeof(float); }$/;"	f	class:marian::TensorAllocator
size	src/tests/allocator_test.cpp	/^  size_t size() { return size_; }$/;"	f	class:DeviceCPU
size	src/training/sparse_tensor.h	/^  int size() { return size_; }$/;"	f	class:marian::SparseTensorBase
size	src/translator/history.h	/^  size_t size() const { return history_.size(); }$/;"	f	class:marian::History
size1	src/data/npz_converter.h	/^    size_t size1() const { return npy_.shape[0]; }$/;"	f	class:NpzConverter::NpyMatrixWrapper
size2	src/data/npz_converter.h	/^    size_t size2() const {$/;"	f	class:NpzConverter::NpyMatrixWrapper
size_	src/3rd_party/spdlog/details/format.h	/^    std::size_t size_;$/;"	m	class:fmt::BasicStringRef
size_	src/3rd_party/spdlog/details/format.h	/^    std::size_t size_;$/;"	m	class:fmt::Buffer
size_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::size_t size_;$/;"	m	class:fmt::BasicStringRef
size_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::size_t size_;$/;"	m	class:fmt::Buffer
size_	src/data/corpus.h	/^  size_t size_;$/;"	m	class:marian::data::SubBatch
size_	src/layers/convolution.h	/^  int size_;$/;"	m	class:marian::CharConvPooling
size_	src/tensors/allocator.h	/^  size_t size_;$/;"	m	class:marian::Gap
size_	src/tensors/device_gpu.h	/^  size_t size_;$/;"	m	class:marian::DeviceGPU
size_	src/tensors/memory_piece.h	/^  size_t size_;$/;"	m	class:marian::MemoryPiece
size_	src/tests/allocator_test.cpp	/^  size_t size_;$/;"	m	class:DeviceCPU	file:
size_	src/training/sparse_tensor.h	/^  int size_;$/;"	m	class:marian::SparseTensorBase
sizer	src/3rd_party/catch.hpp	/^    struct FalseType { char sizer[2]; };$/;"	m	struct:Catch::Detail::FalseType
sizer	src/3rd_party/catch.hpp	/^    struct TrueType { char sizer[1]; };$/;"	m	struct:Catch::Detail::TrueType
sizer	src/3rd_party/spdlog/tests/catch.hpp	/^        char sizer[1];$/;"	m	struct:Catch::TrueType
sizer	src/3rd_party/spdlog/tests/catch.hpp	/^        char sizer[2];$/;"	m	struct:Catch::FalseType
skipFirst_	src/rnn/rnn.h	/^  bool skipFirst_;$/;"	m	class:marian::rnn::RNN
skip_	src/rnn/rnn.h	/^  bool skip_;$/;"	m	class:marian::rnn::RNN
sleep_or_yield	src/3rd_party/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::sleep_or_yield(const spdlog::log_clock::time_point& now, const spdlog::log_clock::time_point& last_op_time)$/;"	f	class:spdlog::details::async_log_helper
sleep_or_yield	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::sleep_or_yield(const spdlog::log_clock::time_point& now, const spdlog::log_clock::time_point& last_op_time)$/;"	f	class:spdlog::details::async_log_helper
socket	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::unique_ptr<socket_type> socket; \/\/ Socket must be unique_ptr since asio::ssl::stream<asio::ip::tcp::socket> is not movable$/;"	m	class:SimpleWeb::SocketServerBase::Connection
socket_close_mutex	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::mutex socket_close_mutex;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
softmaxMask_	src/rnn/attention.h	/^  Expr softmaxMask_;$/;"	m	class:marian::rnn::GlobalAttention
sparse	src/kernels/sparse.h	/^namespace sparse {$/;"	n	namespace:marian
sparseFetchParams	src/training/graph_group_async_drop.h	/^  void sparseFetchParams(Tensor oldParams, int worker_id) {$/;"	f	class:marian::AsyncGraphGroup
sparseGrads_	src/training/graph_group_async_drop.h	/^  std::vector<SparseTensor> sparseGrads_;$/;"	m	class:marian::AsyncGraphGroup
sparsePush	src/training/graph_group_async_drop.h	/^  void sparsePush(SparseTensor newGrads, size_t batch_words) {$/;"	f	class:marian::AsyncGraphGroup
spdlog	src/3rd_party/spdlog/async_logger.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/common.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/details/async_log_helper.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/details/file_helper.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/details/line_logger_fwd.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/details/log_msg.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/details/null_mutex.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/details/os.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/details/registry.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/formatter.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/async_logger.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/common.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/details/file_helper.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/details/log_msg.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/details/null_mutex.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/details/os.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/formatter.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/logger.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/sinks/android_sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/sinks/base_sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/sinks/dist_sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/sinks/file_sinks.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/sinks/msvc_sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/sinks/null_sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/sinks/ostream_sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/sinks/sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/sinks/stdout_sinks.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/sinks/syslog_sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/include/spdlog/spdlog.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/logger.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/sinks/android_sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/sinks/base_sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/sinks/dist_sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/sinks/file_sinks.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/sinks/msvc_sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/sinks/null_sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/sinks/ostream_sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/sinks/sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/sinks/stdout_sinks.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/sinks/syslog_sink.h	/^namespace spdlog$/;"	n
spdlog	src/3rd_party/spdlog/spdlog.h	/^namespace spdlog$/;"	n
spdlog_ex	src/3rd_party/spdlog/common.h	/^    spdlog_ex(const std::string& msg) :_msg(msg) {}$/;"	f	class:spdlog::spdlog_ex
spdlog_ex	src/3rd_party/spdlog/common.h	/^class spdlog_ex : public std::exception$/;"	c	namespace:spdlog
spdlog_ex	src/3rd_party/spdlog/include/spdlog/common.h	/^    spdlog_ex(const std::string& msg):_msg(msg)$/;"	f	class:spdlog::spdlog_ex
spdlog_ex	src/3rd_party/spdlog/include/spdlog/common.h	/^    spdlog_ex(const std::string& msg, int last_errno)$/;"	f	class:spdlog::spdlog_ex
spdlog_ex	src/3rd_party/spdlog/include/spdlog/common.h	/^class spdlog_ex: public std::exception$/;"	c	namespace:spdlog
spec	src/3rd_party/spdlog/details/format.h	/^    FormatSpec &spec()$/;"	f	class:fmt::internal::ArgFormatterBase
spec	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    FormatSpec &spec()$/;"	f	class:fmt::internal::ArgFormatterBase
spec_	src/3rd_party/spdlog/details/format.cc	/^			fmt::FormatSpec &spec_;$/;"	m	class:fmt::__anon34::WidthHandler	file:
spec_	src/3rd_party/spdlog/details/format.h	/^    FormatSpec &spec_;$/;"	m	class:fmt::internal::ArgFormatterBase
spec_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  FormatSpec &spec_;$/;"	m	class:fmt::__anon71::WidthHandler	file:
spec_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    FormatSpec &spec_;$/;"	m	class:fmt::internal::ArgFormatterBase
specialSymbols_	src/models/hardatt.h	/^  std::unordered_set<Word> specialSymbols_;$/;"	m	class:marian::DecoderHardAtt
split	src/data/corpus.h	/^  std::vector<Ptr<Batch>> split(size_t n) {$/;"	f	class:marian::data::CorpusBatch
split	src/data/corpus.h	/^  std::vector<Ptr<SubBatch>> split(size_t n) {$/;"	f	class:marian::data::SubBatch
split	src/data/corpus.h	/^  std::vector<std::string> split(const std::string& input,$/;"	f	class:marian::data::WordAlignment
split	src/data/dataset.h	/^  virtual std::vector<Ptr<Batch>> split(size_t n) { ABORT("Not implemented"); }$/;"	f	class:marian::data::DataBatch
split	src/tools/align2steps.cpp	/^std::vector<std::string> split(const std::string& input,$/;"	f
sprintf	src/3rd_party/spdlog/details/format.h	/^inline std::string sprintf(CStringRef format, ArgList args)$/;"	f
sprintf	src/3rd_party/spdlog/details/format.h	/^inline std::wstring sprintf(WCStringRef format, ArgList args)$/;"	f
sprintf	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline std::string sprintf(CStringRef format, ArgList args)$/;"	f
sprintf	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline std::wstring sprintf(WCStringRef format, ArgList args)$/;"	f
srcDim_	src/models/experimental/lex_probs.h	/^  size_t srcDim_;$/;"	m	class:marian::LexProbs
srcVocab_	src/data/filter.h	/^  Ptr<Vocab> srcVocab_;$/;"	m	class:marian::Filter
srcVocabs_	src/translator/translator.h	/^  std::vector<Ptr<Vocab>> srcVocabs_;$/;"	m	class:marian::TranslateServiceMultiGPU
sstring	src/3rd_party/spdlog/details/format.h	/^        StringValue<signed char> sstring;$/;"	m	union:fmt::internal::Value::__anon21
sstring	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        StringValue<signed char> sstring;$/;"	m	union:fmt::internal::Value::__anon59
stackableFactories_	src/rnn/constructors.h	/^  std::vector<Ptr<StackableFactory>> stackableFactories_;$/;"	m	class:marian::rnn::StackedCellFactory
stackables_	src/rnn/types.h	/^  std::vector<Ptr<Stackable>> stackables_;$/;"	m	class:marian::rnn::StackedCell
stacked_cell	src/rnn/constructors.h	/^typedef Accumulator<StackedCellFactory> stacked_cell;$/;"	t	namespace:marian::rnn
stalled	src/training/scheduler.h	/^  size_t stalled() {$/;"	f	class:marian::Scheduler
stalled	src/training/validator.h	/^  size_t stalled() { return stalled_; }$/;"	f	class:marian::ValidatorBase
start	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    virtual void start() {$/;"	f	class:SimpleWeb::SocketServerBase
startState	src/models/encdec.h	/^  virtual Ptr<DecoderState> startState(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::EncoderDecoder
startState	src/models/hardatt.h	/^  virtual Ptr<DecoderState> startState($/;"	f	class:marian::DecoderHardAtt
startState	src/models/s2s.h	/^  virtual Ptr<DecoderState> startState($/;"	f	class:marian::DecoderS2S
startState	src/models/transformer.h	/^  virtual Ptr<DecoderState> startState($/;"	f	class:marian::DecoderTransformer
startState	src/translator/scorers.h	/^  virtual Ptr<ScorerState> startState(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::ScorerWrapper
startState	src/translator/scorers.h	/^  virtual Ptr<ScorerState> startState(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::UnseenWordPenalty
startState	src/translator/scorers.h	/^  virtual Ptr<ScorerState> startState(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::WordPenalty
start_	src/3rd_party/spdlog/details/format.h	/^    Char *start_;$/;"	m	class:fmt::FormatBuf
start_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.h	/^    Char *start_;$/;"	m	class:fmt::internal::FormatBuf
started	src/training/scheduler.h	/^  void started() { LOG(info, "Training started"); }$/;"	f	class:marian::Scheduler
state_	src/rnn/constructors.h	/^  Ptr<EncoderState> state_;$/;"	m	class:marian::rnn::AttentionFactory
state_	src/training/scheduler.h	/^  Ptr<TrainingState> state_;$/;"	m	class:marian::Scheduler
state_	src/translator/scorers.h	/^  Ptr<DecoderState> state_;$/;"	m	class:marian::ScorerWrapperState
states_	src/models/states.h	/^  rnn::States states_;$/;"	m	class:marian::DecoderState
states_	src/rnn/types.h	/^  std::vector<State> states_;$/;"	m	class:marian::rnn::States
stats_	src/data/batch_generator.h	/^  Ptr<BatchStats> stats_;$/;"	m	class:marian::data::BatchGenerator
status	src/3rd_party/yaml-cpp/scanner.h	/^    STATUS status;$/;"	m	struct:YAML::Scanner::IndentMarker
status	src/3rd_party/yaml-cpp/token.h	/^  STATUS status;$/;"	m	struct:YAML::Token
std	src/3rd_party/spdlog/details/format.h	/^namespace std$/;"	n
std	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^namespace std$/;"	n
std	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^namespace std$/;"	n
stderrLogger	src/common/logging.cpp	/^std::shared_ptr<spdlog::logger> stderrLogger($/;"	f
stderrLoggerTest	src/tests/logger_test.cpp	/^std::shared_ptr<spdlog::logger> stderrLoggerTest($/;"	f
stderr_color_mt	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stderr_color_mt(const std::string& logger_name)$/;"	f	class:spdlog
stderr_color_st	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stderr_color_st(const std::string& logger_name)$/;"	f	class:spdlog
stderr_logger_mt	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stderr_logger_mt(const std::string& logger_name, bool color)$/;"	f	class:spdlog
stderr_logger_mt	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stderr_logger_mt(const std::string& logger_name)$/;"	f	class:spdlog
stderr_logger_st	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stderr_logger_st(const std::string& logger_name, bool color)$/;"	f	class:spdlog
stderr_logger_st	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stderr_logger_st(const std::string& logger_name)$/;"	f	class:spdlog
stderr_sink	src/3rd_party/spdlog/include/spdlog/sinks/stdout_sinks.h	/^    stderr_sink()$/;"	f	class:spdlog::sinks::SPDLOG_FINAL
stderr_sink	src/3rd_party/spdlog/sinks/stdout_sinks.h	/^    stderr_sink() {}$/;"	f	class:spdlog::sinks::stderr_sink
stderr_sink	src/3rd_party/spdlog/sinks/stdout_sinks.h	/^class stderr_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
stderr_sink_mt	src/3rd_party/spdlog/include/spdlog/sinks/stdout_sinks.h	/^typedef stderr_sink<std::mutex> stderr_sink_mt;$/;"	t	namespace:spdlog::sinks
stderr_sink_mt	src/3rd_party/spdlog/sinks/stdout_sinks.h	/^typedef stderr_sink<std::mutex> stderr_sink_mt;$/;"	t	namespace:spdlog::sinks
stderr_sink_st	src/3rd_party/spdlog/include/spdlog/sinks/stdout_sinks.h	/^typedef stderr_sink<details::null_mutex> stderr_sink_st;$/;"	t	namespace:spdlog::sinks
stderr_sink_st	src/3rd_party/spdlog/sinks/stdout_sinks.h	/^typedef stderr_sink<details::null_mutex> stderr_sink_st;$/;"	t	namespace:spdlog::sinks
stdout_color_mt	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stdout_color_mt(const std::string& logger_name)$/;"	f	class:spdlog
stdout_color_st	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stdout_color_st(const std::string& logger_name)$/;"	f	class:spdlog
stdout_logger_mt	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stdout_logger_mt(const std::string& logger_name, bool color)$/;"	f	class:spdlog
stdout_logger_mt	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stdout_logger_mt(const std::string& logger_name)$/;"	f	class:spdlog
stdout_logger_st	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stdout_logger_st(const std::string& logger_name, bool color)$/;"	f	class:spdlog
stdout_logger_st	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stdout_logger_st(const std::string& logger_name)$/;"	f	class:spdlog
stdout_sink	src/3rd_party/spdlog/include/spdlog/sinks/stdout_sinks.h	/^    stdout_sink()$/;"	f	class:spdlog::sinks::SPDLOG_FINAL
stdout_sink	src/3rd_party/spdlog/sinks/stdout_sinks.h	/^    stdout_sink() {}$/;"	f	class:spdlog::sinks::stdout_sink
stdout_sink	src/3rd_party/spdlog/sinks/stdout_sinks.h	/^class stdout_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
stdout_sink_mt	src/3rd_party/spdlog/include/spdlog/sinks/stdout_sinks.h	/^typedef stdout_sink<std::mutex> stdout_sink_mt;$/;"	t	namespace:spdlog::sinks
stdout_sink_mt	src/3rd_party/spdlog/sinks/stdout_sinks.h	/^typedef stdout_sink<std::mutex> stdout_sink_mt;$/;"	t	namespace:spdlog::sinks
stdout_sink_st	src/3rd_party/spdlog/include/spdlog/sinks/stdout_sinks.h	/^typedef stdout_sink<details::null_mutex> stdout_sink_st;$/;"	t	namespace:spdlog::sinks
stdout_sink_st	src/3rd_party/spdlog/sinks/stdout_sinks.h	/^typedef stdout_sink<details::null_mutex> stdout_sink_st;$/;"	t	namespace:spdlog::sinks
step	src/models/encdec.h	/^  virtual Ptr<DecoderState> step(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::EncoderDecoder
step	src/models/hardatt.h	/^  virtual Ptr<DecoderState> step(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::DecoderHardAtt
step	src/models/s2s.h	/^  virtual Ptr<DecoderState> step(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::DecoderS2S
step	src/models/transformer.h	/^  virtual Ptr<DecoderState> step(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::DecoderTransformer
step	src/training/dropper.h	/^  int step;$/;"	m	class:marian::GradientDropBase
step	src/translator/scorers.h	/^  virtual Ptr<ScorerState> step(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::ScorerWrapper
step	src/translator/scorers.h	/^  virtual Ptr<ScorerState> step(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::UnseenWordPenalty
step	src/translator/scorers.h	/^  virtual Ptr<ScorerState> step(Ptr<ExpressionGraph> graph,$/;"	f	class:marian::WordPenalty
stepNode_	src/graph/node_operators_unary.h	/^  Expr stepNode_;$/;"	m	class:marian::StepNodeOp
step_	src/graph/node_operators_unary.h	/^  int step_;$/;"	m	class:marian::StepNodeOp
stop	src/3rd_party/threadpool.h	/^    bool stop;$/;"	m	class:marian::ThreadPool
stop	src/3rd_party/threadpool2.h	/^    bool stop;$/;"	m	class:marian::ThreadPool2
storage_	src/common/keywords.h	/^  std::map<unsigned, boost::any> storage_;$/;"	m	class:marian::keywords::Keywords
store	src/3rd_party/spdlog/details/null_mutex.h	/^    void store(int val)$/;"	f	struct:spdlog::details::null_atomic_int
store	src/3rd_party/spdlog/include/spdlog/details/null_mutex.h	/^    void store(int val)$/;"	f	struct:spdlog::details::null_atomic_int
str	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::string str;$/;"	m	class:SimpleWeb::SocketServerBase::regex_orderable
str	src/3rd_party/spdlog/details/format.h	/^    const Char *str() const$/;"	f	class:fmt::StrFormatSpec
str	src/3rd_party/spdlog/details/format.h	/^    std::basic_string<Char> str() const$/;"	f	class:BasicWriter
str	src/3rd_party/spdlog/details/format.h	/^    std::string str() const$/;"	f	class:FormatInt
str	src/3rd_party/spdlog/details/format.h	/^    std::string str() const$/;"	f	class:fmt::internal::UTF16ToUTF8
str	src/3rd_party/spdlog/details/format.h	/^    std::wstring str() const$/;"	f	class:fmt::internal::UTF8ToUTF16
str	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    const Char *str() const$/;"	f	class:fmt::StrFormatSpec
str	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::basic_string<Char> str() const$/;"	f	class:BasicWriter
str	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::string str() const$/;"	f	class:FormatInt
str	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::string str() const$/;"	f	class:fmt::internal::UTF16ToUTF8
str	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::wstring str() const$/;"	f	class:fmt::internal::UTF8ToUTF16
str	src/3rd_party/yaml-cpp/ostream_wrapper.h	/^  const char* str() const {$/;"	f	class:YAML::ostream_wrapper
str	src/common/options.h	/^  std::string str() {$/;"	f	class:marian::Options
str	src/layers/factory.h	/^  std::string str() { return options_->str(); }$/;"	f	class:marian::Factory
str2id_	src/data/vocab.h	/^  Str2Id str2id_;$/;"	m	class:marian::Vocab
str_	src/3rd_party/spdlog/details/format.h	/^    char *str_;$/;"	m	class:FormatInt
str_	src/3rd_party/spdlog/details/format.h	/^    const Char *str_;$/;"	m	class:fmt::StrFormatSpec
str_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    char *str_;$/;"	m	class:FormatInt
str_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    const Char *str_;$/;"	m	class:fmt::StrFormatSpec
strand	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      asio::strand strand;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
streambuf	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      asio::streambuf streambuf;$/;"	m	class:SimpleWeb::SocketServerBase::Message
streambuf	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      asio::streambuf streambuf;$/;"	m	class:SimpleWeb::SocketServerBase::SendStream
strerror_r	src/3rd_party/spdlog/details/format.cc	/^static inline fmt::internal::Null<> strerror_r(int, char *, ...)$/;"	f	file:
strerror_r	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^static inline fmt::internal::Null<> strerror_r(int, char *, ...) {$/;"	f	file:
strerror_s	src/3rd_party/spdlog/details/format.cc	/^static inline fmt::internal::Null<> strerror_s(char *, std::size_t, ...)$/;"	f	file:
strerror_s	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^static inline fmt::internal::Null<> strerror_s(char *, std::size_t, ...) {$/;"	f	file:
stride	src/common/shape.h	/^    inline int stride(int i) const {$/;"	f	struct:marian::Shape
stride	src/gpu/shape.h	/^  __HDI__ int stride(int i) const { return stride_[i]; }$/;"	f	struct:marian::gpu::ConstantShape
stride_	src/gpu/shape.h	/^  Array<int, N> stride_;$/;"	m	struct:marian::gpu::ConstantShape
stride_	src/layers/convolution.h	/^  int stride_;$/;"	m	class:marian::CharConvPooling
string	src/3rd_party/spdlog/details/format.h	/^        StringValue<char> string;$/;"	m	union:fmt::internal::Value::__anon21
string	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        StringValue<char> string;$/;"	m	union:fmt::internal::Value::__anon59
strtod	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    double strtod(const char *&str) const$/;"	f	class:fmt::Locale
strtod_l	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    static double strtod_l(const char *nptr, char **endptr, _locale_t locale)$/;"	f	class:fmt::Locale
style	src/3rd_party/yaml-cpp/node/detail/node.h	/^  EmitterStyle::value style() const { return m_pRef->style(); }$/;"	f	class:YAML::detail::node
style	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  EmitterStyle::value style() const { return m_style; }$/;"	f	class:YAML::detail::node_data
style	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  EmitterStyle::value style() const { return m_pData->style(); }$/;"	f	class:YAML::detail::node_ref
subprocess	scripts/embeddings/prepare_corpus.py	/^import subprocess$/;"	i
subprocess	scripts/embeddings/process_word2vec.py	/^import subprocess$/;"	i
subtensor	src/tensors/tensor.h	/^  Tensor subtensor(int offset, int size) {$/;"	f	class:marian::TensorBase
subtensor	src/training/sparse_tensor.h	/^  std::shared_ptr<SparseTensorBase> subtensor(int pos, int size, int idx) {$/;"	f	class:marian::SparseTensorBase
success_accepted	src/3rd_party/simple-websocket-server/status_code.hpp	/^    success_accepted,$/;"	m	class:SimpleWeb::StatusCode
success_already_reported	src/3rd_party/simple-websocket-server/status_code.hpp	/^    success_already_reported,$/;"	m	class:SimpleWeb::StatusCode
success_created	src/3rd_party/simple-websocket-server/status_code.hpp	/^    success_created,$/;"	m	class:SimpleWeb::StatusCode
success_im_used	src/3rd_party/simple-websocket-server/status_code.hpp	/^    success_im_used = 226,$/;"	m	class:SimpleWeb::StatusCode
success_multi_status	src/3rd_party/simple-websocket-server/status_code.hpp	/^    success_multi_status,$/;"	m	class:SimpleWeb::StatusCode
success_no_content	src/3rd_party/simple-websocket-server/status_code.hpp	/^    success_no_content,$/;"	m	class:SimpleWeb::StatusCode
success_non_authoritative_information	src/3rd_party/simple-websocket-server/status_code.hpp	/^    success_non_authoritative_information,$/;"	m	class:SimpleWeb::StatusCode
success_ok	src/3rd_party/simple-websocket-server/status_code.hpp	/^    success_ok = 200,$/;"	m	class:SimpleWeb::StatusCode
success_partial_content	src/3rd_party/simple-websocket-server/status_code.hpp	/^    success_partial_content,$/;"	m	class:SimpleWeb::StatusCode
success_reset_content	src/3rd_party/simple-websocket-server/status_code.hpp	/^    success_reset_content,$/;"	m	class:SimpleWeb::StatusCode
swap	src/3rd_party/catch.hpp	/^        void swap( Ptr& other ) { std::swap( m_p, other.m_p ); }$/;"	f	class:Catch::Ptr
swap	src/3rd_party/spdlog/tests/catch.hpp	/^        void swap( Ptr& other ) { std::swap( m_p, other.m_p ); }$/;"	f	class:Catch::Ptr
swap	src/3rd_party/yaml-cpp/binary.h	/^  void swap(std::vector<unsigned char> &rhs) {$/;"	f	class:YAML::Binary
switchParams	src/graph/expression_graph.h	/^  void switchParams(const std::string& newNamespace) {$/;"	f	class:marian::ExpressionGraph
sync_	src/training/graph_group_async.h	/^  std::mutex sync_;$/;"	m	class:marian::AsyncGraphGroup
sync_	src/training/graph_group_async_drop.h	/^  std::mutex sync_;$/;"	m	class:marian::AsyncGraphGroup
sync_condition	src/3rd_party/threadpool.h	/^    std::condition_variable sync_condition;$/;"	m	class:marian::ThreadPool
sync_condition	src/3rd_party/threadpool2.h	/^    std::condition_variable sync_condition;$/;"	m	class:marian::ThreadPool2
sys	scripts/contrib/fix_hard.py	/^import sys$/;"	i
sys	scripts/contrib/inject_model_params.py	/^import sys$/;"	i
sys	scripts/embeddings/prepare_corpus.py	/^import sys$/;"	i
sys	scripts/embeddings/process_word2vec.py	/^import sys$/;"	i
sys	scripts/python/example.py	/^import sys$/;"	i
sys	scripts/python/mariannmt_server.py	/^import sys$/;"	i
sys	scripts/server/client_example.py	/^import sys$/;"	i
syslog_example	src/3rd_party/spdlog/example/example.cpp	/^void syslog_example()$/;"	f
syslog_example	src/3rd_party/spdlog/example/jni/example.cpp	/^void syslog_example()$/;"	f
syslog_logger	src/3rd_party/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::syslog_logger(const std::string& logger_name, const std::string& syslog_ident, int syslog_option)$/;"	f	class:spdlog
syslog_logger	src/3rd_party/spdlog/include/spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::syslog_logger(const std::string& logger_name, const std::string& syslog_ident, int syslog_option)$/;"	f	class:spdlog
syslog_prio_from_level	src/3rd_party/spdlog/include/spdlog/sinks/syslog_sink.h	/^    int syslog_prio_from_level(const details::log_msg &msg) const$/;"	f	class:spdlog::sinks::syslog_sink
syslog_prio_from_level	src/3rd_party/spdlog/sinks/syslog_sink.h	/^    int syslog_prio_from_level(const details::log_msg &msg) const$/;"	f	class:spdlog::sinks::syslog_sink
syslog_sink	src/3rd_party/spdlog/include/spdlog/sinks/syslog_sink.h	/^    syslog_sink(const std::string& ident = "", int syslog_option=0, int syslog_facility=LOG_USER):$/;"	f	class:spdlog::sinks::syslog_sink
syslog_sink	src/3rd_party/spdlog/include/spdlog/sinks/syslog_sink.h	/^class syslog_sink : public sink$/;"	c	namespace:spdlog::sinks
syslog_sink	src/3rd_party/spdlog/sinks/syslog_sink.h	/^    syslog_sink(const std::string& ident = "", int syslog_option=0, int syslog_facility=LOG_USER):$/;"	f	class:spdlog::sinks::syslog_sink
syslog_sink	src/3rd_party/spdlog/sinks/syslog_sink.h	/^class syslog_sink : public sink$/;"	c	namespace:spdlog::sinks
t	src/3rd_party/catch.hpp	/^        static T  const&t;$/;"	m	struct:Catch::Detail::IsStreamInsertable
t	src/3rd_party/yaml-cpp/node/impl.h	/^  const T& t;$/;"	m	struct:YAML::detail::to_value_t
t	src/3rd_party/yaml-cpp/node/impl.h	/^  const char* t;$/;"	m	struct:YAML::detail::to_value_t
t_	src/optimizers/optimizers.h	/^  size_t t_;$/;"	m	class:marian::Adam
t_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class t_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
tag	src/3rd_party/yaml-cpp/node/detail/node.h	/^  const std::string& tag() const { return m_pRef->tag(); }$/;"	f	class:YAML::detail::node
tag	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  const std::string& tag() const { return m_tag; }$/;"	f	class:YAML::detail::node_data
tag	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  const std::string& tag() const { return m_pData->tag(); }$/;"	f	class:YAML::detail::node_ref
tags	src/3rd_party/yaml-cpp/directives.h	/^  std::map<std::string, std::string> tags;$/;"	m	struct:YAML::Directives
tanh	src/graph/expression_operators.h	/^Expr tanh(Args... args) {$/;"	f	namespace:marian
tanh	src/layers/generic.h	/^enum struct act : int { linear, tanh, logit, ReLU, LeakyReLU, PReLU, swish };$/;"	m	struct:marian::mlp::act
targetEmbeddings_	src/models/states.h	/^  Expr targetEmbeddings_;$/;"	m	class:marian::DecoderState
targetMask_	src/models/states.h	/^  Expr targetMask_;$/;"	m	class:marian::DecoderState
target_file_	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    FILE* target_file_;$/;"	m	class:spdlog::sinks::ansicolor_sink
target_filename	src/3rd_party/spdlog/tests/file_helper.cpp	/^static const std::string target_filename = "logs\/file_helper_test.txt";$/;"	v	file:
tasks	src/3rd_party/threadpool.h	/^    std::queue< std::function<void()> > tasks;$/;"	m	class:marian::ThreadPool
tasks	src/3rd_party/threadpool2.h	/^    std::queue< std::function<void()> > tasks;$/;"	m	class:marian::ThreadPool2
tempFiles_	src/data/corpus.h	/^  std::vector<UPtr<TemporaryFile>> tempFiles_;$/;"	m	class:marian::data::Corpus
temp_d	src/training/dropper.h	/^  float* temp_d;$/;"	m	class:marian::GradientDropBase
tensor	src/graph/expression_graph.h	/^  void tensor(Tensor& t, Args&&... args) {$/;"	f	class:marian::ExpressionGraph
tensor_type	src/tensors/tensor_cpu.h	/^  typedef TensorCPU tensor_type;$/;"	t	class:marian::DeviceCPU
tensors_	src/graph/expression_graph.h	/^  Ptr<TensorAllocator> tensors_;$/;"	m	class:marian::ExpressionGraph
testFalse	src/3rd_party/spdlog/tests/catch.hpp	/^            bool testFalse;$/;"	m	struct:Catch::ResultBuilder::ExprComponents
tested_logger_name	src/3rd_party/spdlog/tests/registry.cpp	/^static const char *tested_logger_name = "null_logger";$/;"	v	file:
tested_logger_name2	src/3rd_party/spdlog/tests/registry.cpp	/^static const char *tested_logger_name2 = "null_logger2";$/;"	v	file:
thousands_sep	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline StringRef thousands_sep($/;"	f	namespace:fmt::internal
thousands_sep	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline fmt::StringRef thousands_sep(...)$/;"	f	namespace:fmt::internal
thread_id	src/3rd_party/spdlog/details/async_log_helper.h	/^        size_t thread_id;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
thread_id	src/3rd_party/spdlog/details/log_msg.h	/^    size_t thread_id;$/;"	m	struct:spdlog::details::log_msg
thread_id	src/3rd_party/spdlog/details/os.h	/^inline size_t thread_id()$/;"	f	namespace:spdlog::details::os
thread_id	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^        size_t thread_id;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
thread_id	src/3rd_party/spdlog/include/spdlog/details/log_msg.h	/^    size_t thread_id;$/;"	m	struct:spdlog::details::log_msg
thread_id	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline size_t thread_id()$/;"	f	namespace:spdlog::details::os
thread_pool_size	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      size_t thread_pool_size = 1;$/;"	m	class:SimpleWeb::SocketServerBase::Config
threads	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    std::vector<std::thread> threads;$/;"	m	class:SimpleWeb::SocketServerBase
throwAtReallocation	src/tensors/allocator.h	/^  void throwAtReallocation(bool throwRealloc) { throw_ = throwRealloc; }$/;"	f	class:marian::Allocator
throwAtReallocation	src/tensors/tensor_allocator.h	/^  void throwAtReallocation(bool throwRealloc) {$/;"	f	class:marian::TensorAllocator
throw_if_bad_worker	src/3rd_party/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::throw_if_bad_worker()$/;"	f	class:spdlog::details::async_log_helper
throw_if_exists	src/3rd_party/spdlog/details/registry.h	/^    void throw_if_exists(const std::string &logger_name)$/;"	f	class:spdlog::details::registry_t
throw_if_exists	src/3rd_party/spdlog/include/spdlog/details/registry.h	/^    void throw_if_exists(const std::string &logger_name)$/;"	f	class:spdlog::details::registry_t
tie	src/layers/constructors.h	/^  Accumulator<DenseFactory> tie(const std::string& param,$/;"	f	class:marian::mlp::DenseFactory
tie	src/layers/generic.h	/^  void tie(const std::string& param, const std::string& tied) {$/;"	f	class:marian::mlp::Dense
tie_transposed	src/layers/constructors.h	/^  Accumulator<DenseFactory> tie_transposed(const std::string& param,$/;"	f	class:marian::mlp::DenseFactory
tie_transposed	src/layers/generic.h	/^  void tie_transposed(const std::string& param, const std::string& tied) {$/;"	f	class:marian::mlp::Dense
tiedParamsTransposed_	src/layers/constructors.h	/^  std::vector<std::pair<std::string, std::string>> tiedParamsTransposed_;$/;"	m	class:marian::mlp::DenseFactory
tiedParams_	src/layers/constructors.h	/^  std::vector<std::pair<std::string, std::string>> tiedParams_;$/;"	m	class:marian::mlp::DenseFactory
tiedParams_	src/layers/generic.h	/^  std::map<std::string, Expr> tiedParams_;$/;"	m	class:marian::mlp::Dense
time	scripts/server/client_example.py	/^import time$/;"	i
time	src/3rd_party/spdlog/details/async_log_helper.h	/^        log_clock::time_point time;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
time	src/3rd_party/spdlog/details/log_msg.h	/^    log_clock::time_point time;$/;"	m	struct:spdlog::details::log_msg
time	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^        log_clock::time_point time;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
time	src/3rd_party/spdlog/include/spdlog/details/log_msg.h	/^    log_clock::time_point time;$/;"	m	struct:spdlog::details::log_msg
timeout_idle	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      long timeout_idle = 0;$/;"	m	class:SimpleWeb::SocketServerBase::Config
timeout_idle	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      long timeout_idle;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
timeout_request	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      long timeout_request = 5;$/;"	m	class:SimpleWeb::SocketServerBase::Config
timer	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::unique_ptr<asio::deadline_timer> timer;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
timer	src/training/scheduler.h	/^  boost::timer::cpu_timer timer;$/;"	m	class:marian::Scheduler
timer_mutex	src/3rd_party/simple-websocket-server/server_ws.hpp	/^      std::mutex timer_mutex;$/;"	m	class:SimpleWeb::SocketServerBase::Connection
tmpSparseDelta	src/training/graph_group_async_drop.h	/^  std::vector<SparseTensor> tmpSparseDelta;$/;"	m	class:marian::AsyncGraphGroup
tmpTensor	src/training/graph_group_async_drop.h	/^  std::vector<Tensor> tmpTensor;$/;"	m	class:marian::AsyncGraphGroup
tmpTensors_	src/training/graph_group_sync.h	/^  std::vector<Tensor> tmpTensors_;$/;"	m	class:marian::SyncGraphGroup
to12h	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^static int to12h(const tm& t)$/;"	f	namespace:spdlog::details
to12h	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^static int to12h(const tm& t)$/;"	f	namespace:spdlog::details
toBatch	src/data/corpus.h	/^  batch_ptr toBatch(const std::vector<sample>& batchVector) {$/;"	f	class:marian::data::Corpus
toBatch	src/data/dataset.h	/^  batch_ptr toBatch(const Examples& batchVector) {$/;"	f	class:marian::data::Dataset
toBatch	src/data/text_input.h	/^  batch_ptr toBatch(const std::vector<sample>& batchVector) {$/;"	f	class:marian::data::TextInput
toDense	src/training/sparse_tensor.h	/^  void toDense(Tensor t, int offset) {$/;"	f	class:marian::SparseTensorBase
toHyps	src/translator/beam_search.h	/^  Beams toHyps(const std::vector<uint> keys,$/;"	f	class:marian::BeamSearch
toString	src/3rd_party/catch.hpp	/^            std::string toString() const {$/;"	f	class:Catch::Matchers::Impl::MatcherUntypedBase
toString	src/3rd_party/catch.hpp	/^std::string toString( std::vector<T,Allocator> const& v ) {$/;"	f	namespace:Catch
toString	src/common/shape.h	/^    std::string toString() const {$/;"	f	struct:marian::Shape
toTensor	src/kernels/sparse.h	/^  void toTensor(Tensor dense) {$/;"	f	class:marian::sparse::CSR
to_binary	src/functional/floats.h	/^      constexpr unsigned to_binary(float x) {$/;"	f	namespace:marian::functional::float2unsigned
to_binary	src/functional/floats.h	/^      constexpr unsigned to_binary(float x, unsigned sign, int exp) {$/;"	f	namespace:marian::functional::float2unsigned
to_short_str	src/3rd_party/spdlog/common.h	/^inline const char* to_short_str(spdlog::level::level_enum l)$/;"	f	namespace:spdlog::level
to_short_str	src/3rd_party/spdlog/include/spdlog/common.h	/^inline const char* to_short_str(spdlog::level::level_enum l)$/;"	f	namespace:spdlog::level
to_str	src/3rd_party/spdlog/common.h	/^inline const char* to_str(spdlog::level::level_enum l)$/;"	f	namespace:spdlog::level
to_str	src/3rd_party/spdlog/include/spdlog/common.h	/^inline const char* to_str(spdlog::level::level_enum l)$/;"	f	namespace:spdlog::level
to_string	src/3rd_party/spdlog/details/format.h	/^    std::basic_string<Char> to_string() const$/;"	f	class:fmt::BasicStringRef
to_string	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    std::basic_string<Char> to_string() const$/;"	f	class:fmt::BasicStringRef
to_string	src/functional/floats.h	/^      std::string to_string() {$/;"	f	struct:marian::functional::F
to_string	src/functional/operands.h	/^      std::string to_string() {$/;"	f	struct:marian::functional::C
to_string	src/functional/operands.h	/^      std::string to_string() {$/;"	f	struct:marian::functional::Capture
to_string	src/functional/operands.h	/^      std::string to_string() {$/;"	f	struct:marian::functional::Var
to_string	src/functional/predicates.h	/^      std::string to_string() {$/;"	f	struct:marian::functional::Assignee
to_string	src/functional/predicates.h	/^      std::string to_string() {$/;"	f	struct:marian::functional::BinaryFunctor
to_string	src/functional/predicates.h	/^      std::string to_string() {$/;"	f	struct:marian::functional::UnaryFunctor
to_unsigned	src/3rd_party/spdlog/details/format.h	/^inline typename MakeUnsigned<Int>::Type to_unsigned(Int value)$/;"	f	namespace:fmt::internal
to_unsigned	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^inline typename MakeUnsigned<Int>::Type to_unsigned(Int value)$/;"	f	namespace:fmt::internal
to_value	src/3rd_party/yaml-cpp/node/impl.h	/^inline typename to_value_t<T>::return_type to_value(const T& t) {$/;"	f	namespace:YAML::detail
to_value_t	src/3rd_party/yaml-cpp/node/impl.h	/^  explicit to_value_t(char* t_) : t(t_) {}$/;"	f	struct:YAML::detail::to_value_t
to_value_t	src/3rd_party/yaml-cpp/node/impl.h	/^  explicit to_value_t(const T& t_) : t(t_) {}$/;"	f	struct:YAML::detail::to_value_t
to_value_t	src/3rd_party/yaml-cpp/node/impl.h	/^  explicit to_value_t(const char* t_) : t(t_) {}$/;"	f	struct:YAML::detail::to_value_t
to_value_t	src/3rd_party/yaml-cpp/node/impl.h	/^struct to_value_t {$/;"	s	namespace:YAML::detail
to_value_t	src/3rd_party/yaml-cpp/node/impl.h	/^struct to_value_t<char*> {$/;"	s	namespace:YAML::detail
to_value_t	src/3rd_party/yaml-cpp/node/impl.h	/^struct to_value_t<char[N]> {$/;"	s	namespace:YAML::detail
to_value_t	src/3rd_party/yaml-cpp/node/impl.h	/^struct to_value_t<const char*> {$/;"	s	namespace:YAML::detail
tolower	src/3rd_party/yaml-cpp/convert.cpp	/^std::string tolower(const std::string& str) {$/;"	f	namespace:__anon95
topHyps_	src/translator/history.h	/^  std::priority_queue<HypothesisCoord> topHyps_;$/;"	m	class:marian::History
topNodes_	src/graph/expression_graph.h	/^  std::unordered_set<Expr> topNodes_;$/;"	m	class:marian::ExpressionGraph
tostring	src/3rd_party/cnpy/cnpy.h	/^    template<typename T> std::string tostring(T i, int pad = 0, char padval = ' ') {$/;"	f	namespace:cnpy
totalCapacity	src/graph/parameters.h	/^  size_t totalCapacity(Ptr<TensorAllocator> alloc) {$/;"	f	class:marian::Parameters
trace	src/3rd_party/spdlog/common.h	/^    trace = 0,$/;"	e	enum:spdlog::level::__anon38
trace	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::trace()$/;"	f	class:spdlog::logger
trace	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::trace(const T& msg)$/;"	f	class:spdlog::logger
trace	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::trace(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
trace	src/3rd_party/spdlog/include/spdlog/common.h	/^    trace = 0,$/;"	e	enum:spdlog::level::__anon40
trace	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace(const T& msg)$/;"	f	class:spdlog::logger
trace	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace(const char* fmt, const Arg1 &arg1, const Args&... args)$/;"	f	class:spdlog::logger
trace	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace(const wchar_t* fmt, const Args&... args)$/;"	f	class:spdlog::logger
trace_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace_if(const bool flag, const T& msg)$/;"	f	class:spdlog::logger
trace_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace_if(const bool flag, const char* fmt, const Arg1 &arg1, const Args&... args)$/;"	f	class:spdlog::logger
trace_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace_if(const bool flag, const wchar_t* fmt, const Args&... args)$/;"	f	class:spdlog::logger
trainable	src/graph/node.h	/^  virtual bool trainable() { return trainable_; }$/;"	f	class:marian::Node
training	src/common/config_parser.h	/^  training,$/;"	m	struct:marian::ConfigMode
traits_type	src/3rd_party/spdlog/details/format.h	/^    typedef typename std::basic_streambuf<Char>::traits_type traits_type;$/;"	t	class:fmt::FormatBuf
traits_type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.h	/^    typedef typename std::basic_streambuf<Char>::traits_type traits_type;$/;"	t	class:fmt::internal::FormatBuf
transA_	src/graph/node_operators_binary.h	/^  bool transA_;$/;"	m	class:marian::DotBatchedNodeOp
transA_	src/graph/node_operators_binary.h	/^  bool transA_;$/;"	m	class:marian::DotNodeOp
transB_	src/graph/node_operators_binary.h	/^  bool transB_;$/;"	m	class:marian::DotBatchedNodeOp
transB_	src/graph/node_operators_binary.h	/^  bool transB_;$/;"	m	class:marian::DotNodeOp
transduce	src/rnn/rnn.h	/^  Expr transduce(Expr input, Expr mask = nullptr) {$/;"	f	class:marian::rnn::RNN
transduce	src/rnn/rnn.h	/^  Expr transduce(Expr input, State state, Expr mask = nullptr) {$/;"	f	class:marian::rnn::RNN
transduce	src/rnn/rnn.h	/^  Expr transduce(Expr input, States states, Expr mask = nullptr) {$/;"	f	class:marian::rnn::RNN
transduce	src/rnn/rnn.h	/^  virtual Expr transduce(Expr input, Expr mask = nullptr) {$/;"	f	class:marian::rnn::SingleLayerRNN
transduce	src/rnn/rnn.h	/^  virtual Expr transduce(Expr input, State state, Expr mask = nullptr) {$/;"	f	class:marian::rnn::SingleLayerRNN
transduce	src/rnn/rnn.h	/^  virtual Expr transduce(Expr input, States states, Expr mask = nullptr) {$/;"	f	class:marian::rnn::SingleLayerRNN
transition_	src/rnn/cells.h	/^  bool transition_;$/;"	m	class:marian::rnn::GRUNematus
translate	scripts/server/client_example.py	/^def translate(batch, port=8080):$/;"	f
translate	src/python/marian.cpp	/^boost::python::list translate(boost::python::list& pyinput) {$/;"	f
translate	src/python/marian_test.cpp	/^void translate(const std::vector<std::string> &input) {$/;"	f
translate_batch	src/python/mariannmt.cpp	/^boost::python::list translate_batch(boost::python::list& pyinput) {$/;"	f
translating	src/common/config_parser.h	/^  translating,$/;"	m	struct:marian::ConfigMode
trgDim_	src/models/experimental/lex_probs.h	/^  size_t trgDim_;$/;"	m	class:marian::LexProbs
trgVocab_	src/data/filter.h	/^  Ptr<Vocab> trgVocab_;$/;"	m	class:marian::Filter
trgVocab_	src/translator/translator.h	/^  Ptr<Vocab> trgVocab_;$/;"	m	class:marian::TranslateMultiGPU
trgVocab_	src/translator/translator.h	/^  Ptr<Vocab> trgVocab_;$/;"	m	class:marian::TranslateServiceMultiGPU
trimTrailingSpaces	src/3rd_party/yaml-cpp/scanscalar.h	/^  bool trimTrailingSpaces;  \/\/ do we remove all trailing spaces (at the very$/;"	m	struct:YAML::ScanScalarParams
trueValue	src/3rd_party/catch.hpp	/^        void trueValue() const {}$/;"	f	class:Catch::SafeBool
trueValue	src/3rd_party/spdlog/tests/catch.hpp	/^        void trueValue() const {}$/;"	f	class:Catch::SafeBool
true_value	src/3rd_party/yaml-cpp/node/detail/bool_type.h	/^  static void true_value(NOT_ALLOWED*) {}$/;"	f	struct:YAML::detail::unspecified_bool
try_lock	src/3rd_party/spdlog/details/null_mutex.h	/^    bool try_lock()$/;"	f	struct:spdlog::details::null_mutex
try_lock	src/3rd_party/spdlog/include/spdlog/details/null_mutex.h	/^    bool try_lock()$/;"	f	struct:spdlog::details::null_mutex
tup_	src/data/corpus.h	/^  SentenceTuple tup_;$/;"	m	class:marian::data::CorpusIterator
tup_	src/data/text_input.h	/^  SentenceTuple tup_;$/;"	m	class:marian::data::TextIterator
tuple_	src/data/corpus.h	/^  std::vector<Words> tuple_;$/;"	m	class:marian::data::SentenceTuple
txt	src/3rd_party/spdlog/details/async_log_helper.h	/^        std::string txt;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
txt	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^        std::string txt;$/;"	m	struct:spdlog::details::async_log_helper::async_msg
type	src/3rd_party/spdlog/details/format.h	/^    Type type;$/;"	m	struct:fmt::internal::Arg
type	src/3rd_party/spdlog/details/format.h	/^    char type() const$/;"	f	struct:fmt::AlignTypeSpec
type	src/3rd_party/spdlog/details/format.h	/^    char type() const$/;"	f	struct:fmt::FormatSpec
type	src/3rd_party/spdlog/details/format.h	/^    char type() const$/;"	f	struct:fmt::TypeSpec
type	src/3rd_party/spdlog/details/format.h	/^    internal::Arg::Type type(unsigned index) const$/;"	f	class:fmt::ArgList
type	src/3rd_party/spdlog/details/format.h	/^    static uint64_t type(const NamedArg<Char_> &)$/;"	f	class:fmt::internal::MakeValue
type	src/3rd_party/spdlog/details/format.h	/^    static uint64_t type(const T &)$/;"	f	class:fmt::internal::MakeValue
type	src/3rd_party/spdlog/details/format.h	/^    static uint64_t type(long)$/;"	f	class:fmt::internal::MakeValue
type	src/3rd_party/spdlog/details/format.h	/^    static uint64_t type(unsigned long)$/;"	f	class:fmt::internal::MakeValue
type	src/3rd_party/spdlog/details/format.h	/^    static uint64_t type(wchar_t)$/;"	f	class:fmt::internal::MakeValue
type	src/3rd_party/spdlog/details/format.h	/^    typedef F type;$/;"	t	struct:fmt::internal::Conditional
type	src/3rd_party/spdlog/details/format.h	/^    typedef T type;$/;"	t	struct:fmt::internal::Conditional
type	src/3rd_party/spdlog/details/format.h	/^    typedef T type;$/;"	t	struct:fmt::internal::EnableIf
type	src/3rd_party/spdlog/details/format.h	/^    uint64_t type;$/;"	m	struct:fmt::ArgType
type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Type type;$/;"	m	struct:fmt::internal::Arg
type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    char type() const$/;"	f	struct:fmt::AlignTypeSpec
type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    char type() const$/;"	f	struct:fmt::FormatSpec
type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    char type() const$/;"	f	struct:fmt::TypeSpec
type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    internal::Arg::Type type(unsigned index) const$/;"	f	class:fmt::ArgList
type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static uint64_t type(const NamedArg<Char_> &)$/;"	f	class:fmt::internal::MakeValue
type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static uint64_t type(const T &)$/;"	f	class:fmt::internal::MakeValue
type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static uint64_t type(long)$/;"	f	class:fmt::internal::MakeValue
type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static uint64_t type(unsigned long)$/;"	f	class:fmt::internal::MakeValue
type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    static uint64_t type(wchar_t)$/;"	f	class:fmt::internal::MakeValue
type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef F type;$/;"	t	struct:fmt::internal::Conditional
type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef T type;$/;"	t	struct:fmt::internal::Conditional
type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    typedef T type;$/;"	t	struct:fmt::internal::EnableIf
type	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    uint64_t type;$/;"	m	struct:fmt::ArgType
type	src/3rd_party/yaml-cpp/emittermanip.h	/^  Type::value type;$/;"	m	struct:YAML::_Tag
type	src/3rd_party/yaml-cpp/emitterstate.h	/^    GroupType::value type;$/;"	m	struct:YAML::EmitterState::Group
type	src/3rd_party/yaml-cpp/node/detail/node.h	/^  NodeType::value type() const { return m_pRef->type(); }$/;"	f	class:YAML::detail::node
type	src/3rd_party/yaml-cpp/node/detail/node_data.h	/^  NodeType::value type() const {$/;"	f	class:YAML::detail::node_data
type	src/3rd_party/yaml-cpp/node/detail/node_ref.h	/^  NodeType::value type() const { return m_pData->type(); }$/;"	f	class:YAML::detail::node_ref
type	src/3rd_party/yaml-cpp/scanner.h	/^    INDENT_TYPE type;$/;"	m	struct:YAML::Scanner::IndentMarker
type	src/3rd_party/yaml-cpp/tag.h	/^  TYPE type;$/;"	m	struct:YAML::Tag
type	src/3rd_party/yaml-cpp/token.h	/^  TYPE type;$/;"	m	struct:YAML::Token
type	src/3rd_party/yaml-cpp/traits.h	/^  typedef T type;$/;"	t	struct:YAML::disable_if_c
type	src/3rd_party/yaml-cpp/traits.h	/^  typedef T type;$/;"	t	struct:YAML::enable_if_c
type	src/examples/mnist/validator.h	/^  std::string type() { return "accuracy"; }$/;"	f	class:marian::AccuracyValidator
type	src/graph/node_operators.h	/^  const std::string type() { return "const"; }$/;"	f	struct:marian::ConstantNode
type	src/graph/node_operators.h	/^  const std::string type() { return "param"; }$/;"	f	struct:marian::ParamNode
type	src/graph/node_operators_binary.h	/^  const std::string type() { return "+"; }$/;"	f	struct:marian::PlusNodeOp
type	src/graph/node_operators_binary.h	/^  const std::string type() { return "-"; }$/;"	f	struct:marian::MinusNodeOp
type	src/graph/node_operators_binary.h	/^  const std::string type() { return "affine"; }$/;"	f	struct:marian::AffineNodeOp
type	src/graph/node_operators_binary.h	/^  const std::string type() { return "concat"; }$/;"	f	struct:marian::ConcatenateNodeOp
type	src/graph/node_operators_binary.h	/^  const std::string type() { return "highway"; }$/;"	f	struct:marian::HighwayNodeOp
type	src/graph/node_operators_binary.h	/^  const std::string type() { return "layer_convolution"; }$/;"	f	class:marian::ConvolutionOp
type	src/graph/node_operators_binary.h	/^  const std::string type() { return "layer_normalization"; }$/;"	f	struct:marian::LayerNormalizationOp
type	src/graph/node_operators_binary.h	/^  const std::string type() { return "scalar-product"; }$/;"	f	struct:marian::ScalarProductNodeOp
type	src/graph/node_operators_binary.h	/^  const std::string type() { return "x-ent"; }$/;"	f	struct:marian::CrossEntropyNodeOp
type	src/graph/node_operators_binary.h	/^  const std::string type() { return "×"; }$/;"	f	struct:marian::MultNodeOp
type	src/graph/node_operators_binary.h	/^  const std::string type() { return "÷"; }$/;"	f	struct:marian::DivNodeOp
type	src/graph/node_operators_binary.h	/^  const std::string type() { return "•"; }$/;"	f	class:marian::DotBatchedNodeOp
type	src/graph/node_operators_binary.h	/^  const std::string type() { return "•"; }$/;"	f	class:marian::DotNodeOp
type	src/graph/node_operators_unary.h	/^    const std::string type() {return "layer_pooling";}$/;"	f	class:marian::PoolingWithMaskingOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "-"; }$/;"	f	struct:marian::NegNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "PReLU"; }$/;"	f	struct:marian::PReLUNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "ReLU"; }$/;"	f	struct:marian::ReLUNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "cols"; }$/;"	f	struct:marian::ColsNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "exp"; }$/;"	f	struct:marian::ExpNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "layer_pooling"; }$/;"	f	class:marian::PoolingOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "log"; }$/;"	f	struct:marian::LogNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "logit"; }$/;"	f	struct:marian::LogitNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "logsoftmax"; }$/;"	f	struct:marian::LogSoftmaxNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "mean"; }$/;"	f	struct:marian::MeanNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "reshape"; }$/;"	f	class:marian::ReshapeNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "rows"; }$/;"	f	struct:marian::RowsNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "scalar_add"; }$/;"	f	struct:marian::ScalarAddNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "scalar_add"; }$/;"	f	struct:marian::ScalarMultNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "select"; }$/;"	f	struct:marian::SelectNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "shift"; }$/;"	f	struct:marian::ShiftNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "softmax"; }$/;"	f	struct:marian::SoftmaxNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "sqrt"; }$/;"	f	struct:marian::SqrtNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "square"; }$/;"	f	struct:marian::SquareNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "step"; }$/;"	f	class:marian::StepNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "sum"; }$/;"	f	struct:marian::SumNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "swish"; }$/;"	f	struct:marian::SwishNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "tanh"; }$/;"	f	struct:marian::TanhNodeOp
type	src/graph/node_operators_unary.h	/^  const std::string type() { return "transpose"; }$/;"	f	struct:marian::TransposeNodeOp
type	src/training/validator.h	/^  std::string type() { return "translation"; }$/;"	f	class:marian::TranslationValidator
type	src/training/validator.h	/^  std::string type() { return "valid-script"; }$/;"	f	class:marian::ScriptValidator
type	src/training/validator.h	/^  std::string type() { return options_->get<std::string>("cost-type"); }$/;"	f	class:marian::CrossEntropyValidator
type_	src/3rd_party/spdlog/details/format.cc	/^			wchar_t type_;$/;"	m	class:fmt::__anon34::ArgConverter	file:
type_	src/3rd_party/spdlog/details/format.h	/^    char type_;$/;"	m	struct:fmt::FormatSpec
type_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  wchar_t type_;$/;"	m	class:fmt::__anon71::ArgConverter	file:
type_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    char type_;$/;"	m	struct:fmt::FormatSpec
types_	src/3rd_party/spdlog/details/format.h	/^    uint64_t types_;$/;"	m	class:fmt::ArgList
types_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    uint64_t types_;$/;"	m	class:fmt::ArgList
uchar	src/examples/mnist/dataset.h	/^  typedef unsigned char uchar;$/;"	t	class:marian::data::MNISTData
uict00	src/3rd_party/yaml-cpp/stream.cpp	/^  uict00,$/;"	e	enum:YAML::UtfIntroCharType	file:
uictAscii	src/3rd_party/yaml-cpp/stream.cpp	/^  uictAscii,$/;"	e	enum:YAML::UtfIntroCharType	file:
uictBB	src/3rd_party/yaml-cpp/stream.cpp	/^  uictBB,$/;"	e	enum:YAML::UtfIntroCharType	file:
uictBF	src/3rd_party/yaml-cpp/stream.cpp	/^  uictBF,$/;"	e	enum:YAML::UtfIntroCharType	file:
uictEF	src/3rd_party/yaml-cpp/stream.cpp	/^  uictEF,$/;"	e	enum:YAML::UtfIntroCharType	file:
uictFE	src/3rd_party/yaml-cpp/stream.cpp	/^  uictFE,$/;"	e	enum:YAML::UtfIntroCharType	file:
uictFF	src/3rd_party/yaml-cpp/stream.cpp	/^  uictFF,$/;"	e	enum:YAML::UtfIntroCharType	file:
uictMax	src/3rd_party/yaml-cpp/stream.cpp	/^  uictMax$/;"	e	enum:YAML::UtfIntroCharType	file:
uictOther	src/3rd_party/yaml-cpp/stream.cpp	/^  uictOther,$/;"	e	enum:YAML::UtfIntroCharType	file:
uint32_t	src/3rd_party/spdlog/details/format.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint32_t	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint64_t	src/3rd_party/spdlog/details/format.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint_value	src/3rd_party/spdlog/details/format.h	/^        unsigned uint_value;$/;"	m	union:fmt::internal::Value::__anon21
uint_value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        unsigned uint_value;$/;"	m	union:fmt::internal::Value::__anon59
uis_error	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_error$/;"	e	enum:YAML::UtfIntroState	file:
uis_start	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_start,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf16be	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf16be,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf16be_bom1	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf16be_bom1,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf16le	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf16le,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf16le_bom2	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf16le_bom2,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf16le_imp	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf16le_imp,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf32be	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf32be,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf32be_b2	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf32be_b2,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf32be_bom3	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf32be_bom3,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf32le	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf32le,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf32le_bom3	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf32le_bom3,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf32le_imp3	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf32le_imp3,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf8	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf8,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf8_bom1	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf8_bom1,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf8_bom2	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf8_bom2,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utf8_imp	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_utf8_imp,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utfbe_b1	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_utfbe_b1,$/;"	e	enum:YAML::UtfIntroState	file:
uis_utfle_bom1	src/3rd_party/yaml-cpp/stream.cpp	/^  uis_utfle_bom1,$/;"	e	enum:YAML::UtfIntroState	file:
ulong_long_value	src/3rd_party/spdlog/details/format.h	/^        ULongLong ulong_long_value;$/;"	m	union:fmt::internal::Value::__anon21
ulong_long_value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        ULongLong ulong_long_value;$/;"	m	union:fmt::internal::Value::__anon59
underline	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string underline = "\\033[4m";$/;"	m	class:spdlog::sinks::ansicolor_sink
underline	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string underline  = "\\033[4m";$/;"	m	class:spdlog::sinks::ansicolor_sink
unicode_literals	scripts/server/client_example.py	/^from __future__ import print_function, unicode_literals, division$/;"	i
unknown	src/3rd_party/simple-websocket-server/status_code.hpp	/^    unknown = 0,$/;"	m	class:SimpleWeb::StatusCode
unlink_	src/common/file_stream.h	/^  bool unlink_;$/;"	m	class:TemporaryFile
unlock	src/3rd_party/spdlog/details/null_mutex.h	/^    void unlock() {}$/;"	f	struct:spdlog::details::null_mutex
unlock	src/3rd_party/spdlog/include/spdlog/details/null_mutex.h	/^    void unlock() {}$/;"	f	struct:spdlog::details::null_mutex
unsigned2float	src/functional/floats.h	/^    namespace unsigned2float {$/;"	n	namespace:marian::functional
unspecified_bool	src/3rd_party/yaml-cpp/node/detail/bool_type.h	/^struct unspecified_bool {$/;"	s	namespace:YAML::detail
unspecified_bool_type	src/3rd_party/yaml-cpp/node/detail/bool_type.h	/^typedef void (*unspecified_bool_type)(unspecified_bool::NOT_ALLOWED*);$/;"	t	namespace:YAML::detail
update	src/optimizers/optimizers.h	/^  void update(Ptr<ExpressionGraph> graph, float multiplyFactor = 1.0f) {$/;"	f	class:marian::OptimizerBase
update	src/optimizers/optimizers.h	/^  void update(Tensor params, Tensor grads, float multiplyFactor = 1.0f) {$/;"	f	class:marian::OptimizerBase
update	src/training/graph_group_async.h	/^  void update(Ptr<data::Batch> batch) { execute(batch); }$/;"	f	class:marian::AsyncGraphGroup
update	src/training/graph_group_async_drop.h	/^  void update(Ptr<data::Batch> batch) { execute(batch); }$/;"	f	class:marian::AsyncGraphGroup
update	src/training/graph_group_singleton.h	/^  void update(Ptr<data::Batch> batch) { execute(batch); }$/;"	f	class:marian::SingletonGraph
update	src/training/graph_group_sync.h	/^  void update(Ptr<data::Batch> batch) { execute(batch); }$/;"	f	class:marian::SyncGraphGroup
update	src/training/scheduler.h	/^  void update(float cost, Ptr<data::Batch> batch) {$/;"	f	class:marian::Scheduler
updateElements	src/gpu/shape.h	/^  __HDI__ void updateElements() {$/;"	f	struct:marian::gpu::ConstantShape
updateMovingAverage	src/training/graph_group_async_drop.h	/^  void updateMovingAverage(Tensor paramsAvg, Tensor params, size_t batches) {$/;"	f	class:marian::AsyncGraphGroup
updateStalled	src/training/validator.h	/^  void updateStalled(const std::vector<Ptr<ExpressionGraph>>& graphs, float val) {$/;"	f	class:marian::Validator
updateStrides	src/gpu/shape.h	/^  __HDI__ void updateStrides() {$/;"	f	struct:marian::gpu::ConstantShape
update_pos	src/3rd_party/yaml-cpp/ostream_wrapper.cpp	/^void ostream_wrapper::update_pos(char ch) {$/;"	f	class:YAML::ostream_wrapper
upgrade	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    void upgrade(const std::shared_ptr<Connection> &connection) {$/;"	f	class:SimpleWeb::SocketServerBase
user_defined_example	src/3rd_party/spdlog/example/example.cpp	/^void user_defined_example()$/;"	f
user_defined_example	src/3rd_party/spdlog/example/jni/example.cpp	/^void user_defined_example()$/;"	f
ustring	src/3rd_party/spdlog/details/format.h	/^        StringValue<unsigned char> ustring;$/;"	m	union:fmt::internal::Value::__anon21
ustring	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        StringValue<unsigned char> ustring;$/;"	m	union:fmt::internal::Value::__anon59
utc_minutes_offset	src/3rd_party/spdlog/details/os.h	/^inline int utc_minutes_offset(const std::tm& tm = details::os::localtime())$/;"	f	namespace:spdlog::details::os
utc_minutes_offset	src/3rd_party/spdlog/include/spdlog/details/os.h	/^inline int utc_minutes_offset(const std::tm& tm = details::os::localtime())$/;"	f	namespace:spdlog::details::os
utf16be	src/3rd_party/yaml-cpp/stream.h	/^  enum CharacterSet { utf8, utf16le, utf16be, utf32le, utf32be };$/;"	e	enum:YAML::Stream::CharacterSet
utf16le	src/3rd_party/yaml-cpp/stream.h	/^  enum CharacterSet { utf8, utf16le, utf16be, utf32le, utf32be };$/;"	e	enum:YAML::Stream::CharacterSet
utf32be	src/3rd_party/yaml-cpp/stream.h	/^  enum CharacterSet { utf8, utf16le, utf16be, utf32le, utf32be };$/;"	e	enum:YAML::Stream::CharacterSet
utf32le	src/3rd_party/yaml-cpp/stream.h	/^  enum CharacterSet { utf8, utf16le, utf16be, utf32le, utf32be };$/;"	e	enum:YAML::Stream::CharacterSet
utf8	src/3rd_party/yaml-cpp/stream.h	/^  enum CharacterSet { utf8, utf16le, utf16be, utf32le, utf32be };$/;"	e	enum:YAML::Stream::CharacterSet
util	src/3rd_party/exception.cpp	/^namespace util {$/;"	n	file:
util	src/3rd_party/exception.h	/^namespace util {$/;"	n
utils	src/3rd_party/spdlog/bench/latency/utils.h	/^namespace utils$/;"	n
utils	src/3rd_party/spdlog/bench/utils.h	/^namespace utils$/;"	n
utils	src/3rd_party/spdlog/example/utils.h	/^namespace utils$/;"	n
v_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class v_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
va_	src/rnn/attention.h	/^  Expr Wa_, ba_, Ua_, va_;$/;"	m	class:marian::rnn::GlobalAttention
val	src/graph/node.h	/^  virtual Tensor& val() { return val_; };$/;"	f	class:marian::Node
val	src/graph/node_operators_unary.h	/^  Tensor& val() {$/;"	f	class:marian::ReshapeNodeOp
val	src/graph/node_operators_unary.h	/^  Tensor& val() {$/;"	f	class:marian::StepNodeOp
validate	src/training/scheduler.h	/^  void validate(const std::vector<Ptr<ExpressionGraph>>& graphs) {$/;"	f	class:marian::Scheduler
validate	src/training/validator.h	/^  virtual float validate(const std::vector<Ptr<ExpressionGraph>>& graphs) {$/;"	f	class:marian::ScriptValidator
validate	src/training/validator.h	/^  virtual float validate(const std::vector<Ptr<ExpressionGraph>>& graphs) {$/;"	f	class:marian::TranslationValidator
validate	src/training/validator.h	/^  virtual float validate(const std::vector<Ptr<ExpressionGraph>>& graphs) {$/;"	f	class:marian::Validator
validateBG	src/examples/mnist/validator.h	/^  virtual float validateBG($/;"	f	class:marian::AccuracyValidator
validateBG	src/training/validator.h	/^  virtual float validateBG($/;"	f	class:marian::CrossEntropyValidator
validateBG	src/training/validator.h	/^  virtual float validateBG($/;"	f	class:marian::ScriptValidator
validateBG	src/training/validator.h	/^  virtual float validateBG($/;"	f	class:marian::TranslationValidator
validateOptions	src/common/config_parser.cpp	/^void ConfigParser::validateOptions() const {$/;"	f	class:marian::ConfigParser
validating	src/training/scheduler.h	/^  bool validating() {$/;"	f	class:marian::Scheduler
validators_	src/training/scheduler.h	/^  std::vector<Ptr<ValidatorBase>> validators_;$/;"	m	class:marian::Scheduler
vals	src/graph/parameters.h	/^  Tensor vals() { return vals_->asTensor(); }$/;"	f	class:marian::Parameters
vals_	src/graph/parameters.h	/^  Ptr<TensorAllocator> vals_;$/;"	m	class:marian::Parameters
value	src/3rd_party/catch.hpp	/^        enum { value = sizeof( testStreamable(s << t) ) == sizeof( TrueType ) };$/;"	e	enum:Catch::Detail::IsStreamInsertable::__anon5
value	src/3rd_party/catch.hpp	/^        static const bool value = decltype(test<std::ostream,const T&>(0))::value;$/;"	m	class:Catch::Detail::IsStreamInsertable
value	src/3rd_party/spdlog/details/format.cc	/^				value = 0$/;"	e	enum:fmt::__anon34::is_same::__anon35	file:
value	src/3rd_party/spdlog/details/format.cc	/^				value = 1$/;"	e	enum:fmt::__anon34::is_same::__anon36	file:
value	src/3rd_party/spdlog/details/format.h	/^        const Char *value;$/;"	m	struct:fmt::internal::Value::StringValue
value	src/3rd_party/spdlog/details/format.h	/^        const void *value;$/;"	m	struct:fmt::internal::Value::CustomValue
value	src/3rd_party/spdlog/details/format.h	/^        value = 0$/;"	e	enum:fmt::internal::Not::__anon28
value	src/3rd_party/spdlog/details/format.h	/^        value = 1$/;"	e	enum:fmt::internal::Not::__anon29
value	src/3rd_party/spdlog/details/format.h	/^        value = ConvertToIntImpl2<T, enable_conversion>::value$/;"	e	enum:fmt::internal::ConvertToInt::__anon27
value	src/3rd_party/spdlog/details/format.h	/^        value = ConvertToIntImpl<T, !std::numeric_limits<T>::is_specialized>::value$/;"	e	enum:fmt::internal::ConvertToIntImpl2::__anon25
value	src/3rd_party/spdlog/details/format.h	/^        value = false$/;"	e	enum:fmt::internal::ConvertToIntImpl2::__anon24
value	src/3rd_party/spdlog/details/format.h	/^        value = false$/;"	e	enum:fmt::internal::ConvertToIntImpl::__anon22
value	src/3rd_party/spdlog/details/format.h	/^        value = sizeof(convert(get<DummyStream>() << get<T>())) == sizeof(No)$/;"	e	enum:fmt::internal::ConvertToIntImpl::__anon23
value	src/3rd_party/spdlog/details/format.h	/^    T value() const$/;"	f	class:fmt::IntFormatSpec
value	src/3rd_party/spdlog/details/null_mutex.h	/^    int value;$/;"	m	struct:spdlog::details::null_atomic_int
value	src/3rd_party/spdlog/include/spdlog/details/null_mutex.h	/^    int value;$/;"	m	struct:spdlog::details::null_atomic_int
value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  enum { value = 0 };$/;"	e	enum:fmt::__anon71::is_same::__anon72	file:
value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  enum { value = 1 };$/;"	e	enum:fmt::__anon71::is_same::__anon73	file:
value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        const Char *value;$/;"	m	struct:fmt::internal::Value::StringValue
value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        const void *value;$/;"	m	struct:fmt::internal::Value::CustomValue
value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        value = ConvertToIntImpl<T, !std::numeric_limits<T>::is_specialized>::value$/;"	e	enum:fmt::internal::ConvertToIntImpl2::__anon62
value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    T value() const$/;"	f	class:fmt::IntFormatSpec
value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    enum { value = 0 };$/;"	e	enum:fmt::internal::Not::__anon65
value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    enum { value = 1 };$/;"	e	enum:fmt::internal::Not::__anon66
value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    enum { value = ConvertToIntImpl2<T, enable_conversion>::value };$/;"	e	enum:fmt::internal::ConvertToInt::__anon64
value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    enum { value = ENABLE_CONVERSION };$/;"	e	enum:fmt::internal::ConvertToIntImpl::__anon60
value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    enum { value = false };$/;"	e	enum:fmt::internal::ConvertToIntImpl2::__anon61
value	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.h	/^        value = sizeof(convert(get<DummyStream>() << get<T>())) == sizeof(No)$/;"	e	enum:fmt::internal::ConvertToIntImpl::__anon44
value	src/3rd_party/spdlog/tests/catch.hpp	/^        static const bool value = false;$/;"	m	struct:Catch::FalseType
value	src/3rd_party/spdlog/tests/catch.hpp	/^        static const bool value = true;$/;"	m	struct:Catch::TrueType
value	src/3rd_party/yaml-cpp/collectionstack.h	/^  enum value { NoCollection, BlockMap, BlockSeq, FlowMap, FlowSeq, CompactMap };$/;"	g	struct:YAML::CollectionType
value	src/3rd_party/yaml-cpp/emitfromevents.h	/^    enum value { WaitingForSequenceEntry, WaitingForKey, WaitingForValue };$/;"	g	struct:YAML::EmitFromEvents::State
value	src/3rd_party/yaml-cpp/emitterdef.h	/^  enum value { NoType, Property, Scalar, FlowSeq, BlockSeq, FlowMap, BlockMap };$/;"	g	struct:YAML::EmitterNodeType
value	src/3rd_party/yaml-cpp/emittermanip.h	/^    enum value { Verbatim, PrimaryHandle, NamedHandle };$/;"	g	struct:YAML::_Tag::Type
value	src/3rd_party/yaml-cpp/emittermanip.h	/^  int value;$/;"	m	struct:YAML::_Indent
value	src/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { Local, Global };$/;"	g	struct:YAML::FmtScope
value	src/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { NoType, Flow, Block };$/;"	g	struct:YAML::FlowType
value	src/3rd_party/yaml-cpp/emitterstate.h	/^  enum value { NoType, Seq, Map };$/;"	g	struct:YAML::GroupType
value	src/3rd_party/yaml-cpp/emitterstyle.h	/^  enum value { Default, Block, Flow };$/;"	g	struct:YAML::EmitterStyle
value	src/3rd_party/yaml-cpp/emitterutils.h	/^  enum value { Plain, SingleQuoted, DoubleQuoted, Literal };$/;"	g	struct:YAML::StringFormat
value	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  enum value { None, Sequence, Map };$/;"	g	struct:YAML::detail::iterator_type
value	src/3rd_party/yaml-cpp/node/type.h	/^  enum value { Undefined, Null, Scalar, Sequence, Map };$/;"	g	struct:YAML::NodeType
value	src/3rd_party/yaml-cpp/tag.h	/^  std::string handle, value;$/;"	m	struct:YAML::Tag
value	src/3rd_party/yaml-cpp/token.h	/^  std::string value;$/;"	m	struct:YAML::Token
value	src/3rd_party/yaml-cpp/traits.h	/^  enum { value = false };$/;"	e	enum:YAML::is_numeric::__anon79
value	src/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon80
value	src/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon81
value	src/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon82
value	src/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon83
value	src/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon84
value	src/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon85
value	src/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon86
value	src/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon87
value	src/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon88
value	src/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon89
value	src/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon90
value	src/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon91
value	src/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon92
value	src/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon93
value	src/3rd_party/yaml-cpp/traits.h	/^  enum { value = true };$/;"	e	enum:YAML::is_numeric::__anon94
value	src/common/keywords.h	/^  static constexpr bool value = false;$/;"	m	struct:marian::keywords::is_one_of
value	src/common/keywords.h	/^  static constexpr bool value$/;"	m	struct:marian::keywords::is_one_of
value	src/common/keywords.h	/^  static constexpr std::size_t value = 0;$/;"	m	struct:marian::keywords::Index
value	src/common/keywords.h	/^  static constexpr std::size_t value$/;"	m	struct:marian::keywords::Index
value	src/functional/floats.h	/^      static constexpr auto value = i2f(V);$/;"	m	struct:marian::functional::F
value	src/functional/operands.h	/^      float value;$/;"	m	struct:marian::functional::Capture
value	src/functional/operands.h	/^      static constexpr auto value = V;$/;"	m	struct:marian::functional::C
value_	src/3rd_party/spdlog/details/format.h	/^    T value_;$/;"	m	class:fmt::IntFormatSpec
value_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    T value_;$/;"	m	class:fmt::IntFormatSpec
value_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    int value_;$/;"	m	class:fmt::ErrorCode
value_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    value_(value) {}$/;"	f	class:fmt::ErrorCode
value_	src/common/keywords.h	/^  const Value value_;$/;"	m	class:marian::keywords::Keyword
value_type	src/3rd_party/yaml-cpp/node/detail/iterator.h	/^  typedef typename iterator_base::value_type value_type;$/;"	t	class:YAML::detail::iterator_base
value_type	src/3rd_party/yaml-cpp/node/detail/node_iterator.h	/^  typedef node_iterator_value<V> value_type;$/;"	t	class:YAML::detail::node_iterator_base
value_type	src/common/keywords.h	/^  typedef Value value_type;$/;"	t	class:marian::keywords::Keyword
value_type	src/gpu/array.h	/^  typedef T value_type;$/;"	t	struct:marian::gpu::Array
values	src/kernels/sparse.h	/^  float* values() { return values_; }$/;"	f	class:marian::sparse::CSR
values_	src/3rd_party/spdlog/details/format.h	/^        const internal::Value *values_;$/;"	m	union:fmt::ArgList::__anon30
values_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        const internal::Value *values_;$/;"	m	union:fmt::ArgList::__anon67
values_	src/models/experimental/lex_probs.h	/^  std::vector<float> values_;$/;"	m	class:marian::LexProbs
var	src/functional/predicates.h	/^      Var<N> var;$/;"	m	struct:marian::functional::Assignee
version	src/3rd_party/yaml-cpp/directives.h	/^  Version version;$/;"	m	struct:YAML::Directives
version	src/python/marian.cpp	/^std::string version() {$/;"	f
version	src/python/marian_test.cpp	/^std::string version() {$/;"	f
version	src/python/mariannmt.cpp	/^std::string version() {$/;"	f
vertex_descriptor	src/tools/align2steps.cpp	/^typedef graph_traits<graph_t>::vertex_descriptor vertex_descriptor;$/;"	t	file:
visit	src/3rd_party/spdlog/details/format.h	/^    Result visit(const Arg &arg)$/;"	f	class:fmt::internal::ArgVisitor
visit	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Result visit(const Arg &arg)$/;"	f	class:fmt::ArgVisitor
visit_any_double	src/3rd_party/spdlog/details/format.h	/^    Result visit_any_double(T)$/;"	f	class:fmt::internal::ArgVisitor
visit_any_double	src/3rd_party/spdlog/details/format.h	/^    void visit_any_double(T value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_any_double	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Result visit_any_double(T)$/;"	f	class:fmt::ArgVisitor
visit_any_double	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void visit_any_double(T value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_any_int	src/3rd_party/spdlog/details/format.cc	/^			bool visit_any_int(T value)$/;"	f	class:fmt::__anon34::IsZeroInt
visit_any_int	src/3rd_party/spdlog/details/format.cc	/^			int visit_any_int(T value)$/;"	f	class:fmt::__anon34::PrecisionHandler
visit_any_int	src/3rd_party/spdlog/details/format.cc	/^			unsigned visit_any_int(T value)$/;"	f	class:fmt::__anon34::WidthHandler
visit_any_int	src/3rd_party/spdlog/details/format.cc	/^			void visit_any_int(T value)$/;"	f	class:fmt::__anon34::CharConverter
visit_any_int	src/3rd_party/spdlog/details/format.cc	/^			void visit_any_int(U value)$/;"	f	class:fmt::__anon34::ArgConverter
visit_any_int	src/3rd_party/spdlog/details/format.h	/^    Result visit_any_int(T)$/;"	f	class:fmt::internal::ArgVisitor
visit_any_int	src/3rd_party/spdlog/details/format.h	/^    void visit_any_int(T value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_any_int	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  bool visit_any_int(T value) { return value == 0; }$/;"	f	class:fmt::__anon71::IsZeroInt
visit_any_int	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  int visit_any_int(T value) {$/;"	f	class:fmt::__anon71::PrecisionHandler
visit_any_int	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  unsigned visit_any_int(T value) {$/;"	f	class:fmt::__anon71::WidthHandler
visit_any_int	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  void visit_any_int(T value) {$/;"	f	class:fmt::__anon71::CharConverter
visit_any_int	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  void visit_any_int(U value) {$/;"	f	class:fmt::__anon71::ArgConverter
visit_any_int	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Result visit_any_int(T)$/;"	f	class:fmt::ArgVisitor
visit_any_int	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void visit_any_int(T value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_bool	src/3rd_party/spdlog/details/format.cc	/^			void visit_bool(bool value)$/;"	f	class:fmt::__anon34::ArgConverter
visit_bool	src/3rd_party/spdlog/details/format.cc	/^			void visit_bool(bool value)$/;"	f	class:fmt::internal::PrintfArgFormatter
visit_bool	src/3rd_party/spdlog/details/format.h	/^    Result visit_bool(bool value)$/;"	f	class:fmt::internal::ArgVisitor
visit_bool	src/3rd_party/spdlog/details/format.h	/^    void visit_bool(bool value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_bool	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  void visit_bool(bool value) {$/;"	f	class:fmt::__anon71::ArgConverter
visit_bool	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  void visit_bool(bool value) {$/;"	f	class:fmt::internal::PrintfArgFormatter
visit_bool	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Result visit_bool(bool value)$/;"	f	class:fmt::ArgVisitor
visit_bool	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void visit_bool(bool value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_char	src/3rd_party/spdlog/details/format.cc	/^			void visit_char(int value)$/;"	f	class:fmt::internal::PrintfArgFormatter
visit_char	src/3rd_party/spdlog/details/format.h	/^    Result visit_char(int value)$/;"	f	class:fmt::internal::ArgVisitor
visit_char	src/3rd_party/spdlog/details/format.h	/^    void visit_char(int value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_char	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  void visit_char(int value) {$/;"	f	class:fmt::internal::PrintfArgFormatter
visit_char	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Result visit_char(int value)$/;"	f	class:fmt::ArgVisitor
visit_char	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void visit_char(int value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_cstring	src/3rd_party/spdlog/details/format.cc	/^			void visit_cstring(const char *value)$/;"	f	class:fmt::internal::PrintfArgFormatter
visit_cstring	src/3rd_party/spdlog/details/format.h	/^    Result visit_cstring(const char *)$/;"	f	class:fmt::internal::ArgVisitor
visit_cstring	src/3rd_party/spdlog/details/format.h	/^    void visit_cstring(const char *value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_cstring	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  void visit_cstring(const char *value) {$/;"	f	class:fmt::internal::PrintfArgFormatter
visit_cstring	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Result visit_cstring(const char *)$/;"	f	class:fmt::ArgVisitor
visit_cstring	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void visit_cstring(const char *value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_custom	src/3rd_party/spdlog/details/format.cc	/^			void visit_custom(Arg::CustomValue c)$/;"	f	class:fmt::internal::PrintfArgFormatter
visit_custom	src/3rd_party/spdlog/details/format.h	/^    Result visit_custom(Arg::CustomValue)$/;"	f	class:fmt::internal::ArgVisitor
visit_custom	src/3rd_party/spdlog/details/format.h	/^    void visit_custom(Arg::CustomValue c)$/;"	f	class:fmt::internal::BasicArgFormatter
visit_custom	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  void visit_custom(Arg::CustomValue c) {$/;"	f	class:fmt::internal::PrintfArgFormatter
visit_custom	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Result visit_custom(Arg::CustomValue)$/;"	f	class:fmt::ArgVisitor
visit_custom	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void visit_custom(internal::Arg::CustomValue c)$/;"	f	class:fmt::BasicArgFormatter
visit_double	src/3rd_party/spdlog/details/format.h	/^    Result visit_double(double value)$/;"	f	class:fmt::internal::ArgVisitor
visit_double	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Result visit_double(double value)$/;"	f	class:fmt::ArgVisitor
visit_int	src/3rd_party/spdlog/details/format.h	/^    Result visit_int(int value)$/;"	f	class:fmt::internal::ArgVisitor
visit_int	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Result visit_int(int value)$/;"	f	class:fmt::ArgVisitor
visit_long_double	src/3rd_party/spdlog/details/format.h	/^    Result visit_long_double(long double value)$/;"	f	class:fmt::internal::ArgVisitor
visit_long_double	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Result visit_long_double(long double value)$/;"	f	class:fmt::ArgVisitor
visit_long_long	src/3rd_party/spdlog/details/format.h	/^    Result visit_long_long(LongLong value)$/;"	f	class:fmt::internal::ArgVisitor
visit_long_long	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Result visit_long_long(LongLong value)$/;"	f	class:fmt::ArgVisitor
visit_pointer	src/3rd_party/spdlog/details/format.cc	/^			void visit_pointer(const void *value)$/;"	f	class:fmt::internal::PrintfArgFormatter
visit_pointer	src/3rd_party/spdlog/details/format.h	/^    Result visit_pointer(const void *)$/;"	f	class:fmt::internal::ArgVisitor
visit_pointer	src/3rd_party/spdlog/details/format.h	/^    void visit_pointer(const void *value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_pointer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  void visit_pointer(const void *value) {$/;"	f	class:fmt::internal::PrintfArgFormatter
visit_pointer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Result visit_pointer(const void *)$/;"	f	class:fmt::ArgVisitor
visit_pointer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void visit_pointer(const void *value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_string	src/3rd_party/spdlog/details/format.h	/^    Result visit_string(Arg::StringValue<char>)$/;"	f	class:fmt::internal::ArgVisitor
visit_string	src/3rd_party/spdlog/details/format.h	/^    void visit_string(Arg::StringValue<char> value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_string	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Result visit_string(Arg::StringValue<char>)$/;"	f	class:fmt::ArgVisitor
visit_string	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void visit_string(Arg::StringValue<char> value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_uint	src/3rd_party/spdlog/details/format.h	/^    Result visit_uint(unsigned value)$/;"	f	class:fmt::internal::ArgVisitor
visit_uint	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Result visit_uint(unsigned value)$/;"	f	class:fmt::ArgVisitor
visit_ulong_long	src/3rd_party/spdlog/details/format.h	/^    Result visit_ulong_long(ULongLong value)$/;"	f	class:fmt::internal::ArgVisitor
visit_ulong_long	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Result visit_ulong_long(ULongLong value)$/;"	f	class:fmt::ArgVisitor
visit_unhandled_arg	src/3rd_party/spdlog/details/format.h	/^    Result visit_unhandled_arg()$/;"	f	class:fmt::internal::ArgVisitor
visit_unhandled_arg	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Result visit_unhandled_arg()$/;"	f	class:fmt::ArgVisitor
visit_wstring	src/3rd_party/spdlog/details/format.h	/^    Result visit_wstring(Arg::StringValue<wchar_t>)$/;"	f	class:fmt::internal::ArgVisitor
visit_wstring	src/3rd_party/spdlog/details/format.h	/^    void visit_wstring(Arg::StringValue<Char> value)$/;"	f	class:fmt::internal::ArgFormatterBase
visit_wstring	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Result visit_wstring(Arg::StringValue<wchar_t>)$/;"	f	class:fmt::ArgVisitor
visit_wstring	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void visit_wstring(Arg::StringValue<Char> value)$/;"	f	class:fmt::internal::ArgFormatterBase
vocabs_	src/data/corpus.h	/^  std::vector<Ptr<Vocab>> vocabs_;$/;"	m	class:marian::data::Corpus
vocabs_	src/data/text_input.h	/^  std::vector<Ptr<Vocab>> vocabs_;$/;"	m	class:marian::data::TextInput
vocabs_	src/training/validator.h	/^  std::vector<Ptr<Vocab>> vocabs_;$/;"	m	class:marian::Validator
vt_	src/optimizers/optimizers.h	/^  Tensor vt_;$/;"	m	class:marian::Adam
waitFinished	src/3rd_party/threadpool.h	/^    void waitFinished()$/;"	f	class:marian::ThreadPool
waitFinished	src/3rd_party/threadpool2.h	/^    void waitFinished()$/;"	f	class:marian::ThreadPool2
wait_empty_q	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::wait_empty_q()$/;"	f	class:spdlog::details::async_log_helper
wait_for_one	src/3rd_party/threadpool.h	/^    void wait_for_one(std::unique_lock<std::mutex>& lock) {$/;"	f	class:marian::ThreadPool
wait_for_one	src/3rd_party/threadpool2.h	/^    void wait_for_one(std::unique_lock<std::mutex>& lock) {$/;"	f	class:marian::ThreadPool2
wait_for_others	src/3rd_party/threadpool.h	/^    void wait_for_others(std::unique_lock<std::mutex>& lock) {$/;"	f	class:marian::ThreadPool
wait_for_others	src/3rd_party/threadpool2.h	/^    void wait_for_others(std::unique_lock<std::mutex>& lock) {$/;"	f	class:marian::ThreadPool2
warn	src/3rd_party/spdlog/common.h	/^    warn = 4,$/;"	e	enum:spdlog::level::__anon38
warn	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::warn()$/;"	f	class:spdlog::logger
warn	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::warn(const T& msg)$/;"	f	class:spdlog::logger
warn	src/3rd_party/spdlog/details/logger_impl.h	/^inline spdlog::details::line_logger spdlog::logger::warn(const char* fmt, const Args&... args)$/;"	f	class:spdlog::logger
warn	src/3rd_party/spdlog/include/spdlog/common.h	/^    warn = 3,$/;"	e	enum:spdlog::level::__anon40
warn	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn(const T& msg)$/;"	f	class:spdlog::logger
warn	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn(const char* fmt, const Arg1 &arg1, const Args&... args)$/;"	f	class:spdlog::logger
warn	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn(const wchar_t* fmt, const Args&... args)$/;"	f	class:spdlog::logger
warn_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn_if(const bool flag, const T& msg)$/;"	f	class:spdlog::logger
warn_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn_if(const bool flag, const char* fmt, const Arg1& arg1, const Args&... args)$/;"	f	class:spdlog::logger
warn_if	src/3rd_party/spdlog/include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn_if(const bool flag, const wchar_t* fmt, const Args&... args)$/;"	f	class:spdlog::logger
weight_	src/translator/scorers.h	/^  float weight_;$/;"	m	class:marian::Scorer
what	src/3rd_party/exception.h	/^    const char *what() const throw() { return what_.c_str(); }$/;"	f	class:util::Exception
what	src/tensors/allocator.h	/^  virtual const char* what() const throw() {$/;"	f	class:marian::AllocationException
what_	src/3rd_party/exception.h	/^    std::string what_;$/;"	m	class:util::Exception
white	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string white = "\\033[37m";$/;"	m	class:spdlog::sinks::ansicolor_sink
white	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string white      = "\\033[37m";$/;"	m	class:spdlog::sinks::ansicolor_sink
width	src/3rd_party/spdlog/details/format.h	/^    unsigned width() const$/;"	f	struct:fmt::TypeSpec
width	src/3rd_party/spdlog/details/format.h	/^    unsigned width() const$/;"	f	struct:fmt::WidthSpec
width	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    unsigned width() const$/;"	f	struct:fmt::TypeSpec
width	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    unsigned width() const$/;"	f	struct:fmt::WidthSpec
width_	src/3rd_party/spdlog/details/format.h	/^    unsigned width_;$/;"	m	struct:fmt::WidthSpec
width_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    unsigned width_;$/;"	m	struct:fmt::WidthSpec
width_	src/data/corpus.h	/^  size_t width_;$/;"	m	class:marian::data::SubBatch
width_	src/graph/node_operators_unary.h	/^    int width_;$/;"	m	class:marian::PoolingWithMaskingOp
wincolor_sink	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    wincolor_sink(HANDLE std_handle): out_handle_(std_handle)$/;"	f	class:spdlog::sinks::wincolor_sink
wincolor_sink	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^class wincolor_sink: public  base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
wincolor_stderr_sink	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    wincolor_stderr_sink() : wincolor_sink<Mutex>(GetStdHandle(STD_ERROR_HANDLE))$/;"	f	class:spdlog::sinks::wincolor_stderr_sink
wincolor_stderr_sink	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^class wincolor_stderr_sink: public wincolor_sink<Mutex>$/;"	c	namespace:spdlog::sinks
wincolor_stderr_sink_mt	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^typedef wincolor_stderr_sink<std::mutex> wincolor_stderr_sink_mt;$/;"	t	namespace:spdlog::sinks
wincolor_stderr_sink_st	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^typedef wincolor_stderr_sink<details::null_mutex> wincolor_stderr_sink_st;$/;"	t	namespace:spdlog::sinks
wincolor_stdout_sink	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    wincolor_stdout_sink() : wincolor_sink<Mutex>(GetStdHandle(STD_OUTPUT_HANDLE))$/;"	f	class:spdlog::sinks::wincolor_stdout_sink
wincolor_stdout_sink	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^class wincolor_stdout_sink: public wincolor_sink<Mutex>$/;"	c	namespace:spdlog::sinks
wincolor_stdout_sink_mt	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^typedef wincolor_stdout_sink<std::mutex> wincolor_stdout_sink_mt;$/;"	t	namespace:spdlog::sinks
wincolor_stdout_sink_st	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^typedef wincolor_stdout_sink<details::null_mutex> wincolor_stdout_sink_st;$/;"	t	namespace:spdlog::sinks
wordAlignment_	src/data/corpus.h	/^  Ptr<WordAlignment> wordAlignment_;$/;"	m	class:marian::data::Corpus
word_	src/translator/hypothesis.h	/^  const size_t word_;$/;"	m	class:marian::Hypothesis
word_size	src/3rd_party/cnpy/cnpy.h	/^        unsigned int word_size;$/;"	m	struct:cnpy::NpyArray
words	src/data/batch.h	/^  virtual size_t words() const { return 0; };$/;"	f	class:marian::data::Batch
words	src/data/corpus.h	/^  size_t words() const { return batches_[0]->batchWords(); }$/;"	f	class:marian::data::CorpusBatch
words_	src/data/corpus.h	/^  size_t words_;$/;"	m	class:marian::data::SubBatch
worker_loop	src/3rd_party/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::worker_loop()$/;"	f	class:spdlog::details::async_log_helper
worker_loop	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::worker_loop()$/;"	f	class:spdlog::details::async_log_helper
workers	src/3rd_party/threadpool.h	/^    std::vector<std::thread> workers;$/;"	m	class:marian::ThreadPool
workers	src/3rd_party/threadpool2.h	/^    std::vector<std::thread> workers;$/;"	m	class:marian::ThreadPool2
write	src/3rd_party/spdlog/details/file_helper.h	/^    void write(const log_msg& msg)$/;"	f	class:spdlog::details::file_helper
write	src/3rd_party/spdlog/details/format.cc	/^		void write(std::ostream &os, fmt::Writer &w)$/;"	f	namespace:fmt::__anon34
write	src/3rd_party/spdlog/details/format.h	/^    void write(BasicCStringRef<Char> format, ArgList args)$/;"	f	class:BasicWriter
write	src/3rd_party/spdlog/details/format.h	/^    void write(BasicWriter<Char> &w, const Char *start, const Char *end)$/;"	f	class:fmt::internal::FormatterBase
write	src/3rd_party/spdlog/details/format.h	/^    void write(bool value)$/;"	f	class:fmt::internal::ArgFormatterBase
write	src/3rd_party/spdlog/details/format.h	/^    void write(const char *value)$/;"	f	class:fmt::internal::ArgFormatterBase
write	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline void spdlog::details::line_logger::write(const char* fmt, const Args&... args)$/;"	f	class:spdlog::details::line_logger
write	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline void spdlog::details::line_logger::write(const char* what)$/;"	f	class:spdlog::details::line_logger
write	src/3rd_party/spdlog/include/spdlog/details/file_helper.h	/^    void write(const log_msg& msg)$/;"	f	class:spdlog::details::file_helper
write	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void write(BasicCStringRef<Char> format, ArgList args)$/;"	f	class:BasicWriter
write	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void write(BasicWriter<Char> &w, const Char *start, const Char *end)$/;"	f	class:fmt::internal::FormatterBase
write	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void write(bool value)$/;"	f	class:fmt::internal::ArgFormatterBase
write	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void write(const char *value)$/;"	f	class:fmt::internal::ArgFormatterBase
write	src/3rd_party/spdlog/include/spdlog/fmt/bundled/ostream.cc	/^void write(std::ostream &os, Writer &w) {$/;"	f	namespace:fmt::__anon74
write	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.cc	/^std::size_t fmt::File::write(const void *buffer, std::size_t count) {$/;"	f	class:fmt::File
write	src/3rd_party/yaml-cpp/ostream_wrapper.cpp	/^void ostream_wrapper::write(const char* str, std::size_t size) {$/;"	f	class:YAML::ostream_wrapper
write	src/3rd_party/yaml-cpp/ostream_wrapper.cpp	/^void ostream_wrapper::write(const std::string& str) {$/;"	f	class:YAML::ostream_wrapper
write_decimal	src/3rd_party/spdlog/details/format.h	/^    void write_decimal(Int value)$/;"	f	class:BasicWriter
write_decimal	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void write_decimal(Int value)$/;"	f	class:BasicWriter
write_double	src/3rd_party/spdlog/details/format.h	/^void BasicWriter<Char>::write_double(T value, const FormatSpec &spec)$/;"	f	class:BasicWriter
write_double	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^void BasicWriter<Char>::write_double(T value, const FormatSpec &spec)$/;"	f	class:BasicWriter
write_handshake	src/3rd_party/simple-websocket-server/server_ws.hpp	/^    void write_handshake(const std::shared_ptr<Connection> &connection) {$/;"	f	class:SimpleWeb::SocketServerBase
write_int	src/3rd_party/spdlog/details/format.h	/^void BasicWriter<Char>::write_int(T value, Spec spec)$/;"	f	class:BasicWriter
write_int	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^void BasicWriter<Char>::write_int(T value, Spec spec)$/;"	f	class:BasicWriter
write_null_pointer	src/3rd_party/spdlog/details/format.cc	/^			void write_null_pointer()$/;"	f	class:fmt::internal::PrintfArgFormatter	file:
write_null_pointer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^  void write_null_pointer() {$/;"	f	class:fmt::internal::PrintfArgFormatter	file:
write_pointer	src/3rd_party/spdlog/details/format.h	/^    void write_pointer(const void *p)$/;"	f	class:fmt::internal::ArgFormatterBase
write_pointer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    void write_pointer(const void *p)$/;"	f	class:fmt::internal::ArgFormatterBase
write_str	src/3rd_party/spdlog/details/format.h	/^typename BasicWriter<Char>::CharPtr BasicWriter<Char>::write_str($/;"	f	class:BasicWriter
write_str	src/3rd_party/spdlog/details/format.h	/^void BasicWriter<Char>::write_str($/;"	f	class:BasicWriter
write_str	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^typename BasicWriter<Char>::CharPtr BasicWriter<Char>::write_str($/;"	f	class:BasicWriter
write_str	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^void BasicWriter<Char>::write_str($/;"	f	class:BasicWriter
write_unsigned_decimal	src/3rd_party/spdlog/details/format.h	/^    Char *write_unsigned_decimal(UInt value, unsigned prefix_size = 0)$/;"	f	class:BasicWriter
write_unsigned_decimal	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    Char *write_unsigned_decimal(UInt value, unsigned prefix_size = 0)$/;"	f	class:BasicWriter
write_with_helper	src/3rd_party/spdlog/tests/file_helper.cpp	/^static void write_with_helper(file_helper &helper, size_t howmany)$/;"	f	file:
writer	src/3rd_party/spdlog/details/format.h	/^    BasicWriter<Char> &writer()$/;"	f	class:fmt::BasicFormatter
writer	src/3rd_party/spdlog/details/format.h	/^    BasicWriter<Char> &writer()$/;"	f	class:fmt::internal::ArgFormatterBase
writer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicWriter<Char> &writer()$/;"	f	class:fmt::BasicFormatter
writer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicWriter<Char> &writer()$/;"	f	class:fmt::internal::ArgFormatterBase
writer_	src/3rd_party/spdlog/details/format.h	/^    BasicWriter<Char> &writer_;$/;"	m	class:fmt::BasicFormatter
writer_	src/3rd_party/spdlog/details/format.h	/^    BasicWriter<Char> &writer_;$/;"	m	class:fmt::internal::ArgFormatterBase
writer_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicWriter<Char> &writer_;$/;"	m	class:fmt::BasicFormatter
writer_	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    BasicWriter<Char> &writer_;$/;"	m	class:fmt::internal::ArgFormatterBase
wstring	src/3rd_party/spdlog/details/format.h	/^        StringValue<wchar_t> wstring;$/;"	m	union:fmt::internal::Value::__anon21
wstring	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^        StringValue<wchar_t> wstring;$/;"	m	union:fmt::internal::Value::__anon59
x	src/3rd_party/svd/defs_and_types.h	/^	float x, y, z;$/;"	m	struct:__anon1
x	src/3rd_party/svd/defs_and_types.h	/^	int x, y, z;$/;"	m	struct:__anon3
x	src/3rd_party/svd/defs_and_types.h	/^	long x, y, z;$/;"	m	struct:__anon2
x	src/functional/predicates.h	/^      X x;$/;"	m	struct:marian::functional::Assign
x	src/functional/predicates.h	/^      X x;$/;"	m	struct:marian::functional::BinaryFunctor
x	src/functional/predicates.h	/^      X x;$/;"	m	struct:marian::functional::TernaryFunctor
x	src/functional/predicates.h	/^      X x;$/;"	m	struct:marian::functional::UnaryFunctor
y	src/3rd_party/svd/defs_and_types.h	/^	float x, y, z;$/;"	m	struct:__anon1
y	src/3rd_party/svd/defs_and_types.h	/^	int x, y, z;$/;"	m	struct:__anon3
y	src/3rd_party/svd/defs_and_types.h	/^	long x, y, z;$/;"	m	struct:__anon2
y	src/functional/predicates.h	/^      Y y;$/;"	m	struct:marian::functional::Assign
y	src/functional/predicates.h	/^      Y y;$/;"	m	struct:marian::functional::BinaryFunctor
y	src/functional/predicates.h	/^      Y y;$/;"	m	struct:marian::functional::TernaryFunctor
yaml	scripts/contrib/inject_model_params.py	/^import yaml$/;"	i
yaml	scripts/embeddings/export_embeddings.py	/^import yaml$/;"	i
ycm_core	contrib/vim/.ycm_extra_conf.py	/^import ycm_core$/;"	i
yellow	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    const std::string yellow = "\\033[33m";$/;"	m	class:spdlog::sinks::ansicolor_sink
yellow	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^    const std::string yellow     = "\\033[33m";$/;"	m	class:spdlog::sinks::ansicolor_sink
z	src/3rd_party/svd/defs_and_types.h	/^	float x, y, z;$/;"	m	struct:__anon1
z	src/3rd_party/svd/defs_and_types.h	/^	int x, y, z;$/;"	m	struct:__anon3
z	src/3rd_party/svd/defs_and_types.h	/^	long x, y, z;$/;"	m	struct:__anon2
z	src/functional/predicates.h	/^      Z z;$/;"	m	struct:marian::functional::TernaryFunctor
z_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    z_formatter() :_last_update(std::chrono::seconds(0)) {}$/;"	f	class:spdlog::details::z_formatter
z_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^class z_formatter :public flag_formatter$/;"	c	namespace:spdlog::details
z_formatter	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^    z_formatter():_last_update(std::chrono::seconds(0)), _offset_minutes(0)$/;"	f	class:spdlog::details::SPDLOG_FINAL
zeros	src/graph/expression_graph.h	/^  Expr zeros(Args... args) {$/;"	f	class:marian::ExpressionGraph
~BasicWriter	src/3rd_party/spdlog/details/format.h	/^    virtual ~BasicWriter()$/;"	f	class:BasicWriter
~BasicWriter	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    virtual ~BasicWriter() {}$/;"	f	class:BasicWriter
~Buffer	src/3rd_party/spdlog/details/format.h	/^    virtual ~Buffer()$/;"	f	class:fmt::Buffer
~Buffer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    virtual ~Buffer() {}$/;"	f	class:fmt::Buffer
~CSR	src/kernels/sparse.h	/^  ~CSR() {$/;"	f	class:marian::sparse::CSR
~Chainable	src/graph/chainable.h	/^  virtual ~Chainable(){};$/;"	f	struct:marian::Chainable
~ConstantNode	src/graph/node_operators.h	/^  ~ConstantNode() {}$/;"	f	struct:marian::ConstantNode
~DecomposedExpression	src/3rd_party/catch.hpp	/^        virtual ~DecomposedExpression() {}$/;"	f	struct:Catch::DecomposedExpression
~DeviceCPU	src/tensors/tensor_cpu.h	/^  ~DeviceCPU() {$/;"	f	class:marian::DeviceCPU
~DeviceCPU	src/tests/allocator_test.cpp	/^  ~DeviceCPU() { delete[] data_; }$/;"	f	class:DeviceCPU
~Emitter	src/3rd_party/yaml-cpp/emitter.cpp	/^Emitter::~Emitter() {}$/;"	f	class:YAML::Emitter
~EmitterState	src/3rd_party/yaml-cpp/emitterstate.cpp	/^EmitterState::~EmitterState() {}$/;"	f	class:YAML::EmitterState
~ErrnoException	src/3rd_party/exception.cpp	/^ErrnoException::~ErrnoException() throw() {}$/;"	f	class:util::ErrnoException
~EventHandler	src/3rd_party/yaml-cpp/eventhandler.h	/^  virtual ~EventHandler() {}$/;"	f	class:YAML::EventHandler
~Exception	src/3rd_party/exception.cpp	/^Exception::~Exception() throw() {}$/;"	f	class:util::Exception
~ExpressionGraph	src/graph/expression_graph.h	/^  ~ExpressionGraph() {$/;"	f	class:marian::ExpressionGraph
~Factory	src/layers/factory.h	/^  virtual ~Factory() {}$/;"	f	class:marian::Factory
~FileOpenException	src/3rd_party/exception.h	/^    ~FileOpenException() throw() {}$/;"	f	class:util::FileOpenException
~FormatError	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^FMT_FUNC FormatError::~FormatError() throw() {}$/;"	f	class:fmt::FormatError
~GraphGroup	src/training/graph_group.h	/^  virtual ~GraphGroup() {}$/;"	f	class:marian::GraphGroup
~LayerFactory	src/layers/constructors.h	/^  virtual ~LayerFactory() {}$/;"	f	struct:marian::mlp::LayerFactory
~Locale	src/3rd_party/spdlog/include/spdlog/fmt/bundled/posix.h	/^    ~Locale()$/;"	f	class:fmt::Locale
~MemoryBuffer	src/3rd_party/spdlog/details/format.h	/^    ~MemoryBuffer()$/;"	f	class:fmt::internal::MemoryBuffer
~MemoryBuffer	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.h	/^    ~MemoryBuffer()$/;"	f	class:fmt::internal::MemoryBuffer
~MethodTestCase	src/3rd_party/catch.hpp	/^    virtual ~MethodTestCase() {}$/;"	f	class:Catch::MethodTestCase
~MethodTestCase	src/3rd_party/spdlog/tests/catch.hpp	/^    virtual ~MethodTestCase() {}$/;"	f	class:Catch::MethodTestCase
~NaryNodeOp	src/graph/node.h	/^  virtual ~NaryNodeOp() {}$/;"	f	struct:marian::NaryNodeOp
~Node	src/3rd_party/yaml-cpp/node/impl.h	/^inline Node::~Node() {}$/;"	f	class:YAML::Node
~Node	src/graph/node.h	/^  virtual ~Node() {$/;"	f	class:marian::Node
~NodeBuilder	src/3rd_party/yaml-cpp/nodebuilder.cpp	/^NodeBuilder::~NodeBuilder() {}$/;"	f	class:YAML::NodeBuilder
~NpzConverter	src/data/npz_converter.cpp	/^NpzConverter::~NpzConverter() {$/;"	f	class:NpzConverter
~NpzConverter	src/data/npz_converter.h	/^  ~NpzConverter() {$/;"	f	class:NpzConverter
~OverflowException	src/3rd_party/exception.cpp	/^OverflowException::~OverflowException() throw() {}$/;"	f	class:util::OverflowException
~ParamNode	src/graph/node_operators.h	/^  ~ParamNode() {}$/;"	f	struct:marian::ParamNode
~Parser	src/3rd_party/yaml-cpp/parser.cpp	/^Parser::~Parser() {}$/;"	f	class:YAML::Parser
~Ptr	src/3rd_party/catch.hpp	/^        ~Ptr(){$/;"	f	class:Catch::Ptr
~Ptr	src/3rd_party/spdlog/tests/catch.hpp	/^        ~Ptr(){$/;"	f	class:Catch::Ptr
~RegEx	src/3rd_party/yaml-cpp/regex_yaml.h	/^  ~RegEx() {}$/;"	f	class:YAML::RegEx
~ReshapeNodeOp	src/graph/node_operators_unary.h	/^  ~ReshapeNodeOp() {}$/;"	f	class:marian::ReshapeNodeOp
~RuntimeError	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^FMT_FUNC internal::RuntimeError::~RuntimeError() throw() {}$/;"	f	class:fmt::internal::RuntimeError
~Scanner	src/3rd_party/yaml-cpp/scanner.cpp	/^Scanner::~Scanner() {}$/;"	f	class:YAML::Scanner
~SentenceTuple	src/data/corpus.h	/^  ~SentenceTuple() { tuple_.clear(); }$/;"	f	class:marian::data::SentenceTuple
~SettingChangeBase	src/3rd_party/yaml-cpp/setting.h	/^  virtual ~SettingChangeBase() {}$/;"	f	class:YAML::SettingChangeBase
~SettingChanges	src/3rd_party/yaml-cpp/setting.h	/^  ~SettingChanges() { clear(); }$/;"	f	class:YAML::SettingChanges
~SingleDocParser	src/3rd_party/yaml-cpp/singledocparser.cpp	/^SingleDocParser::~SingleDocParser() {}$/;"	f	class:YAML::SingleDocParser
~SparseTensorBase	src/training/sparse_tensor.h	/^  ~SparseTensorBase() {}$/;"	f	class:marian::SparseTensorBase
~Stackable	src/rnn/types.h	/^  virtual ~Stackable() {}$/;"	f	class:marian::rnn::Stackable
~StackableFactory	src/rnn/constructors.h	/^  virtual ~StackableFactory() {}$/;"	f	struct:marian::rnn::StackableFactory
~Stream	src/3rd_party/yaml-cpp/stream.cpp	/^Stream::~Stream() { delete[] m_pPrefetched; }$/;"	f	class:YAML::Stream
~StreamCharSource	src/3rd_party/yaml-cpp/streamcharsource.h	/^  ~StreamCharSource() {}$/;"	f	class:YAML::StreamCharSource
~SystemError	src/3rd_party/spdlog/include/spdlog/fmt/bundled/format.cc	/^FMT_FUNC SystemError::~SystemError() throw() {}$/;"	f	class:fmt::SystemError
~TemporaryFile	src/common/file_stream.h	/^  ~TemporaryFile() {$/;"	f	class:TemporaryFile
~TensorAllocator	src/tensors/tensor_allocator.h	/^  ~TensorAllocator() { clear(); }$/;"	f	class:marian::TensorAllocator
~TensorBase	src/tensors/tensor.h	/^  ~TensorBase() {}$/;"	f	class:marian::TensorBase
~ThreadPool	src/3rd_party/threadpool.h	/^inline ThreadPool::~ThreadPool() {$/;"	f	class:marian::ThreadPool
~ThreadPool2	src/3rd_party/threadpool2.h	/^inline ThreadPool2::~ThreadPool2() {$/;"	f	class:marian::ThreadPool2
~TranslateServiceMultiGPU	src/translator/translator.h	/^  virtual ~TranslateServiceMultiGPU() {}$/;"	f	class:marian::TranslateServiceMultiGPU
~WindowsException	src/3rd_party/exception.cpp	/^WindowsException::~WindowsException() throw() {}$/;"	f	class:util::WindowsException
~ansicolor_sink	src/3rd_party/spdlog/include/spdlog/sinks/ansicolor_sink.h	/^    virtual ~ansicolor_sink()$/;"	f	class:spdlog::sinks::ansicolor_sink
~ansicolor_sink	src/3rd_party/spdlog/sinks/ansicolor_sink.h	/^inline ansicolor_sink::~ansicolor_sink()$/;"	f	class:spdlog::sinks::ansicolor_sink
~async_log_helper	src/3rd_party/spdlog/details/async_log_helper.h	/^inline spdlog::details::async_log_helper::~async_log_helper()$/;"	f	class:spdlog::details::async_log_helper
~async_log_helper	src/3rd_party/spdlog/include/spdlog/details/async_log_helper.h	/^inline spdlog::details::async_log_helper::~async_log_helper()$/;"	f	class:spdlog::details::async_log_helper
~file_helper	src/3rd_party/spdlog/details/file_helper.h	/^    ~file_helper()$/;"	f	class:spdlog::details::file_helper
~file_helper	src/3rd_party/spdlog/include/spdlog/details/file_helper.h	/^    ~file_helper()$/;"	f	class:spdlog::details::file_helper
~flag_formatter	src/3rd_party/spdlog/details/pattern_formatter_impl.h	/^    virtual ~flag_formatter() {}$/;"	f	class:spdlog::details::flag_formatter
~flag_formatter	src/3rd_party/spdlog/include/spdlog/details/pattern_formatter_impl.h	/^    virtual ~flag_formatter()$/;"	f	class:spdlog::details::flag_formatter
~formatter	src/3rd_party/spdlog/formatter.h	/^    virtual ~formatter() {}$/;"	f	class:spdlog::formatter
~formatter	src/3rd_party/spdlog/include/spdlog/formatter.h	/^    virtual ~formatter() {}$/;"	f	class:spdlog::formatter
~line_logger	src/3rd_party/spdlog/details/line_logger_impl.h	/^inline spdlog::details::line_logger::~line_logger()$/;"	f	class:spdlog::details::line_logger
~mpmc_bounded_queue	src/3rd_party/spdlog/details/mpmc_bounded_q.h	/^    ~mpmc_bounded_queue()$/;"	f	class:spdlog::details::mpmc_bounded_queue
~mpmc_bounded_queue	src/3rd_party/spdlog/include/spdlog/details/mpmc_bounded_q.h	/^    ~mpmc_bounded_queue()$/;"	f	class:spdlog::details::mpmc_bounded_queue
~noncopyable	src/3rd_party/yaml-cpp/noncopyable.h	/^  ~noncopyable() {}$/;"	f	class:YAML::noncopyable
~ostream_wrapper	src/3rd_party/yaml-cpp/ostream_wrapper.cpp	/^ostream_wrapper::~ostream_wrapper() {}$/;"	f	class:YAML::ostream_wrapper
~sink	src/3rd_party/spdlog/include/spdlog/sinks/sink.h	/^    virtual ~sink() {}$/;"	f	class:spdlog::sinks::sink
~sink	src/3rd_party/spdlog/sinks/sink.h	/^    virtual ~sink() {}$/;"	f	class:spdlog::sinks::sink
~syslog_sink	src/3rd_party/spdlog/include/spdlog/sinks/syslog_sink.h	/^    ~syslog_sink()$/;"	f	class:spdlog::sinks::syslog_sink
~syslog_sink	src/3rd_party/spdlog/sinks/syslog_sink.h	/^    ~syslog_sink()$/;"	f	class:spdlog::sinks::syslog_sink
~wincolor_sink	src/3rd_party/spdlog/include/spdlog/sinks/wincolor_sink.h	/^    virtual ~wincolor_sink()$/;"	f	class:spdlog::sinks::wincolor_sink
